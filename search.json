[
  {
    "objectID": "core/base.html",
    "href": "core/base.html",
    "title": "base",
    "section": "",
    "text": "Define the fundamental types used throughout the library:",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#core-types",
    "href": "core/base.html#core-types",
    "title": "base",
    "section": "",
    "text": "Define the fundamental types used throughout the library:",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#value-validators",
    "href": "core/base.html#value-validators",
    "title": "base",
    "section": "Value Validators",
    "text": "Value Validators\nFunctions to validate and identify different types of Tailwind values:\n\nsource\n\nis_numeric_scale\n\n is_numeric_scale (value:Any)\n\nCheck if value is a valid numeric scale (int, float, or ‘px’).\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nAny\nThe value to check - can be int, float, or string\n\n\nReturns\nbool\nTrue if the value is a valid numeric scale, False otherwise\n\n\n\n\nsource\n\n\nis_fraction\n\n is_fraction (value:Any)\n\nCheck if value is a valid fraction string (e.g., ‘1/2’, ‘3/4’).\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nAny\nThe value to check for fraction format\n\n\nReturns\nbool\nTrue if the value is a valid fraction string, False otherwise\n\n\n\n\nsource\n\n\nis_custom_property\n\n is_custom_property (value:Any)\n\nCheck if value is a CSS custom property (starts with –).\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nAny\nThe value to check for CSS custom property format\n\n\nReturns\nbool\nTrue if the value is a CSS custom property, False otherwise\n\n\n\n\nsource\n\n\nis_arbitrary_value\n\n is_arbitrary_value (value:Any)\n\nCheck if value is an arbitrary value (contains units or special chars).\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nAny\nThe value to check for arbitrary CSS value format\n\n\nReturns\nbool\nTrue if the value contains CSS units or calc(), False otherwise",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#base-protocol",
    "href": "core/base.html#base-protocol",
    "title": "base",
    "section": "Base Protocol",
    "text": "Base Protocol\nDefine the protocol that all utility builders must implement:\n\nsource\n\nTailwindBuilder\n\n TailwindBuilder (*args, **kwargs)\n\nProtocol for all Tailwind utility builders.",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#base-classes",
    "href": "core/base.html#base-classes",
    "title": "base",
    "section": "Base Classes",
    "text": "Base Classes\nAbstract base classes for different types of utility builders:\n\nsource\n\nBaseUtility\n\n BaseUtility (prefix:str)\n\nBase class for all Tailwind utility builders.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix (e.g., ‘w’ for width, ‘p’ for padding)",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#standard-value-formatter",
    "href": "core/base.html#standard-value-formatter",
    "title": "base",
    "section": "Standard Value Formatter",
    "text": "Standard Value Formatter\nA standard implementation for formatting Tailwind values:\n\nsource\n\nModifierMixin\n\n ModifierMixin ()\n\nMixin to add modifier support to any utility with convenient property access.",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#modifier-definitions",
    "href": "core/base.html#modifier-definitions",
    "title": "base",
    "section": "Modifier Definitions",
    "text": "Modifier Definitions\nComprehensive definitions of all Tailwind CSS modifiers/variants:\n\nsource\n\nModifierGroup\n\n ModifierGroup (name:str, description:str, modifiers:Dict[str,str])\n\nGroup of related modifiers with descriptions.\n\nsource\n\n\nStandardUtility\n\n StandardUtility (prefix:str)\n\nStandard utility class with common value formatting and modifier support.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix (e.g., ‘w’ for width, ‘p’ for padding)",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#named-scale-utilities",
    "href": "core/base.html#named-scale-utilities",
    "title": "base",
    "section": "Named Scale Utilities",
    "text": "Named Scale Utilities\nFor utilities that support named scales (e.g., sm, md, lg):\n\nsource\n\nNamedScale\n\n NamedScale (name:str, var:Optional[str]=None, comment:Optional[str]=None)\n\nRepresents a named scale with optional CSS variable.",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#modifier-support",
    "href": "core/base.html#modifier-support",
    "title": "base",
    "section": "Modifier Support",
    "text": "Modifier Support\nSupport for responsive and state modifiers:\n\nsource\n\nBreakpoint\n\n Breakpoint (name:str, min_width:Optional[str]=None)\n\nResponsive breakpoint definition.",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#base-factory-with-documentation",
    "href": "core/base.html#base-factory-with-documentation",
    "title": "base",
    "section": "Base Factory with Documentation",
    "text": "Base Factory with Documentation\nA base factory class that all factories inherit from, providing documentation support:\n\nsource\n\nBaseFactory\n\n BaseFactory (doc:str)\n\nInitialize with documentation string.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndoc\nstr\nDocumentation string describing what this factory creates",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#utility-factory",
    "href": "core/base.html#utility-factory",
    "title": "base",
    "section": "Utility Factory",
    "text": "Utility Factory\nA factory function to create utility instances with method chaining:\n\nsource\n\nUtilityFactory\n\n UtilityFactory (utility_class:type[~T], prefix:str,\n                 doc:Optional[str]=None)\n\nFactory for creating utility instances with fluent API.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nutility_class\ntype\n\nThe utility class to instantiate\n\n\nprefix\nstr\n\nThe prefix to use for the utilities\n\n\ndoc\nOptional\nNone\nOptional documentation string",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#examples",
    "href": "core/base.html#examples",
    "title": "base",
    "section": "Examples",
    "text": "Examples\nLet’s test the base architecture with some examples:\n\n# Test numeric scale\nassert is_numeric_scale(4) == True\nassert is_numeric_scale(2.5) == True\nassert is_numeric_scale(\"px\") == True\nassert is_numeric_scale(\"auto\") == False\n\n\n# Test fraction detection\nassert is_fraction(\"1/2\") == True\nassert is_fraction(\"3/4\") == True\nassert is_fraction(\"1.5\") == False\nassert is_fraction(\"full\") == False\n\n\n# Test custom property detection\nassert is_custom_property(\"--spacing-lg\") == True\nassert is_custom_property(\"--color-primary\") == True\nassert is_custom_property(\"spacing-lg\") == False\n\n\n# Test arbitrary value detection\nassert is_arbitrary_value(\"10px\") == True\nassert is_arbitrary_value(\"2.5rem\") == True\nassert is_arbitrary_value(\"100%\") == True\nassert is_arbitrary_value(\"calc(100% - 20px)\") == True\nassert is_arbitrary_value(\"auto\") == False\n\n\n# Test StandardUtility class\nclass TestUtility(StandardUtility):\n    pass\n\n# Create test instances\nutil = TestUtility(\"w\")\n\n# Test different value types\nassert util.build(4) == \"w-4\"\nassert util.build(\"1/2\") == \"w-1/2\"\nassert util.build(\"--custom\") == \"w-(--custom)\"\nassert util.build(\"10px\") == \"w-[10px]\"\nassert util.build(\"auto\") == \"w-auto\"\n\n\n# Test UtilityFactory\nw = UtilityFactory(TestUtility, \"w\")\n\n# Test factory patterns\nassert str(w(4)) == \"w-4\"\nassert str(w.full) == \"w-full\"\nassert str(w.auto) == \"w-auto\"\nassert str(w.screen) == \"w-screen\"\n\n\nTest Modifiers\nTest the modifier support on utilities:\n\n# First, let's update TestUtility to inherit from StandardUtility instead\nclass TestUtilityWithModifiers(StandardUtility):\n    pass\n\n# Test basic modifier application\nutil = TestUtilityWithModifiers(\"bg\")\nutil._value = \"red-500\"\n\n# Test single modifiers\nassert str(util.hover) == \"hover:bg-red-500\"\nassert str(util.focus) == \"focus:bg-red-500\"\nassert str(util.dark) == \"dark:bg-red-500\"\n\n# Test chained modifiers\nassert str(util.hover.dark) == \"dark:hover:bg-red-500\"\nassert str(util.md.hover) == \"hover:md:bg-red-500\"\nassert str(util.sm.hover.dark) == \"dark:hover:sm:bg-red-500\"\n\n# Test responsive modifiers\nassert str(util.sm) == \"sm:bg-red-500\"\nassert str(util.md) == \"md:bg-red-500\"\nassert str(util.lg) == \"lg:bg-red-500\"\nassert str(util._2xl) == \"2xl:bg-red-500\"\n\n# Test pseudo-element modifiers\nassert str(util.before) == \"before:bg-red-500\"\nassert str(util.after) == \"after:bg-red-500\"\nassert str(util.placeholder) == \"placeholder:bg-red-500\"\n\n# Test structural modifiers\nassert str(util.first) == \"first:bg-red-500\"\nassert str(util.last) == \"last:bg-red-500\"\nassert str(util.odd) == \"odd:bg-red-500\"\nassert str(util.even) == \"even:bg-red-500\"\n\nprint(\"✅ Basic modifier tests passed!\")\n\n✅ Basic modifier tests passed!\n\n\n\n# Test group and peer modifiers\nassert str(util.group()) == \"group:bg-red-500\"\nassert str(util.group(\"hover\")) == \"group-hover:bg-red-500\"\nassert str(util.group(\"focus\", \"sidebar\")) == \"group/sidebar-focus:bg-red-500\"\n\nassert str(util.peer()) == \"peer:bg-red-500\"\nassert str(util.peer(\"checked\")) == \"peer-checked:bg-red-500\"\nassert str(util.peer(\"invalid\", \"email\")) == \"peer/email-invalid:bg-red-500\"\n\n# Test arbitrary modifiers\nassert str(util.has(\"input:checked\")) == \"has-[input:checked]:bg-red-500\"\nassert str(util.aria(\"checked\")) == \"aria-checked:bg-red-500\"\nassert str(util.aria(\"sort\", \"ascending\")) == \"aria-[sort=ascending]:bg-red-500\"\nassert str(util.data(\"active\")) == \"data-[active]:bg-red-500\"\nassert str(util.data(\"state\", \"open\")) == \"data-[state=open]:bg-red-500\"\nassert str(util.arbitrary(\"&.is-dragging\")) == \"[&.is-dragging]:bg-red-500\"\n\nprint(\"✅ Group/peer and arbitrary modifier tests passed!\")\n\n✅ Group/peer and arbitrary modifier tests passed!",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#class-combination-utility",
    "href": "core/base.html#class-combination-utility",
    "title": "base",
    "section": "Class Combination Utility",
    "text": "Class Combination Utility\nA utility function to combine multiple class builders:\n\nsource\n\ncombine_classes\n\n combine_classes (*args:Union[str,__main__.BaseUtility,__main__.TailwindBu\n                  ilder,__main__.BaseFactory,NoneType])\n\nCombine multiple class builders or strings into a single class string.\n\n\n\n\nType\nDetails\n\n\n\n\nargs\nUnion\n\n\n\nReturns\nstr\nSpace-separated class string\n\n\n\n\n# Test combine_classes\nw_factory = UtilityFactory(TestUtility, \"w\")\nh_factory = UtilityFactory(TestUtility, \"h\")\n\nresult = combine_classes(\n    w_factory(4),\n    h_factory.full,\n    \"flex\",\n    None,\n    \"items-center\"\n)\nassert result == \"w-4 h-full flex items-center\"\n\n\nclass TestUtilityWithModifiers(StandardUtility):\n    pass\n# Test combine_classes with modifiers\nw_hover = TestUtilityWithModifiers(\"w\")\nw_hover._value = \"full\"\nw_hover = w_hover.hover\n\nh_dark = TestUtilityWithModifiers(\"h\")\nh_dark._value = \"screen\"\nh_dark = h_dark.dark.md\n\nresult = combine_classes(\n    w_hover,\n    h_dark,\n    \"flex\",\n    None,\n    \"items-center\"\n)\nassert result == \"hover:w-full md:dark:h-screen flex items-center\"\n\nprint(\"✅ combine_classes with modifiers test passed!\")\n\n✅ combine_classes with modifiers test passed!",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#practical-examples-with-fasthtml",
    "href": "core/base.html#practical-examples-with-fasthtml",
    "title": "base",
    "section": "Practical Examples with FastHTML",
    "text": "Practical Examples with FastHTML\nComprehensive examples showing modifiers in action:\n\n# Example: Interactive button with hover, focus, and active states\nfrom fasthtml.common import Button\nclass TestUtilityWithModifiers(StandardUtility):\n    pass\n# Create a utility instance with modifiers\nbg_base = TestUtilityWithModifiers(\"bg\")\nbg_base._value = \"blue-500\"\n\nbg_hover = TestUtilityWithModifiers(\"bg\")\nbg_hover._value = \"blue-600\"\n\nbg_active = TestUtilityWithModifiers(\"bg\")\nbg_active._value = \"blue-700\"\n\n# Create button with multiple states\nbutton = Button(\n    \"Click me\",\n    cls=combine_classes(\n        bg_base,\n        bg_hover.hover,\n        bg_active.active,\n        \"text-white px-4 py-2 rounded\"\n    )\n)\n\nassert button.attrs['class'] == \"bg-blue-500 hover:bg-blue-600 active:bg-blue-700 text-white px-4 py-2 rounded\"\nprint(\"✅ Interactive button example passed!\")\n\n✅ Interactive button example passed!\n\n\n\n# Example: Responsive layout with dark mode support\nfrom fasthtml.common import Div, H1, P\n\nclass TestUtilityWithModifiers(StandardUtility):\n    pass\n# Create utilities with responsive and dark mode modifiers\npadding = TestUtilityWithModifiers(\"p\")\npadding._value = \"4\"\n\npadding_md = TestUtilityWithModifiers(\"p\")\npadding_md._value = \"8\"\n\nbg_light = TestUtilityWithModifiers(\"bg\")\nbg_light._value = \"white\"\n\nbg_dark = TestUtilityWithModifiers(\"bg\")\nbg_dark._value = \"gray-900\"\n\ntext_light = TestUtilityWithModifiers(\"text\")\ntext_light._value = \"gray-900\"\n\ntext_dark = TestUtilityWithModifiers(\"text\")\ntext_dark._value = \"white\"\n\n# Create responsive card component\ncard = Div(\n    H1(\"Responsive Card\", cls=combine_classes(text_light, text_dark.dark)),\n    P(\"This card adapts to screen size and color scheme.\"),\n    cls=combine_classes(\n        padding,\n        padding_md.md,\n        bg_light,\n        bg_dark.dark,\n        \"rounded-lg shadow\"\n    )\n)\n\nassert card.attrs['class'] == \"p-4 md:p-8 bg-white dark:bg-gray-900 rounded-lg shadow\"\nassert card.children[0].attrs['class'] == \"text-gray-900 dark:text-white\"\nprint(\"✅ Responsive dark mode example passed!\")\n\n✅ Responsive dark mode example passed!\n\n\n\n# Example: Form input with various states\nfrom fasthtml.common import Input, Label, Span\n\nclass TestUtilityWithModifiers(StandardUtility):\n    pass\n    \n# Create utilities for form states\nborder_base = TestUtilityWithModifiers(\"border\")\nborder_base._value = \"gray-300\"\n\nborder_focus = TestUtilityWithModifiers(\"border\")\nborder_focus._value = \"blue-500\"\n\nborder_invalid = TestUtilityWithModifiers(\"border\")\nborder_invalid._value = \"red-500\"\n\n# Create form input with label\nform_field = Label(\n    Span(\"Email\", cls=\"block text-sm font-medium mb-1\"),\n    Input(\n        type=\"email\",\n        required=True,\n        cls=combine_classes(\n            \"w-full px-3 py-2 rounded-md\",\n            border_base,\n            border_focus.focus,\n            border_invalid.invalid,\n            \"outline-none focus:ring-2 focus:ring-blue-500/20\"\n        )\n    )\n)\n\nassert \"border-gray-300\" in form_field.children[1].attrs['class']\nassert \"focus:border-blue-500\" in form_field.children[1].attrs['class']\nassert \"invalid:border-red-500\" in form_field.children[1].attrs['class']\nprint(\"✅ Form states example passed!\")\n\n✅ Form states example passed!",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#single-value-factory",
    "href": "core/base.html#single-value-factory",
    "title": "base",
    "section": "Single Value Factory",
    "text": "Single Value Factory\nA factory for standalone utility class strings:\n\nsource\n\nSingleValueUtility\n\n SingleValueUtility (value:str)\n\nA utility that represents a single fixed value.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nstr\nThe complete utility class string (e.g., “container”, “sr-only”)\n\n\n\n\nsource\n\n\nSingleValueFactory\n\n SingleValueFactory (value:str, doc:str)\n\nFactory for a single utility class with modifier support.\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nstr\nThe utility class string (e.g., “container”)\n\n\ndoc\nstr\nDocumentation describing what this utility does\n\n\n\n\n# Test SingleValueFactory\ncontainer = SingleValueFactory(\n    \"container\", \n    \"Responsive container with breakpoint-based max-widths\"\n)\n\n# Test various ways to use it\nassert str(container) == \"container\"\nassert str(container()) == \"container\"  # Now returns a utility instance\nassert container.build() == \"container\"\nassert container.describe() == \"Responsive container with breakpoint-based max-widths\"\n\n# Test with modifiers\nassert str(container.hover) == \"hover:container\"\nassert str(container.md) == \"md:container\"\nassert str(container.dark) == \"dark:container\"\n\n# Test chained modifiers\nassert str(container.hover.md) == \"md:hover:container\"\nassert str(container.dark.lg) == \"lg:dark:container\"\n\n# Test calling with modifiers\ncontainer_util = container()\nassert str(container_util.hover) == \"hover:container\"\nassert str(container_util.focus.dark) == \"dark:focus:container\"\n\n# Test in combine_classes\nresult = combine_classes(container, \"mx-auto\", \"px-4\")\nassert result == \"container mx-auto px-4\"\n\n# Test with modifiers in combine_classes\nresult = combine_classes(container.hover, container.md, \"mx-auto\")\nassert result == \"hover:container md:container mx-auto\"\n\nprint(\"✅ SingleValueFactory with modifiers tests passed!\")\n\n✅ SingleValueFactory with modifiers tests passed!",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#directional-utilities",
    "href": "core/base.html#directional-utilities",
    "title": "base",
    "section": "Directional Utilities",
    "text": "Directional Utilities\nSupport for utilities with directional variants (top, right, bottom, left):\n\nsource\n\nDirection\n\n Direction (suffix:str, css_suffix:str)\n\nRepresents a directional variant.\n\nsource\n\n\nDirectionalUtility\n\n DirectionalUtility (prefix:str, direction:Optional[str]=None)\n\nBase class for utilities with directional variants.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nBase prefix (e.g., ‘p’ for padding)\n\n\ndirection\nOptional\nNone\nOptional direction (‘t’, ‘r’, ‘b’, ‘l’, ‘x’, ‘y’)\n\n\n\n\n# Test directional utilities\npt = DirectionalUtility(\"p\", \"t\")\nassert pt.build(4) == \"pt-4\"\n\npx = DirectionalUtility(\"p\", \"x\")\nassert px.build(8) == \"px-8\"",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/base.html#negative-value-support",
    "href": "core/base.html#negative-value-support",
    "title": "base",
    "section": "Negative Value Support",
    "text": "Negative Value Support\nSupport for utilities that can have negative values:\n\nsource\n\nNegativeableUtility\n\n NegativeableUtility (prefix:str, negative:bool=False)\n\nUtility class that supports negative values.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nBase prefix\n\n\nnegative\nbool\nFalse\nWhether this is a negative variant",
    "crumbs": [
      "core",
      "base"
    ]
  },
  {
    "objectID": "core/resources.html",
    "href": "core/resources.html",
    "title": "resources",
    "section": "",
    "text": "The library provides pre-configured CDN headers for Tailwind CSS v4:\n\nsource\n\n\n\n get_tailwind_headers ()\n\nGet the standard Tailwind CSS CDN headers.\n\nget_tailwind_headers()\n\n[script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]",
    "crumbs": [
      "core",
      "resources"
    ]
  },
  {
    "objectID": "core/resources.html#core-cdn-resources",
    "href": "core/resources.html#core-cdn-resources",
    "title": "resources",
    "section": "",
    "text": "The library provides pre-configured CDN headers for Tailwind CSS v4:\n\nsource\n\n\n\n get_tailwind_headers ()\n\nGet the standard Tailwind CSS CDN headers.\n\nget_tailwind_headers()\n\n[script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]",
    "crumbs": [
      "core",
      "resources"
    ]
  },
  {
    "objectID": "utilities/svg.html",
    "href": "utilities/svg.html",
    "title": "svg",
    "section": "",
    "text": "The fill utility controls the fill color of SVG elements. It supports all Tailwind color families and shades, as well as special color values.\n\n\nExported source\nfill_none = SingleValueFactory(\"fill-none\", \"Remove fill from an element\") # Remove fill\n\n\n\n\nExported source\nfill = ColoredFactory(\"fill\", \"Fill color utilities for styling the fill of SVG elements\") # The fill color factory\n\n\n\n\nApply fill colors using the standard color palette:\n\nsource\n\n\n\n\n test_svg_fill_examples ()\n\nTest fill color utilities with various color values.\n\n\nExported source\ndef test_svg_fill_examples():\n    \"\"\"Test fill color utilities with various color values.\"\"\"\n    # Test standard colors\n    assert str(fill.red._500) == \"fill-red-500\"\n    assert str(fill.blue._300) == \"fill-blue-300\"\n    assert str(fill.green._700) == \"fill-green-700\"\n    assert str(fill.purple._400) == \"fill-purple-400\"\n    \n    # Test all 22 color families\n    assert str(fill.red._500) == \"fill-red-500\"\n    assert str(fill.orange._500) == \"fill-orange-500\"\n    assert str(fill.amber._500) == \"fill-amber-500\"\n    assert str(fill.yellow._500) == \"fill-yellow-500\"\n    assert str(fill.lime._500) == \"fill-lime-500\"\n    assert str(fill.green._500) == \"fill-green-500\"\n    assert str(fill.emerald._500) == \"fill-emerald-500\"\n    assert str(fill.teal._500) == \"fill-teal-500\"\n    assert str(fill.cyan._500) == \"fill-cyan-500\"\n    assert str(fill.sky._500) == \"fill-sky-500\"\n    assert str(fill.blue._500) == \"fill-blue-500\"\n    assert str(fill.indigo._500) == \"fill-indigo-500\"\n    assert str(fill.violet._500) == \"fill-violet-500\"\n    assert str(fill.purple._500) == \"fill-purple-500\"\n    assert str(fill.fuchsia._500) == \"fill-fuchsia-500\"\n    assert str(fill.pink._500) == \"fill-pink-500\"\n    assert str(fill.rose._500) == \"fill-rose-500\"\n    assert str(fill.slate._500) == \"fill-slate-500\"\n    assert str(fill.gray._500) == \"fill-gray-500\"\n    assert str(fill.zinc._500) == \"fill-zinc-500\"\n    assert str(fill.neutral._500) == \"fill-neutral-500\"\n    assert str(fill.stone._500) == \"fill-stone-500\"\n    \n    # Test special colors\n    assert str(fill_none) == \"fill-none\"\n    assert str(fill.inherit) == \"fill-inherit\"\n    assert str(fill.current) == \"fill-current\"\n    assert str(fill.transparent) == \"fill-transparent\"\n    assert str(fill.black) == \"fill-black\"\n    assert str(fill.white) == \"fill-white\"\n\n# Run the tests\ntest_svg_fill_examples()\n\n\n\n\n\nControl the opacity of fill colors:\n\nsource\n\n\n\n\n test_svg_fill_opacity_examples ()\n\nTest fill colors with opacity modifiers.\n\n\nExported source\ndef test_svg_fill_opacity_examples():\n    \"\"\"Test fill colors with opacity modifiers.\"\"\"\n    # Standard opacity values\n    assert str(fill.red._500.opacity(50)) == \"fill-red-500/50\"\n    assert str(fill.blue._300.opacity(75)) == \"fill-blue-300/75\"\n    assert str(fill.black.opacity(10)) == \"fill-black/10\"\n    \n    # Arbitrary opacity values\n    assert str(fill.green._600.opacity(\"[0.87]\")) == \"fill-green-600/[0.87]\"\n    assert str(fill.purple._400.opacity(\"(--my-opacity)\")) == \"fill-purple-400/(--my-opacity)\"\n\n# Run the tests\ntest_svg_fill_opacity_examples()\n\n\n\n\n\nUse custom colors when needed:\n\nsource\n\n\n\n\n test_svg_fill_arbitrary_examples ()\n\nTest fill utilities with arbitrary and custom values.\n\n\nExported source\ndef test_svg_fill_arbitrary_examples():\n    \"\"\"Test fill utilities with arbitrary and custom values.\"\"\"\n    # Arbitrary color values\n    assert str(fill(\"#ff0000\")) == \"fill-[#ff0000]\"\n    assert str(fill(\"rgb(255, 0, 0)\")) == \"fill-[rgb(255, 0, 0)]\"\n    assert str(fill(\"hsl(0, 100%, 50%)\")) == \"fill-[hsl(0, 100%, 50%)]\"\n    \n    # CSS custom properties\n    assert str(fill(\"--custom-fill\")) == \"fill-(--custom-fill)\"\n    assert str(fill(\"--theme-primary\")) == \"fill-(--theme-primary)\"\n\n# Run the tests\ntest_svg_fill_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "svg"
    ]
  },
  {
    "objectID": "utilities/svg.html#fill",
    "href": "utilities/svg.html#fill",
    "title": "svg",
    "section": "",
    "text": "The fill utility controls the fill color of SVG elements. It supports all Tailwind color families and shades, as well as special color values.\n\n\nExported source\nfill_none = SingleValueFactory(\"fill-none\", \"Remove fill from an element\") # Remove fill\n\n\n\n\nExported source\nfill = ColoredFactory(\"fill\", \"Fill color utilities for styling the fill of SVG elements\") # The fill color factory\n\n\n\n\nApply fill colors using the standard color palette:\n\nsource\n\n\n\n\n test_svg_fill_examples ()\n\nTest fill color utilities with various color values.\n\n\nExported source\ndef test_svg_fill_examples():\n    \"\"\"Test fill color utilities with various color values.\"\"\"\n    # Test standard colors\n    assert str(fill.red._500) == \"fill-red-500\"\n    assert str(fill.blue._300) == \"fill-blue-300\"\n    assert str(fill.green._700) == \"fill-green-700\"\n    assert str(fill.purple._400) == \"fill-purple-400\"\n    \n    # Test all 22 color families\n    assert str(fill.red._500) == \"fill-red-500\"\n    assert str(fill.orange._500) == \"fill-orange-500\"\n    assert str(fill.amber._500) == \"fill-amber-500\"\n    assert str(fill.yellow._500) == \"fill-yellow-500\"\n    assert str(fill.lime._500) == \"fill-lime-500\"\n    assert str(fill.green._500) == \"fill-green-500\"\n    assert str(fill.emerald._500) == \"fill-emerald-500\"\n    assert str(fill.teal._500) == \"fill-teal-500\"\n    assert str(fill.cyan._500) == \"fill-cyan-500\"\n    assert str(fill.sky._500) == \"fill-sky-500\"\n    assert str(fill.blue._500) == \"fill-blue-500\"\n    assert str(fill.indigo._500) == \"fill-indigo-500\"\n    assert str(fill.violet._500) == \"fill-violet-500\"\n    assert str(fill.purple._500) == \"fill-purple-500\"\n    assert str(fill.fuchsia._500) == \"fill-fuchsia-500\"\n    assert str(fill.pink._500) == \"fill-pink-500\"\n    assert str(fill.rose._500) == \"fill-rose-500\"\n    assert str(fill.slate._500) == \"fill-slate-500\"\n    assert str(fill.gray._500) == \"fill-gray-500\"\n    assert str(fill.zinc._500) == \"fill-zinc-500\"\n    assert str(fill.neutral._500) == \"fill-neutral-500\"\n    assert str(fill.stone._500) == \"fill-stone-500\"\n    \n    # Test special colors\n    assert str(fill_none) == \"fill-none\"\n    assert str(fill.inherit) == \"fill-inherit\"\n    assert str(fill.current) == \"fill-current\"\n    assert str(fill.transparent) == \"fill-transparent\"\n    assert str(fill.black) == \"fill-black\"\n    assert str(fill.white) == \"fill-white\"\n\n# Run the tests\ntest_svg_fill_examples()\n\n\n\n\n\nControl the opacity of fill colors:\n\nsource\n\n\n\n\n test_svg_fill_opacity_examples ()\n\nTest fill colors with opacity modifiers.\n\n\nExported source\ndef test_svg_fill_opacity_examples():\n    \"\"\"Test fill colors with opacity modifiers.\"\"\"\n    # Standard opacity values\n    assert str(fill.red._500.opacity(50)) == \"fill-red-500/50\"\n    assert str(fill.blue._300.opacity(75)) == \"fill-blue-300/75\"\n    assert str(fill.black.opacity(10)) == \"fill-black/10\"\n    \n    # Arbitrary opacity values\n    assert str(fill.green._600.opacity(\"[0.87]\")) == \"fill-green-600/[0.87]\"\n    assert str(fill.purple._400.opacity(\"(--my-opacity)\")) == \"fill-purple-400/(--my-opacity)\"\n\n# Run the tests\ntest_svg_fill_opacity_examples()\n\n\n\n\n\nUse custom colors when needed:\n\nsource\n\n\n\n\n test_svg_fill_arbitrary_examples ()\n\nTest fill utilities with arbitrary and custom values.\n\n\nExported source\ndef test_svg_fill_arbitrary_examples():\n    \"\"\"Test fill utilities with arbitrary and custom values.\"\"\"\n    # Arbitrary color values\n    assert str(fill(\"#ff0000\")) == \"fill-[#ff0000]\"\n    assert str(fill(\"rgb(255, 0, 0)\")) == \"fill-[rgb(255, 0, 0)]\"\n    assert str(fill(\"hsl(0, 100%, 50%)\")) == \"fill-[hsl(0, 100%, 50%)]\"\n    \n    # CSS custom properties\n    assert str(fill(\"--custom-fill\")) == \"fill-(--custom-fill)\"\n    assert str(fill(\"--theme-primary\")) == \"fill-(--theme-primary)\"\n\n# Run the tests\ntest_svg_fill_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "svg"
    ]
  },
  {
    "objectID": "utilities/svg.html#stroke",
    "href": "utilities/svg.html#stroke",
    "title": "svg",
    "section": "Stroke",
    "text": "Stroke\nThe stroke utility controls the stroke color of SVG elements. It supports the same color system as fill.\n\n\nExported source\nstroke_none = SingleValueFactory(\"stroke-none\", \"Remove stroke from an element\") # Remove stroke\n\n\n\n\nExported source\nstroke = ColoredFactory(\"stroke\", \"Stroke color utilities for styling the stroke of SVG elements\") # The stroke color factory\n\n\n\nBasic Stroke Colors\nApply stroke colors using the standard color palette:\n\nsource\n\n\ntest_svg_stroke_examples\n\n test_svg_stroke_examples ()\n\nTest stroke color utilities with various color values.\n\n\nExported source\ndef test_svg_stroke_examples():\n    \"\"\"Test stroke color utilities with various color values.\"\"\"\n    # Test standard colors\n    assert str(stroke.red._500) == \"stroke-red-500\"\n    assert str(stroke.blue._300) == \"stroke-blue-300\"\n    assert str(stroke.green._700) == \"stroke-green-700\"\n    assert str(stroke.purple._400) == \"stroke-purple-400\"\n\n    # Test all 22 color families\n    assert str(stroke.red._500) == \"stroke-red-500\"\n    assert str(stroke.orange._500) == \"stroke-orange-500\"\n    assert str(stroke.amber._500) == \"stroke-amber-500\"\n    assert str(stroke.yellow._500) == \"stroke-yellow-500\"\n    assert str(stroke.lime._500) == \"stroke-lime-500\"\n    assert str(stroke.green._500) == \"stroke-green-500\"\n    assert str(stroke.emerald._500) == \"stroke-emerald-500\"\n    assert str(stroke.teal._500) == \"stroke-teal-500\"\n    assert str(stroke.cyan._500) == \"stroke-cyan-500\"\n    assert str(stroke.sky._500) == \"stroke-sky-500\"\n    assert str(stroke.blue._500) == \"stroke-blue-500\"\n    assert str(stroke.indigo._500) == \"stroke-indigo-500\"\n    assert str(stroke.violet._500) == \"stroke-violet-500\"\n    assert str(stroke.purple._500) == \"stroke-purple-500\"\n    assert str(stroke.fuchsia._500) == \"stroke-fuchsia-500\"\n    assert str(stroke.pink._500) == \"stroke-pink-500\"\n    assert str(stroke.rose._500) == \"stroke-rose-500\"\n    assert str(stroke.slate._500) == \"stroke-slate-500\"\n    assert str(stroke.gray._500) == \"stroke-gray-500\"\n    assert str(stroke.zinc._500) == \"stroke-zinc-500\"\n    assert str(stroke.neutral._500) == \"stroke-neutral-500\"\n    assert str(stroke.stone._500) == \"stroke-stone-500\"\n    \n    # Test special colors\n    assert str(stroke_none) == \"stroke-none\"\n    assert str(stroke.inherit) == \"stroke-inherit\"\n    assert str(stroke.current) == \"stroke-current\"\n    assert str(stroke.transparent) == \"stroke-transparent\"\n    assert str(stroke.black) == \"stroke-black\"\n    assert str(stroke.white) == \"stroke-white\"\n\n# Run the tests\ntest_svg_stroke_examples()\n\n\n\n\nStroke with Opacity\nControl the opacity of stroke colors:\n\nsource\n\n\ntest_svg_stroke_opacity_examples\n\n test_svg_stroke_opacity_examples ()\n\nTest stroke colors with opacity modifiers.\n\n\nExported source\ndef test_svg_stroke_opacity_examples():\n    \"\"\"Test stroke colors with opacity modifiers.\"\"\"\n    # Standard opacity values\n    assert str(stroke.red._500.opacity(50)) == \"stroke-red-500/50\"\n    assert str(stroke.blue._300.opacity(75)) == \"stroke-blue-300/75\"\n    assert str(stroke.black.opacity(10)) == \"stroke-black/10\"\n    \n    # Arbitrary opacity values\n    assert str(stroke.green._600.opacity(\"[0.87]\")) == \"stroke-green-600/[0.87]\"\n    assert str(stroke.purple._400.opacity(\"(--my-opacity)\")) == \"stroke-purple-400/(--my-opacity)\"\n\n# Run the tests\ntest_svg_stroke_opacity_examples()",
    "crumbs": [
      "utilities",
      "svg"
    ]
  },
  {
    "objectID": "utilities/svg.html#stroke-width",
    "href": "utilities/svg.html#stroke-width",
    "title": "svg",
    "section": "Stroke Width",
    "text": "Stroke Width\nThe stroke-width utility controls the width of SVG strokes. It supports numeric values from 0-2 by default.\n\nsource\n\nStrokeWidthFactory\n\n StrokeWidthFactory ()\n\nFactory for stroke-width utilities with restricted numeric scale (0-2).\n\n\nExported source\nstroke_width = StrokeWidthFactory() # The stroke width factory\n\n\n\n\nBasic Stroke Width\nApply stroke width values:\n\nsource\n\n\ntest_svg_stroke_width_examples\n\n test_svg_stroke_width_examples ()\n\nTest stroke width utilities with various values.\n\n\nExported source\ndef test_svg_stroke_width_examples():\n    \"\"\"Test stroke width utilities with various values.\"\"\"\n    # Test default numeric values (0-2)\n    assert str(stroke_width(0)) == \"stroke-0\"\n    assert str(stroke_width(1)) == \"stroke-1\"\n    assert str(stroke_width(2)) == \"stroke-2\"\n    \n    # Test attribute access\n    assert str(stroke_width._0) == \"stroke-0\"\n    assert str(stroke_width._1) == \"stroke-1\"\n    assert str(stroke_width._2) == \"stroke-2\"\n    \n    # Test values outside default range (treated as arbitrary)\n    assert str(stroke_width(3)) == \"stroke-[3]\"\n    assert str(stroke_width(0.5)) == \"stroke-[0.5]\"\n    assert str(stroke_width(1.5)) == \"stroke-[1.5]\"\n    assert str(stroke_width._4) == \"stroke-[4]\"\n\n# Run the tests\ntest_svg_stroke_width_examples()\n\n\n\n\nArbitrary Stroke Width Values\nUse custom stroke width values:\n\nsource\n\n\ntest_svg_stroke_width_arbitrary_examples\n\n test_svg_stroke_width_arbitrary_examples ()\n\nTest stroke width utilities with arbitrary and custom values.\n\n\nExported source\ndef test_svg_stroke_width_arbitrary_examples():\n    \"\"\"Test stroke width utilities with arbitrary and custom values.\"\"\"\n    # Arbitrary numeric values\n    assert str(stroke_width(\"0.25\")) == \"stroke-[0.25]\"\n    assert str(stroke_width(\"10px\")) == \"stroke-[10px]\"\n    assert str(stroke_width(\"2rem\")) == \"stroke-[2rem]\"\n    \n    # CSS custom properties\n    assert str(stroke_width(\"--stroke-thin\")) == \"stroke-(--stroke-thin)\"\n    assert str(stroke_width(\"--stroke-thick\")) == \"stroke-(--stroke-thick)\"\n\n# Run the tests\ntest_svg_stroke_width_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "svg"
    ]
  },
  {
    "objectID": "utilities/svg.html#practical-examples",
    "href": "utilities/svg.html#practical-examples",
    "title": "svg",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these SVG utilities in real FastHTML components:\n\nsource\n\ntest_svg_fasthtml_examples\n\n test_svg_fasthtml_examples ()\n\nTest SVG utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_svg_fasthtml_examples():\n    \"\"\"Test SVG utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div\n    from fasthtml.svg import Svg, Circle, Rect, G, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Icon with fill color\n    icon = Svg(\n        Path(\n            d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\",\n            cls=str(fill.current)\n        ),\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(w(6), h(6), fill_none)\n    )\n    assert \"fill-current\" in icon.children[0].attrs['class']\n    assert \"fill-none\" in icon.attrs['class']\n    \n    # Circle with stroke\n    circle_svg = Svg(\n        Circle(\n            cx=\"50\", cy=\"50\", r=\"40\",\n            cls=combine_classes(\n                fill.transparent,\n                stroke.blue._500,\n                stroke_width(2)\n            )\n        ),\n        viewBox=\"0 0 100 100\",\n        cls=combine_classes(w(24), h(24))\n    )\n    circle_attrs = circle_svg.children[0].attrs['class']\n    assert \"fill-transparent\" in circle_attrs\n    assert \"stroke-blue-500\" in circle_attrs\n    assert \"stroke-2\" in circle_attrs\n    \n    # Complex SVG with multiple elements\n    complex_svg = Svg(\n        G(\n            Rect(\n                x=\"10\", y=\"10\", width=\"80\", height=\"80\",\n                cls=combine_classes(\n                    fill.red._200,\n                    stroke.red._600,\n                    stroke_width(1)\n                )\n            ),\n            Circle(\n                cx=\"50\", cy=\"50\", r=\"20\",\n                cls=combine_classes(\n                    fill.blue._400.opacity(75),\n                    stroke.blue._700,\n                    stroke_width(2)\n                )\n            )\n        ),\n        viewBox=\"0 0 100 100\",\n        cls=combine_classes(w(32), h(32))\n    )\n    rect_attrs = complex_svg.children[0].children[0].attrs['class']\n    circle_attrs = complex_svg.children[0].children[1].attrs['class']\n    assert \"fill-red-200\" in rect_attrs\n    assert \"stroke-red-600\" in rect_attrs\n    assert \"stroke-1\" in rect_attrs\n    assert \"fill-blue-400/75\" in circle_attrs\n    assert \"stroke-blue-700\" in circle_attrs\n    assert \"stroke-2\" in circle_attrs\n    \n    # Return all examples in a grid layout\n    return Div(\n        icon,\n        circle_svg,\n        complex_svg,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_svg_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"w-6 h-6 fill-none\"&gt;&lt;path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" class=\"fill-current\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 100 100\" class=\"w-24 h-24\"&gt;&lt;circle r=\"40\" cx=\"50\" cy=\"50\" class=\"fill-transparent stroke-blue-500 stroke-2\"&gt;&lt;/circle&gt;&lt;/svg&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 100 100\" class=\"w-32 h-32\"&gt;&lt;g&gt;&lt;rect width=\"80\" height=\"80\" x=\"10\" y=\"10\" class=\"fill-red-200 stroke-red-600 stroke-1\"&gt;&lt;/rect&gt;&lt;circle r=\"20\" cx=\"50\" cy=\"50\" class=\"fill-blue-400/75 stroke-blue-700 stroke-2\"&gt;&lt;/circle&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;\n\n\n\ntest_func = test_svg_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\n\nSVG Icon Examples\nCreate reusable icon components:\n\nsource\n\n\ntest_svg_icon_fasthtml_examples\n\n test_svg_icon_fasthtml_examples ()\n\nTest creating reusable SVG icon components.\n\n\nExported source\ndef test_svg_icon_fasthtml_examples():\n    \"\"\"Test creating reusable SVG icon components.\"\"\"\n    from fasthtml.common import Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import items, justify, gap, grid_display, flex_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    \n    # Helper function to create an icon\n    def Icon(path_d: str, size: int = 6, color_cls: str = \"\"):\n        \"\"\"Create a reusable icon component.\"\"\"\n        return Svg(\n            Path(d=path_d, cls=str(fill.current)),\n            viewBox=\"0 0 24 24\",\n            cls=combine_classes(\n                w(size), h(size),\n                fill_none,\n                stroke.current,\n                stroke_width(2),\n                color_cls\n            )\n        )\n    \n    # Home icon\n    home_icon = Icon(\n        \"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\",\n        size=8,\n        color_cls=\"text-blue-500\"\n    )\n    assert \"w-8 h-8\" in home_icon.attrs['class']\n    assert \"fill-none\" in home_icon.attrs['class']\n    assert \"stroke-current\" in home_icon.attrs['class']\n    assert \"stroke-2\" in home_icon.attrs['class']\n    assert \"text-blue-500\" in home_icon.attrs['class']\n    \n    # Check icon with custom colors\n    check_icon = Div(\n        Svg(\n            Path(\n                d=\"M5 13l4 4L19 7\",\n                cls=combine_classes(\n                    fill_none,\n                    stroke.green._500,\n                    stroke_width(2)\n                )\n            ),\n            viewBox=\"0 0 24 24\",\n            cls=combine_classes(w(5), h(5))\n        ),\n        cls=combine_classes(flex_display.inline, items.center, justify.center)\n    )\n    path_attrs = check_icon.children[0].children[0].attrs['class']\n    assert \"fill-none\" in path_attrs\n    assert \"stroke-green-500\" in path_attrs\n    assert \"stroke-2\" in path_attrs\n    \n    # Return all examples in a grid layout\n    return Div(\n        home_icon,\n        check_icon,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_svg_icon_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"w-8 h-8 fill-none stroke-current stroke-2 text-blue-500\"&gt;&lt;path d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" class=\"fill-current\"&gt;&lt;/path&gt;&lt;/svg&gt;  &lt;div class=\"inline-flex items-center justify-center\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"w-5 h-5\"&gt;&lt;path d=\"M5 13l4 4L19 7\" class=\"fill-none stroke-green-500 stroke-2\"&gt;&lt;/path&gt;&lt;/svg&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_svg_icon_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\n\nProgress Ring Example\nCreate a circular progress indicator:\n\nsource\n\n\ntest_svg_progress_ring_fasthtml_examples\n\n test_svg_progress_ring_fasthtml_examples ()\n\nTest creating a progress ring component.\n\n\nExported source\ndef test_svg_progress_ring_fasthtml_examples():\n    \"\"\"Test creating a progress ring component.\"\"\"\n    from fasthtml.common import Div\n    from fasthtml.svg import Svg, Circle\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw, position\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display, flex_display\n    \n    # Progress ring component\n    def ProgressRing(percentage: int, size: int = 120):\n        \"\"\"Create a circular progress indicator.\"\"\"\n        radius = 45\n        circumference = 2 * 3.14159 * radius\n        stroke_dashoffset = circumference - (percentage / 100) * circumference\n        \n        return Div(\n            Svg(\n                # Background circle\n                Circle(\n                    cx=str(size // 2),\n                    cy=str(size // 2),\n                    r=str(radius),\n                    cls=combine_classes(\n                        fill_none,\n                        stroke.gray._200,\n                        stroke_width(8)\n                    )\n                ),\n                # Progress circle\n                Circle(\n                    cx=str(size // 2),\n                    cy=str(size // 2),\n                    r=str(radius),\n                    cls=combine_classes(\n                        fill_none,\n                        stroke.blue._500,\n                        stroke_width(8)\n                    ),\n                    style=f\"stroke-dasharray: {circumference}; stroke-dashoffset: {stroke_dashoffset}; transform: rotate(-90deg); transform-origin: center;\",\n                ),\n                viewBox=f\"0 0 {size} {size}\",\n                cls=combine_classes(w(32), h(32))\n            ),\n            cls=combine_classes(position.relative, flex_display.inline)\n        )\n    \n    # Test 75% progress\n    progress_75 = ProgressRing(75)\n    svg = progress_75.children[0]\n    bg_circle = svg.children[0]\n    progress_circle = svg.children[1]\n    \n    assert \"fill-none\" in bg_circle.attrs['class']\n    assert \"stroke-gray-200\" in bg_circle.attrs['class']\n    assert \"stroke-[8]\" in bg_circle.attrs['class']\n    \n    assert \"fill-none\" in progress_circle.attrs['class']\n    assert \"stroke-blue-500\" in progress_circle.attrs['class']\n    assert \"stroke-[8]\" in progress_circle.attrs['class']\n    assert \"stroke-dasharray\" in progress_circle.attrs['style']\n    \n    # Create different progress examples\n    progress_25 = ProgressRing(25)\n    progress_50 = ProgressRing(50)\n    progress_100 = ProgressRing(100)\n    \n    # Return all examples in a grid layout\n    return Div(\n        progress_25,\n        progress_50,\n        progress_75,\n        progress_100,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_svg_progress_ring_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"relative inline-flex\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 120 120\" class=\"w-32 h-32\"&gt;&lt;circle r=\"45\" cx=\"60\" cy=\"60\" class=\"fill-none stroke-gray-200 stroke-[8]\"&gt;&lt;/circle&gt;&lt;circle r=\"45\" cx=\"60\" cy=\"60\" class=\"fill-none stroke-blue-500 stroke-[8]\" style=\"stroke-dasharray: 282.74309999999997; stroke-dashoffset: 212.057325; transform: rotate(-90deg); transform-origin: center;\"&gt;&lt;/circle&gt;&lt;/svg&gt;  &lt;/div&gt;\n  &lt;div class=\"relative inline-flex\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 120 120\" class=\"w-32 h-32\"&gt;&lt;circle r=\"45\" cx=\"60\" cy=\"60\" class=\"fill-none stroke-gray-200 stroke-[8]\"&gt;&lt;/circle&gt;&lt;circle r=\"45\" cx=\"60\" cy=\"60\" class=\"fill-none stroke-blue-500 stroke-[8]\" style=\"stroke-dasharray: 282.74309999999997; stroke-dashoffset: 141.37154999999998; transform: rotate(-90deg); transform-origin: center;\"&gt;&lt;/circle&gt;&lt;/svg&gt;  &lt;/div&gt;\n  &lt;div class=\"relative inline-flex\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 120 120\" class=\"w-32 h-32\"&gt;&lt;circle r=\"45\" cx=\"60\" cy=\"60\" class=\"fill-none stroke-gray-200 stroke-[8]\"&gt;&lt;/circle&gt;&lt;circle r=\"45\" cx=\"60\" cy=\"60\" class=\"fill-none stroke-blue-500 stroke-[8]\" style=\"stroke-dasharray: 282.74309999999997; stroke-dashoffset: 70.68577499999998; transform: rotate(-90deg); transform-origin: center;\"&gt;&lt;/circle&gt;&lt;/svg&gt;  &lt;/div&gt;\n  &lt;div class=\"relative inline-flex\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 120 120\" class=\"w-32 h-32\"&gt;&lt;circle r=\"45\" cx=\"60\" cy=\"60\" class=\"fill-none stroke-gray-200 stroke-[8]\"&gt;&lt;/circle&gt;&lt;circle r=\"45\" cx=\"60\" cy=\"60\" class=\"fill-none stroke-blue-500 stroke-[8]\" style=\"stroke-dasharray: 282.74309999999997; stroke-dashoffset: 0.0; transform: rotate(-90deg); transform-origin: center;\"&gt;&lt;/circle&gt;&lt;/svg&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_svg_progress_ring_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "svg"
    ]
  },
  {
    "objectID": "utilities/svg.html#edge-cases-and-special-values",
    "href": "utilities/svg.html#edge-cases-and-special-values",
    "title": "svg",
    "section": "Edge Cases and Special Values",
    "text": "Edge Cases and Special Values\nTest edge cases and special SVG-specific values:\n\nsource\n\ntest_svg_edge_cases\n\n test_svg_edge_cases ()\n\nTest edge cases and special values for SVG utilities.",
    "crumbs": [
      "utilities",
      "svg"
    ]
  },
  {
    "objectID": "utilities/svg.html#helper-functions",
    "href": "utilities/svg.html#helper-functions",
    "title": "svg",
    "section": "Helper Functions",
    "text": "Helper Functions\nConvenient functions for common SVG patterns:\n\nsource\n\nsvg_icon_classes\n\n svg_icon_classes (fill_color:Union[str,cjm_fasthtml_tailwind.builders.col\n                   ors.ColoredUtility,NoneType]=None, stroke_color:Union[s\n                   tr,cjm_fasthtml_tailwind.builders.colors.ColoredUtility\n                   ,NoneType]=None, width:Union[int,str]=2, size:int=6,\n                   extra_classes:str='')\n\nGenerate common SVG icon classes.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfill_color\nUnion\nNone\nFill color class or utility\n\n\nstroke_color\nUnion\nNone\nStroke color class or utility\n\n\nwidth\nUnion\n2\nStroke width value\n\n\nsize\nint\n6\nIcon size (numeric value for w and h)\n\n\nextra_classes\nstr\n\nAdditional classes to include\n\n\nReturns\nstr\n\nCombined class string for SVG icon\n\n\n\n\nsource\n\n\ntest_svg_helper_functions\n\n test_svg_helper_functions ()\n\nTest SVG helper functions.",
    "crumbs": [
      "utilities",
      "svg"
    ]
  },
  {
    "objectID": "utilities/typography.html",
    "href": "utilities/typography.html",
    "title": "typography",
    "section": "",
    "text": "Utilities for controlling the font family of an element:\n\nsource\n\n\n\n FontFamily (value, names=None, module=None, qualname=None, type=None,\n             start=1, boundary=None)\n\nFont family options for controlling typography.\n\n\nExported source\nclass FontFamily(str, Enum):\n    \"\"\"Font family options for controlling typography.\"\"\"\n    SANS = \"sans\"\n    SERIF = \"serif\"\n    MONO = \"mono\"\n\nfont_family = enums_to_simple_factory(\"font\", [FontFamily], \"Utilities for controlling the font family of an element.\") # Font family utilities\n\n\n\nsource\n\n\n\n\n test_typography_font_family_examples ()\n\nTest font family utilities.\n\n\nExported source\ndef test_typography_font_family_examples():\n    \"\"\"Test font family utilities.\"\"\"\n    assert str(font_family.sans) == \"font-sans\"\n    assert str(font_family.serif) == \"font-serif\"\n    assert str(font_family.mono) == \"font-mono\"\n\n# Run the tests\ntest_typography_font_family_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#font-family",
    "href": "utilities/typography.html#font-family",
    "title": "typography",
    "section": "",
    "text": "Utilities for controlling the font family of an element:\n\nsource\n\n\n\n FontFamily (value, names=None, module=None, qualname=None, type=None,\n             start=1, boundary=None)\n\nFont family options for controlling typography.\n\n\nExported source\nclass FontFamily(str, Enum):\n    \"\"\"Font family options for controlling typography.\"\"\"\n    SANS = \"sans\"\n    SERIF = \"serif\"\n    MONO = \"mono\"\n\nfont_family = enums_to_simple_factory(\"font\", [FontFamily], \"Utilities for controlling the font family of an element.\") # Font family utilities\n\n\n\nsource\n\n\n\n\n test_typography_font_family_examples ()\n\nTest font family utilities.\n\n\nExported source\ndef test_typography_font_family_examples():\n    \"\"\"Test font family utilities.\"\"\"\n    assert str(font_family.sans) == \"font-sans\"\n    assert str(font_family.serif) == \"font-serif\"\n    assert str(font_family.mono) == \"font-mono\"\n\n# Run the tests\ntest_typography_font_family_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#font-size",
    "href": "utilities/typography.html#font-size",
    "title": "typography",
    "section": "Font Size",
    "text": "Font Size\nUtilities for controlling the font size of an element.\n\nsource\n\ntest_typography_font_size_examples\n\n test_typography_font_size_examples ()\n\nTest font size utilities.\n\n\nExported source\nfont_size = ScaledFactory('text', FONT_SIZE_CONFIG, \"Utilities for controlling the font size of an element.\") # Font size factory\n\n\n\n\nExported source\ndef test_typography_font_size_examples():\n    \"\"\"Test font size utilities.\"\"\"\n    assert str(font_size.xs) == \"text-xs\"\n    assert str(font_size.sm) == \"text-sm\"\n    assert str(font_size.base) == \"text-base\"\n    assert str(font_size.lg) == \"text-lg\"\n    assert str(font_size.xl) == \"text-xl\"\n    assert str(font_size._2xl) == \"text-2xl\"\n    assert str(font_size._3xl) == \"text-3xl\"\n    assert str(font_size._4xl) == \"text-4xl\"\n    assert str(font_size._5xl) == \"text-5xl\"\n    assert str(font_size._6xl) == \"text-6xl\"\n    assert str(font_size._7xl) == \"text-7xl\"\n    assert str(font_size._8xl) == \"text-8xl\"\n    assert str(font_size._9xl) == \"text-9xl\"\n\n# Run the tests\ntest_typography_font_size_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#font-smoothing",
    "href": "utilities/typography.html#font-smoothing",
    "title": "typography",
    "section": "Font Smoothing",
    "text": "Font Smoothing\nUtilities for controlling the font smoothing of an element:\n\nsource\n\ntest_typography_font_smoothing_examples\n\n test_typography_font_smoothing_examples ()\n\nTest font smoothing utilities.\n\n\nExported source\nantialiased = SingleValueFactory(\"antialiased\", \"Applies antialiased font smoothing\") # Antialiased font smoothing\nsubpixel_antialiased = SingleValueFactory(\"subpixel-antialiased\", \"Applies subpixel antialiased font smoothing\") # Subpixel antialiased font smoothing\n\n\n\n\nExported source\ndef test_typography_font_smoothing_examples():\n    \"\"\"Test font smoothing utilities.\"\"\"\n    assert str(antialiased) == \"antialiased\"\n    assert str(subpixel_antialiased) == \"subpixel-antialiased\"\n\n# Run the tests\ntest_typography_font_smoothing_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#font-style",
    "href": "utilities/typography.html#font-style",
    "title": "typography",
    "section": "Font Style",
    "text": "Font Style\nUtilities for controlling the style of text:\n\nsource\n\ntest_typography_font_style_examples\n\n test_typography_font_style_examples ()\n\nTest font style utilities.\n\n\nExported source\nitalic = SingleValueFactory(\"italic\", \"Sets font style to italic\") # Italic font style\nnot_italic = SingleValueFactory(\"not-italic\", \"Sets font style to normal\") # Normal font style\n\n\n\n\nExported source\ndef test_typography_font_style_examples():\n    \"\"\"Test font style utilities.\"\"\"\n    assert str(italic) == \"italic\"\n    assert str(not_italic) == \"not-italic\"\n\n# Run the tests\ntest_typography_font_style_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#font-weight",
    "href": "utilities/typography.html#font-weight",
    "title": "typography",
    "section": "Font Weight",
    "text": "Font Weight\nUtilities for controlling the font weight of an element:\n\nsource\n\nFontWeight\n\n FontWeight (value, names=None, module=None, qualname=None, type=None,\n             start=1, boundary=None)\n\nFont weight options from thin to black.\n\n\nExported source\nclass FontWeight(str, Enum):\n    \"\"\"Font weight options from thin to black.\"\"\"\n    THIN = \"thin\"\n    EXTRALIGHT = \"extralight\"\n    LIGHT = \"light\"\n    NORMAL = \"normal\"\n    MEDIUM = \"medium\"\n    SEMIBOLD = \"semibold\"\n    BOLD = \"bold\"\n    EXTRABOLD = \"extrabold\"\n    BLACK = \"black\"\n\nfont_weight = enums_to_simple_factory(\"font\", [FontWeight], \"Utilities for controlling the font weight of an element.\") # Font weight utilities\n\n\n\nsource\n\n\ntest_typography_font_weight_examples\n\n test_typography_font_weight_examples ()\n\nTest font weight utilities.\n\n\nExported source\ndef test_typography_font_weight_examples():\n    \"\"\"Test font weight utilities.\"\"\"\n    # Named weights\n    assert str(font_weight.thin) == \"font-thin\"\n    assert str(font_weight.extralight) == \"font-extralight\"\n    assert str(font_weight.light) == \"font-light\"\n    assert str(font_weight.normal) == \"font-normal\"\n    assert str(font_weight.medium) == \"font-medium\"\n    assert str(font_weight.semibold) == \"font-semibold\"\n    assert str(font_weight.bold) == \"font-bold\"\n    assert str(font_weight.extrabold) == \"font-extrabold\"\n    assert str(font_weight.black) == \"font-black\"\n\n# Run the tests\ntest_typography_font_weight_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#font-stretch",
    "href": "utilities/typography.html#font-stretch",
    "title": "typography",
    "section": "Font Stretch",
    "text": "Font Stretch\nUtilities for selecting the width of a font face:\n\nsource\n\nFontStretch\n\n FontStretch (value, names=None, module=None, qualname=None, type=None,\n              start=1, boundary=None)\n\nFont stretch options for controlling font width.\n\n\nExported source\nclass FontStretch(str, Enum):\n    \"\"\"Font stretch options for controlling font width.\"\"\"\n    ULTRA_CONDENSED = \"ultra-condensed\"\n    EXTRA_CONDENSED = \"extra-condensed\"\n    CONDENSED = \"condensed\"\n    SEMI_CONDENSED = \"semi-condensed\"\n    NORMAL = \"normal\"\n    SEMI_EXPANDED = \"semi-expanded\"\n    EXPANDED = \"expanded\"\n    EXTRA_EXPANDED= \"extra-expanded\"\n    ULRA_EXPANDED = \"ultra-expanded\"\n\nfont_stretch = enums_to_simple_factory(\"font-stretch\", [FontStretch], \"Utilities for selecting the width of a font face.\") # Font stretch utilities\n\n\n\nsource\n\n\ntest_typography_font_stretch_examples\n\n test_typography_font_stretch_examples ()\n\nTest font stretch utilities.\n\n\nExported source\ndef test_typography_font_stretch_examples():\n    \"\"\"Test font stretch utilities.\"\"\"\n    assert str(font_stretch.ultra_condensed) == \"font-stretch-ultra-condensed\"\n    assert str(font_stretch.extra_condensed) == \"font-stretch-extra-condensed\"\n    assert str(font_stretch.condensed) == \"font-stretch-condensed\"\n    assert str(font_stretch.semi_condensed) == \"font-stretch-semi-condensed\"\n    assert str(font_stretch.normal) == \"font-stretch-normal\"\n    assert str(font_stretch.semi_expanded) == \"font-stretch-semi-expanded\"\n    assert str(font_stretch.expanded) == \"font-stretch-expanded\"\n    assert str(font_stretch.extra_expanded) == \"font-stretch-extra-expanded\"\n    assert str(font_stretch.ultra_expanded) == \"font-stretch-ultra-expanded\"\n\n# Run the tests\ntest_typography_font_stretch_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#font-variant-numeric",
    "href": "utilities/typography.html#font-variant-numeric",
    "title": "typography",
    "section": "Font Variant Numeric",
    "text": "Font Variant Numeric\nUtilities for controlling the variant of numbers.\n\nsource\n\ntest_typography_font_variant_numeric_examples\n\n test_typography_font_variant_numeric_examples ()\n\nTest font variant numeric utilities.\n\n\nExported source\n# Font variant numeric utilities\nnormal_nums = SingleValueFactory(\"normal-nums\", \"Normal numeric font variant\") # Normal numbers\nordinal = SingleValueFactory(\"ordinal\", \"Ordinal numeric markers\") # Ordinal numbers\nslashed_zero = SingleValueFactory(\"slashed-zero\", \"Force zero with slash\") # Slashed zero\nlining_nums = SingleValueFactory(\"lining-nums\", \"Lining figures\") # Lining numbers\noldstyle_nums = SingleValueFactory(\"oldstyle-nums\", \"Old-style figures\") # Old-style numbers\nproportional_nums = SingleValueFactory(\"proportional-nums\", \"Proportional figures\") # Proportional numbers\ntabular_nums = SingleValueFactory(\"tabular-nums\", \"Tabular figures\") # Tabular numbers\ndiagonal_fractions = SingleValueFactory(\"diagonal-fractions\", \"Diagonal fractions\") # Diagonal fractions\nstacked_fractions = SingleValueFactory(\"stacked-fractions\", \"Stacked fractions\") # Stacked fractions\n\n\n\n\nExported source\ndef test_typography_font_variant_numeric_examples():\n    \"\"\"Test font variant numeric utilities.\"\"\"\n    assert str(normal_nums) == \"normal-nums\"\n    assert str(ordinal) == \"ordinal\"\n    assert str(slashed_zero) == \"slashed-zero\"\n    assert str(lining_nums) == \"lining-nums\"\n    assert str(oldstyle_nums) == \"oldstyle-nums\"\n    assert str(proportional_nums) == \"proportional-nums\"\n    assert str(tabular_nums) == \"tabular-nums\"\n    assert str(diagonal_fractions) == \"diagonal-fractions\"\n    assert str(stacked_fractions) == \"stacked-fractions\"\n\n# Run the tests\ntest_typography_font_variant_numeric_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#letter-spacing",
    "href": "utilities/typography.html#letter-spacing",
    "title": "typography",
    "section": "Letter Spacing",
    "text": "Letter Spacing\nUtilities for controlling the tracking (letter spacing) of an element:\n\nsource\n\ntest_typography_spacing_examples\n\n test_typography_spacing_examples ()\n\nTest letter spacing utilities.\n\n\nExported source\n# Letter spacing config\nTRACKING_CONFIG = ScaleConfig(\n    numeric=False,\n    decimals=False,\n    fractions=False,\n    named=[\n        NamedScale(\"tighter\", \"--tracking-tighter\", \"-0.05em\"),\n        NamedScale(\"tight\", \"--tracking-tight\", \"-0.025em\"),\n        NamedScale(\"normal\", \"--tracking-normal\", \"0em\"),\n        NamedScale(\"wide\", \"--tracking-wide\", \"0.025em\"),\n        NamedScale(\"wider\", \"--tracking-wider\", \"0.05em\"),\n        NamedScale(\"widest\", \"--tracking-widest\", \"0.1em\")\n    ],\n    special={},\n    negative=False\n)\n\ntracking = ScaledFactory(\"tracking\", TRACKING_CONFIG, \"Letter spacing utilities for controlling tracking\") # Letter spacing factory\n\n\n\n\nExported source\ndef test_typography_spacing_examples():\n    \"\"\"Test letter spacing utilities.\"\"\"\n    # Letter spacing\n    assert str(tracking.tighter) == \"tracking-tighter\"\n    assert str(tracking.tight) == \"tracking-tight\"\n    assert str(tracking.normal) == \"tracking-normal\"\n    assert str(tracking.wide) == \"tracking-wide\"\n    assert str(tracking.wider) == \"tracking-wider\"\n    assert str(tracking.widest) == \"tracking-widest\"\n    assert str(tracking(\"0.05em\")) == \"tracking-[0.05em]\"\n    assert str(tracking(\"--custom-tracking\")) == \"tracking-(--custom-tracking)\"\n\n# Run the tests\ntest_typography_spacing_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#line-clamp",
    "href": "utilities/typography.html#line-clamp",
    "title": "typography",
    "section": "Line Clamp",
    "text": "Line Clamp\nUtilities for clamping text to a specific number of lines:\n\nsource\n\ntest_typography_line_clamp_examples\n\n test_typography_line_clamp_examples ()\n\nTest line clamp utilities.\n\n\nExported source\ndef test_typography_line_clamp_examples():\n    \"\"\"Test line clamp utilities.\"\"\"\n        \n    # Line clamp\n    assert str(line_clamp.none) == \"line-clamp-none\"\n    assert str(line_clamp(1)) == \"line-clamp-1\"\n    assert str(line_clamp(2)) == \"line-clamp-2\"\n    assert str(line_clamp(3)) == \"line-clamp-3\"\n    assert str(line_clamp(4)) == \"line-clamp-4\"\n    assert str(line_clamp(5)) == \"line-clamp-5\"\n    assert str(line_clamp(6)) == \"line-clamp-6\"\n    assert str(line_clamp(\"[10]\")) == \"line-clamp-[10]\"\n\n# Run the tests\ntest_typography_line_clamp_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#line-height",
    "href": "utilities/typography.html#line-height",
    "title": "typography",
    "section": "Line Height",
    "text": "Line Height\nUtilities for controlling the leading (line height) of an element:\n\nsource\n\ntest_typography_line_height_examples\n\n test_typography_line_height_examples ()\n\nTest line height utilities.\n\n\nExported source\ndef test_typography_line_height_examples():\n    \"\"\"Test line height utilities.\"\"\"\n    # Line height\n    assert str(leading.none) == \"leading-none\"\n    assert str(leading(3)) == \"leading-3\"\n    assert str(leading(4)) == \"leading-4\"\n    assert str(leading(5)) == \"leading-5\"\n    assert str(leading(6)) == \"leading-6\"\n    assert str(leading(7)) == \"leading-7\"\n    assert str(leading(8)) == \"leading-8\"\n    assert str(leading(9)) == \"leading-9\"\n    assert str(leading(10)) == \"leading-10\"\n    assert str(leading(\"1.5\")) == \"leading-[1.5]\"\n    assert str(leading(\"20px\")) == \"leading-[20px]\"\n    assert str(leading(\"--custom-leading\")) == \"leading-(--custom-leading)\"\n\n# Run the tests\ntest_typography_line_height_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#list-style",
    "href": "utilities/typography.html#list-style",
    "title": "typography",
    "section": "List Style",
    "text": "List Style\nUtilities for controlling list styles:\n\nList Style Image\nUtilities for controlling the marker images for list items:\n\nsource\n\n\nListImageFactory\n\n ListImageFactory ()\n\nFactory for list-style-image utilities.\n\nsource\n\n\nListImageUtility\n\n ListImageUtility (prefix:str)\n\nUtility class for list-style-image with arbitrary value support.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix (e.g., ‘w’ for width, ‘p’ for padding)\n\n\n\n\nsource\n\n\ntest_typography_list_image_examples\n\n test_typography_list_image_examples ()\n\nTest list style image utilities.\n\n\nExported source\ndef test_typography_list_image_examples():\n    \"\"\"Test list style image utilities.\"\"\"\n    assert str(list_image.none) == \"list-image-none\"\n    assert str(list_image(\"url(/path/to/marker.svg)\")) == \"list-image-[url(/path/to/marker.svg)]\"\n    assert str(list_image(\"--custom-marker\")) == \"list-image-(--custom-marker)\"\n    assert str(list_image(\"url('star.png')\")) == \"list-image-[url('star.png')]\"\n\n# Run the tests\ntest_typography_list_image_examples()\n\n\n\n\nList Style Position and Type\n\nsource\n\n\nListStylePosition\n\n ListStylePosition (value, names=None, module=None, qualname=None,\n                    type=None, start=1, boundary=None)\n\nList marker position options.\n\n\nExported source\nclass ListStylePosition(str, Enum):\n    \"\"\"List marker position options.\"\"\"\n    INSIDE = \"inside\"\n    OUTSIDE = \"outside\"\n\nlist_position = enums_to_simple_factory(\"list\", [ListStylePosition], \"Utilities for controlling the position of bullets and numbers in lists.\") # List position factory\n\n\n\nsource\n\n\nListStyleType\n\n ListStyleType (value, names=None, module=None, qualname=None, type=None,\n                start=1, boundary=None)\n\nList marker type options.\n\n\nExported source\nclass ListStyleType(str, Enum):\n    \"\"\"List marker type options.\"\"\"\n    DISC = \"disc\"\n    DECIMAL = \"decimal\"\n    NONE = \"none\"\n\nlist_style = enums_to_simple_factory(\"list\", [ListStyleType], \"Utilities for controlling the marker style of a list.\") # List type factory\n\n\n\nsource\n\n\ntest_typography_list_styles_examples\n\n test_typography_list_styles_examples ()\n\nTest list styles utilities.\n\n\nExported source\ndef test_typography_list_styles_examples():\n    \"\"\"Test list styles utilities.\"\"\"\n    \n    # List styles\n    assert str(list_position.inside) == \"list-inside\"\n    assert str(list_position.outside) == \"list-outside\"\n    assert str(list_style.disc) == \"list-disc\"\n    assert str(list_style.decimal) == \"list-decimal\"\n    assert str(list_style.none) == \"list-none\"\n\n# Run the tests\ntest_typography_list_styles_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#text-alignment",
    "href": "utilities/typography.html#text-alignment",
    "title": "typography",
    "section": "Text Alignment",
    "text": "Text Alignment\nUtilities for controlling the alignment of text:\n\nsource\n\nTextAlign\n\n TextAlign (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\nText alignment options.\n\n\nExported source\nclass TextAlign(str, Enum):\n    \"\"\"Text alignment options.\"\"\"\n    LEFT = \"left\"\n    CENTER = \"center\"\n    RIGHT = \"right\"\n    JUSTIFY = \"justify\"\n    START = \"start\"\n    end = \"end\"\n\ntext_align = enums_to_simple_factory(\"text\", [TextAlign], \"Utilities for controlling the alignment of text.\") # Text alignment factory\n\n\n\nsource\n\n\ntest_typography_text_alignment_examples\n\n test_typography_text_alignment_examples ()\n\nTest text alignment utilities.\n\n\nExported source\ndef test_typography_text_alignment_examples():\n    \"\"\"Test text alignment utilities.\"\"\"\n    # Text alignment\n    assert str(text_align.left) == \"text-left\"\n    assert str(text_align.center) == \"text-center\"\n    assert str(text_align.right) == \"text-right\"\n    assert str(text_align.justify) == \"text-justify\"\n    assert str(text_align.start) == \"text-start\"\n    assert str(text_align.end) == \"text-end\"\n\n# Run the tests\ntest_typography_text_alignment_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#text-color",
    "href": "utilities/typography.html#text-color",
    "title": "typography",
    "section": "Text Color",
    "text": "Text Color\nUtilities for controlling the text color of an element.\n\nsource\n\ntest_typography_text_color_examples\n\n test_typography_text_color_examples ()\n\nTest text color utilities.\n\n\nExported source\ndef test_typography_text_color_examples():\n    \"\"\"Test text color utilities.\"\"\"\n    # Standard colors\n    assert str(text_color.red._500) == \"text-red-500\"\n    assert str(text_color.blue._300) == \"text-blue-300\"\n    assert str(text_color.green._600) == \"text-green-600\"\n\n    # Test all 22 color families\n    assert str(text_color.red._500) == \"text-red-500\"\n    assert str(text_color.orange._500) == \"text-orange-500\"\n    assert str(text_color.amber._500) == \"text-amber-500\"\n    assert str(text_color.yellow._500) == \"text-yellow-500\"\n    assert str(text_color.lime._500) == \"text-lime-500\"\n    assert str(text_color.green._500) == \"text-green-500\"\n    assert str(text_color.emerald._500) == \"text-emerald-500\"\n    assert str(text_color.teal._500) == \"text-teal-500\"\n    assert str(text_color.cyan._500) == \"text-cyan-500\"\n    assert str(text_color.sky._500) == \"text-sky-500\"\n    assert str(text_color.blue._500) == \"text-blue-500\"\n    assert str(text_color.indigo._500) == \"text-indigo-500\"\n    assert str(text_color.violet._500) == \"text-violet-500\"\n    assert str(text_color.purple._500) == \"text-purple-500\"\n    assert str(text_color.fuchsia._500) == \"text-fuchsia-500\"\n    assert str(text_color.pink._500) == \"text-pink-500\"\n    assert str(text_color.rose._500) == \"text-rose-500\"\n    assert str(text_color.slate._500) == \"text-slate-500\"\n    assert str(text_color.gray._500) == \"text-gray-500\"\n    assert str(text_color.zinc._500) == \"text-zinc-500\"\n    assert str(text_color.neutral._500) == \"text-neutral-500\"\n    assert str(text_color.stone._500) == \"text-stone-500\"\n    \n    # Special colors\n    assert str(text_color.transparent) == \"text-transparent\"\n    assert str(text_color.black) == \"text-black\"\n    assert str(text_color.white) == \"text-white\"\n    assert str(text_color.current) == \"text-current\"\n    assert str(text_color.inherit) == \"text-inherit\"\n    \n    # With opacity\n    assert str(text_color.red._500.opacity(50)) == \"text-red-500/50\"\n    assert str(text_color.blue._300.opacity(75)) == \"text-blue-300/75\"\n    \n    # Arbitrary values\n    assert str(text_color(\"#ff0000\")) == \"text-[#ff0000]\"\n    assert str(text_color(\"rgb(255, 0, 0)\")) == \"text-[rgb(255, 0, 0)]\"\n    assert str(text_color(\"--custom-color\")) == \"text-(--custom-color)\"\n\n# Run the tests\ntest_typography_text_color_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#text-decoration",
    "href": "utilities/typography.html#text-decoration",
    "title": "typography",
    "section": "Text Decoration",
    "text": "Text Decoration\n\nText Decoration Line\nUtilities for controlling the decoration of text:\n\n\nText Decoration Color\nUtilities for controlling the color of text decorations:\n\n\nText Decoration Style\nUtilities for controlling the style of text decorations:\n\nsource\n\n\nDecorationStyle\n\n DecorationStyle (value, names=None, module=None, qualname=None,\n                  type=None, start=1, boundary=None)\n\nText decoration style options.\n\n\nExported source\nclass DecorationStyle(str, Enum):\n    \"\"\"Text decoration style options.\"\"\"\n    SOLID = \"solid\"\n    DOUBLE = \"double\"\n    DOTTED = \"dotted\"\n    DASHED = \"dashed\"\n    WAVY = \"wavy\"\n\ndecoration_style = enums_to_simple_factory(\"decoration\", [DecorationStyle], \"Utilities for controlling the style of text decorations.\") # Text decoration style factory\n\n\n\n\nText Decoration Thickness\nUtilities for controlling the thickness of text decorations:\n\nsource\n\n\ntest_typography_text_decoration_examples\n\n test_typography_text_decoration_examples ()\n\nTest text decoration utilities.\n\n\nExported source\ndef test_typography_text_decoration_examples():\n    \"\"\"Test text decoration utilities.\"\"\"\n    # Decoration lines\n    assert str(underline) == \"underline\"\n    assert str(overline) == \"overline\"\n    assert str(line_through) == \"line-through\"\n    assert str(no_underline) == \"no-underline\"\n    \n    # Decoration colors\n    assert str(decoration_color.red._500) == \"decoration-red-500\"\n    assert str(decoration_color.blue._300) == \"decoration-blue-300\"\n    assert str(decoration_color.inherit) == \"decoration-inherit\"\n    assert str(decoration_color.current) == \"decoration-current\"\n    assert str(decoration_color.transparent) == \"decoration-transparent\"\n\n    # Test all 22 color families\n    assert str(decoration_color.red._500) == \"decoration-red-500\"\n    assert str(decoration_color.orange._500) == \"decoration-orange-500\"\n    assert str(decoration_color.amber._500) == \"decoration-amber-500\"\n    assert str(decoration_color.yellow._500) == \"decoration-yellow-500\"\n    assert str(decoration_color.lime._500) == \"decoration-lime-500\"\n    assert str(decoration_color.green._500) == \"decoration-green-500\"\n    assert str(decoration_color.emerald._500) == \"decoration-emerald-500\"\n    assert str(decoration_color.teal._500) == \"decoration-teal-500\"\n    assert str(decoration_color.cyan._500) == \"decoration-cyan-500\"\n    assert str(decoration_color.sky._500) == \"decoration-sky-500\"\n    assert str(decoration_color.blue._500) == \"decoration-blue-500\"\n    assert str(decoration_color.indigo._500) == \"decoration-indigo-500\"\n    assert str(decoration_color.violet._500) == \"decoration-violet-500\"\n    assert str(decoration_color.purple._500) == \"decoration-purple-500\"\n    assert str(decoration_color.fuchsia._500) == \"decoration-fuchsia-500\"\n    assert str(decoration_color.pink._500) == \"decoration-pink-500\"\n    assert str(decoration_color.rose._500) == \"decoration-rose-500\"\n    assert str(decoration_color.slate._500) == \"decoration-slate-500\"\n    assert str(decoration_color.gray._500) == \"decoration-gray-500\"\n    assert str(decoration_color.zinc._500) == \"decoration-zinc-500\"\n    assert str(decoration_color.neutral._500) == \"decoration-neutral-500\"\n    assert str(decoration_color.stone._500) == \"decoration-stone-500\"\n    \n    # Decoration styles\n    assert str(decoration_style.solid) == \"decoration-solid\"\n    assert str(decoration_style.double) == \"decoration-double\"\n    assert str(decoration_style.dotted) == \"decoration-dotted\"\n    assert str(decoration_style.dashed) == \"decoration-dashed\"\n    assert str(decoration_style.wavy) == \"decoration-wavy\"\n    \n    # Decoration thickness\n    assert str(decoration_thickness(0)) == \"decoration-0\"\n    assert str(decoration_thickness(1)) == \"decoration-1\"\n    assert str(decoration_thickness(2)) == \"decoration-2\"\n    assert str(decoration_thickness(4)) == \"decoration-4\"\n    assert str(decoration_thickness(8)) == \"decoration-8\"\n    assert str(decoration_thickness.auto) == \"decoration-auto\"\n    assert str(decoration_thickness.from_font) == \"decoration-from-font\"\n    assert str(decoration_thickness(\"3px\")) == \"decoration-[3px]\"\n    assert str(decoration_thickness(\"--line-thickness\")) == \"decoration-(--line-thickness)\"\n\n# Run the tests\ntest_typography_text_decoration_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#text-underline-offset",
    "href": "utilities/typography.html#text-underline-offset",
    "title": "typography",
    "section": "Text Underline Offset",
    "text": "Text Underline Offset\nUtilities for controlling the offset of a text underline:\n\nsource\n\ntest_typography_underline_offset_examples\n\n test_typography_underline_offset_examples ()\n\nTest underline offset utilities.\n\n\nExported source\ndef test_typography_underline_offset_examples():\n    \"\"\"Test underline offset utilities.\"\"\"    \n    # Underline offset\n    assert str(underline_offset(0)) == \"underline-offset-0\"\n    assert str(underline_offset(1)) == \"underline-offset-1\"\n    assert str(underline_offset(2)) == \"underline-offset-2\"\n    assert str(underline_offset(4)) == \"underline-offset-4\"\n    assert str(underline_offset(8)) == \"underline-offset-8\"\n    assert str(underline_offset.auto) == \"underline-offset-auto\"\n    assert str(underline_offset.negative(1)) == \"-underline-offset-1\"\n    assert str(underline_offset.negative(2)) == \"-underline-offset-2\"\n    assert str(underline_offset(\"3px\")) == \"underline-offset-[3px]\"\n\n# Run the tests\ntest_typography_underline_offset_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#text-transform",
    "href": "utilities/typography.html#text-transform",
    "title": "typography",
    "section": "Text Transform",
    "text": "Text Transform\nUtilities for controlling the capitalization of text:\n\nsource\n\ntest_typography_text_transform_examples\n\n test_typography_text_transform_examples ()\n\nTest text transform utilities.\n\n\nExported source\ndef test_typography_text_transform_examples():\n    \"\"\"Test text transform utilities.\"\"\"    \n    # Text transform\n    assert str(uppercase) == \"uppercase\"\n    assert str(lowercase) == \"lowercase\"\n    assert str(capitalize) == \"capitalize\"\n    assert str(normal_case) == \"normal-case\"\n\n# Run the tests\ntest_typography_text_transform_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#text-overflow",
    "href": "utilities/typography.html#text-overflow",
    "title": "typography",
    "section": "Text Overflow",
    "text": "Text Overflow\nUtilities for controlling text overflow in an element:\n\nsource\n\ntest_typography_text_overflow_examples\n\n test_typography_text_overflow_examples ()\n\nTest text overflow utilities.\n\n\nExported source\ndef test_typography_text_overflow_examples():\n    \"\"\"Test text overflow utilities.\"\"\"\n    # Text overflow\n    assert str(truncate) == \"truncate\"\n    assert str(text_ellipsis) == \"text-ellipsis\"\n    assert str(text_clip) == \"text-clip\"\n\n# Run the tests\ntest_typography_text_overflow_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#text-wrap",
    "href": "utilities/typography.html#text-wrap",
    "title": "typography",
    "section": "Text Wrap",
    "text": "Text Wrap\nUtilities for controlling how text wraps within an element:\n\nsource\n\ntest_typography_text_wrap_examples\n\n test_typography_text_wrap_examples ()\n\nTest text wrap utilities.\n\n\nExported source\ndef test_typography_text_wrap_examples():\n    \"\"\"Test text wrap utilities.\"\"\"\n    \n    # Text wrap\n    assert str(text_wrap) == \"text-wrap\"\n    assert str(text_nowrap) == \"text-nowrap\"\n    assert str(text_balance) == \"text-balance\"\n    assert str(text_pretty) == \"text-pretty\"\n\n# Run the tests\ntest_typography_text_wrap_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#text-indent",
    "href": "utilities/typography.html#text-indent",
    "title": "typography",
    "section": "Text Indent",
    "text": "Text Indent\nUtilities for controlling text indentation:\n\nsource\n\ntest_typography_text_indent_examples\n\n test_typography_text_indent_examples ()\n\nTest text indent utilities.\n\n\nExported source\ndef test_typography_text_indent_examples():\n    \"\"\"Test text indent utilities.\"\"\"\n        \n    # Text indent\n    assert str(indent(0)) == \"indent-0\"\n    assert str(indent(4)) == \"indent-4\"\n    assert str(indent(8)) == \"indent-8\"\n    assert str(indent.px) == \"indent-px\"\n    assert str(indent.negative(4)) == \"-indent-4\"\n    assert str(indent(\"10px\")) == \"indent-[10px]\"\n\n# Run the tests\ntest_typography_text_indent_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#vertical-align",
    "href": "utilities/typography.html#vertical-align",
    "title": "typography",
    "section": "Vertical Align",
    "text": "Vertical Align\nUtilities for controlling vertical alignment:\n\nsource\n\ntest_typography_vertical_align_examples\n\n test_typography_vertical_align_examples ()\n\nTest vertical align utilities.\n\n\nExported source\ndef test_typography_vertical_align_examples():\n    \"\"\"Test vertical align utilities.\"\"\"\n    \n    # Vertical align\n    assert str(align.baseline) == \"align-baseline\"\n    assert str(align.top) == \"align-top\"\n    assert str(align.middle) == \"align-middle\"\n    assert str(align.bottom) == \"align-bottom\"\n    assert str(align.text_top) == \"align-text-top\"\n    assert str(align.text_bottom) == \"align-text-bottom\"\n    assert str(align.sub) == \"align-sub\"\n    assert str(align.super) == \"align-super\"\n\n# Run the tests\ntest_typography_vertical_align_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#white-space",
    "href": "utilities/typography.html#white-space",
    "title": "typography",
    "section": "White Space",
    "text": "White Space\nUtilities for controlling an element’s white-space property:\n\nsource\n\ntest_typography_whitespace_examples\n\n test_typography_whitespace_examples ()\n\nTest whitespace utilities.\n\n\nExported source\ndef test_typography_whitespace_examples():\n    \"\"\"Test whitespace utilities.\"\"\"\n    \n    # White space\n    assert str(whitespace.normal) == \"whitespace-normal\"\n    assert str(whitespace.nowrap) == \"whitespace-nowrap\"\n    assert str(whitespace.pre) == \"whitespace-pre\"\n    assert str(whitespace.pre_line) == \"whitespace-pre-line\"\n    assert str(whitespace.pre_wrap) == \"whitespace-pre-wrap\"\n    assert str(whitespace.break_spaces) == \"whitespace-break-spaces\"\n\n# Run the tests\ntest_typography_whitespace_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#word-break",
    "href": "utilities/typography.html#word-break",
    "title": "typography",
    "section": "Word Break",
    "text": "Word Break\nUtilities for controlling word breaks in an element:\n\nsource\n\ntest_typography_word_break_examples\n\n test_typography_word_break_examples ()\n\nTest word break utilities.\n\n\nExported source\ndef test_typography_word_break_examples():\n    \"\"\"Test word break utilities.\"\"\"\n    \n    # Word break\n    assert str(break_normal) == \"break-normal\"\n    assert str(break_all) == \"break-all\"\n    assert str(break_keep) == \"break-keep\"\n\n# Run the tests\ntest_typography_word_break_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#overflow-wrap",
    "href": "utilities/typography.html#overflow-wrap",
    "title": "typography",
    "section": "Overflow Wrap",
    "text": "Overflow Wrap\nUtilities for controlling line breaks within words:\n\nsource\n\ntest_typography_overflow_wrap_examples\n\n test_typography_overflow_wrap_examples ()\n\nTest overflow wrap utilities.\n\n\nExported source\ndef test_typography_overflow_wrap_examples():\n    \"\"\"Test overflow wrap utilities.\"\"\"\n    \n    # Overflow wrap\n    assert str(wrap_break_word) == \"wrap-break-word\"\n    assert str(wrap_anywhere) == \"wrap-anywhere\"\n    assert str(wrap_normal) == \"wrap-normal\"\n\n# Run the tests\ntest_typography_overflow_wrap_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#hyphens",
    "href": "utilities/typography.html#hyphens",
    "title": "typography",
    "section": "Hyphens",
    "text": "Hyphens\nUtilities for controlling how words should be hyphenated:\n\nsource\n\ntest_typography_hyphens_examples\n\n test_typography_hyphens_examples ()\n\nTest hyphens utilities.\n\n\nExported source\ndef test_typography_hyphens_examples():\n    \"\"\"Test hyphens utilities.\"\"\"\n    \n    # Hyphens\n    assert str(hyphens.none) == \"hyphens-none\"\n    assert str(hyphens.manual) == \"hyphens-manual\"\n    assert str(hyphens.auto) == \"hyphens-auto\"\n\n# Run the tests\ntest_typography_hyphens_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#content",
    "href": "utilities/typography.html#content",
    "title": "typography",
    "section": "Content",
    "text": "Content\nUtilities for controlling the content of the before and after pseudo-elements:\n\nsource\n\nContentFactory\n\n ContentFactory ()\n\nFactory for content utilities for pseudo-elements.\n\nsource\n\n\nContentUtility\n\n ContentUtility (prefix:str)\n\nUtility class for content with arbitrary value support.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix (e.g., ‘w’ for width, ‘p’ for padding)\n\n\n\n\nsource\n\n\ntest_typography_content_examples\n\n test_typography_content_examples ()\n\nTest content utilities for pseudo-elements.\n\n\nExported source\ndef test_typography_content_examples():\n    \"\"\"Test content utilities for pseudo-elements.\"\"\"\n    assert str(content.none) == \"content-none\"\n    assert str(content(\"'Hello'\")) == \"content-['Hello']\"\n    assert str(content('\"→\"')) == 'content-[\"→\"]'\n    assert str(content(\"attr(data-label)\")) == \"content-[attr(data-label)]\"\n    assert str(content(\"--custom-content\")) == \"content-(--custom-content)\"\n    assert str(content(\"open-quote\")) == \"content-[open-quote]\"\n    assert str(content(\"' (' attr(href) ')'\")) == \"content-[' (' attr(href) ')']\"\n\n# Run the tests\ntest_typography_content_examples()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#practical-examples",
    "href": "utilities/typography.html#practical-examples",
    "title": "typography",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these typography utilities in real FastHTML components:\n\nsource\n\ntest_typography_fasthtml_examples\n\n test_typography_fasthtml_examples ()\n\nTest typography utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_typography_fasthtml_examples():\n    \"\"\"Test typography utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import H1, H2, P, Div, Span, A, Ul, Li, Blockquote\n    from cjm_fasthtml_tailwind.utilities.sizing import max_w\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.borders import rounded, border, border_color\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Heading with multiple typography utilities\n    heading = H1(\n        \"Welcome to Our Site\",\n        cls=combine_classes(\n            font_size._4xl,\n            font_weight.bold,\n            text_color.gray._900,\n            tracking.tight,\n            leading(8)\n        )\n    )\n    assert \"text-4xl\" in heading.attrs['class']\n    assert \"font-bold\" in heading.attrs['class']\n    assert \"text-gray-900\" in heading.attrs['class']\n    assert \"tracking-tight\" in heading.attrs['class']\n    assert \"leading-8\" in heading.attrs['class']\n    \n    # Paragraph with text styling\n    paragraph = P(\n        \"This is a sample paragraph with various text styles applied.\",\n        cls=combine_classes(\n            font_size.base,\n            text_color.gray._600,\n            leading(7),\n            text_align.justify\n        )\n    )\n    assert \"text-base\" in paragraph.attrs['class']\n    assert \"text-gray-600\" in paragraph.attrs['class']\n    \n    # Link with underline and hover effects\n    link = A(\n        \"Click here\",\n        href=\"#\",\n        cls=combine_classes(\n            text_color.blue._600,\n            underline,\n            decoration_style.dotted,\n            decoration_thickness(2),\n            font_weight.medium\n        )\n    )\n    assert \"text-blue-600\" in link.attrs['class']\n    assert \"underline\" in link.attrs['class']\n    assert \"decoration-dotted\" in link.attrs['class']\n    \n    # Truncated text\n    truncated = Div(\n        \"This is a very long text that should be truncated with an ellipsis when it overflows the container width.\",\n        cls=combine_classes(truncate, max_w.xs)\n    )\n    assert \"truncate\" in truncated.attrs['class']\n    \n    # Multi-line clamp\n    clamped = P(\n        \"This is a longer paragraph that spans multiple lines. It will be clamped to show only 3 lines with an ellipsis at the end if the content exceeds that limit.\",\n        cls=str(line_clamp(3))\n    )\n    assert clamped.attrs['class'] == \"line-clamp-3\"\n    \n    # Code block with monospace font\n    code = Div(\n        \"const greeting = 'Hello, World!';\",\n        cls=combine_classes(\n            font_family.mono,\n            font_size.sm,\n            text_color.gray._800,\n            whitespace.pre,\n            bg.gray._100,\n            p(4),\n            rounded()\n        )\n    )\n    assert \"font-mono\" in code.attrs['class']\n    assert \"whitespace-pre\" in code.attrs['class']\n    \n    # List with custom styles\n    custom_list = Ul(\n        Li(\"First item\"),\n        Li(\"Second item\"),\n        Li(\"Third item\"),\n        cls=combine_classes(\n            list_style.disc,\n            list_position.inside,\n            text_color.gray._700\n        )\n    )\n    assert \"list-disc\" in custom_list.attrs['class']\n    assert \"list-inside\" in custom_list.attrs['class']\n    \n    # Text with transform\n    transformed = Span(\n        \"uppercase text\",\n        cls=combine_classes(uppercase, tracking.wider)\n    )\n    assert \"uppercase\" in transformed.attrs['class']\n    assert \"tracking-wider\" in transformed.attrs['class']\n    \n    # Blockquote with indent\n    quote = Blockquote(\n        \"The only way to do great work is to love what you do.\",\n        cls=combine_classes(\n            font_size.lg,\n            italic,\n            text_color.gray._600,\n            indent(8),\n            border.l._4,\n            border_color.gray._300,\n            p.l(4)\n        )\n    )\n    assert \"text-lg\" in quote.attrs['class']\n    assert \"italic\" in quote.attrs['class']\n    assert \"indent-8\" in quote.attrs['class']\n\n    return Div(\n        heading,\n        paragraph,\n        link,\n        truncated,\n        clamped,\n        code,\n        custom_list,\n        transformed,\n        quote,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_typography_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;h1 class=\"text-4xl font-bold text-gray-900 tracking-tight leading-8\"&gt;Welcome to Our Site&lt;/h1&gt;\n  &lt;p class=\"text-base text-gray-600 leading-7 text-justify\"&gt;This is a sample paragraph with various text styles applied.&lt;/p&gt;\n&lt;a href=\"#\" class=\"text-blue-600 underline decoration-dotted decoration-2 font-medium\"&gt;Click here&lt;/a&gt;  &lt;div class=\"truncate max-w-xs\"&gt;This is a very long text that should be truncated with an ellipsis when it overflows the container width.&lt;/div&gt;\n  &lt;p class=\"line-clamp-3\"&gt;This is a longer paragraph that spans multiple lines. It will be clamped to show only 3 lines with an ellipsis at the end if the content exceeds that limit.&lt;/p&gt;\n  &lt;div class=\"font-mono text-sm text-gray-800 whitespace-pre bg-gray-100 p-4 rounded\"&gt;const greeting = 'Hello, World!';&lt;/div&gt;\n  &lt;ul class=\"list-disc list-inside text-gray-700\"&gt;\n    &lt;li&gt;First item&lt;/li&gt;\n    &lt;li&gt;Second item&lt;/li&gt;\n    &lt;li&gt;Third item&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;span class=\"uppercase tracking-wider\"&gt;uppercase text&lt;/span&gt;  &lt;blockquote class=\"text-lg italic text-gray-600 indent-8 border-l-4 border-gray-300 pl-4\"&gt;The only way to do great work is to love what you do.&lt;/blockquote&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_typography_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/typography.html#export",
    "href": "utilities/typography.html#export",
    "title": "typography",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "typography"
    ]
  },
  {
    "objectID": "utilities/filters.html",
    "href": "utilities/filters.html",
    "title": "filters",
    "section": "",
    "text": "Control whether to apply filter styles to an element:\n\nsource\n\n\n\n test_filters_control_examples ()\n\nTest filter control utilities.\n\n\nExported source\nfilter_none = SingleValueFactory(\"filter-none\", \"Remove all filters from an element\") # Remove filters\n\n\n\n\nExported source\ndef test_filters_control_examples():\n    \"\"\"Test filter control utilities.\"\"\"\n    assert str(filter_none) == \"filter-none\"\n    assert str(filter_none()) == \"filter-none\"\n    assert filter_none.build() == \"filter-none\"\n\n# Run the tests\ntest_filters_control_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#filter-control",
    "href": "utilities/filters.html#filter-control",
    "title": "filters",
    "section": "",
    "text": "Control whether to apply filter styles to an element:\n\nsource\n\n\n\n test_filters_control_examples ()\n\nTest filter control utilities.\n\n\nExported source\nfilter_none = SingleValueFactory(\"filter-none\", \"Remove all filters from an element\") # Remove filters\n\n\n\n\nExported source\ndef test_filters_control_examples():\n    \"\"\"Test filter control utilities.\"\"\"\n    assert str(filter_none) == \"filter-none\"\n    assert str(filter_none()) == \"filter-none\"\n    assert filter_none.build() == \"filter-none\"\n\n# Run the tests\ntest_filters_control_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#blur-filter",
    "href": "utilities/filters.html#blur-filter",
    "title": "filters",
    "section": "Blur Filter",
    "text": "Blur Filter\nApply blur filters to an element:\n\nsource\n\nBlurScale\n\n BlurScale (name:str, pixels:str, var:str)\n\nRepresents a blur scale with name and pixel value.\n\nsource\n\n\ntest_filters_blur_examples\n\n test_filters_blur_examples ()\n\nTest blur filter utilities.\n\n\nExported source\n# Blur scale definitions based on Tailwind v4 docs\nBLUR_SCALES = [\n    BlurScale(\"xs\", \"4px\", \"--blur-xs\"),\n    BlurScale(\"sm\", \"8px\", \"--blur-sm\"),\n    BlurScale(\"md\", \"12px\", \"--blur-md\"),\n    BlurScale(\"lg\", \"16px\", \"--blur-lg\"),\n    BlurScale(\"xl\", \"24px\", \"--blur-xl\"),\n    BlurScale(\"2xl\", \"40px\", \"--blur-2xl\"),\n    BlurScale(\"3xl\", \"64px\", \"--blur-3xl\"),\n]\n\n\n\n\nExported source\n# Create blur factory using SimpleFactory for named scales\nblur = SimpleFactory(\n    {\n        \"none\": \"blur-none\",\n        \"xs\": \"blur-xs\",\n        \"sm\": \"blur-sm\",\n        \"md\": \"blur-md\",\n        \"lg\": \"blur-lg\",\n        \"xl\": \"blur-xl\",\n        \"_2xl\": \"blur-2xl\",\n        \"_3xl\": \"blur-3xl\"\n    },\n    \"Blur filter utilities for applying blur effects to an element\"\n) # Blur filter factory\n\n\n\n\nExported source\ndef test_filters_blur_examples():\n    \"\"\"Test blur filter utilities.\"\"\"\n    # Test named blur scales\n    assert str(blur.none) == \"blur-none\"\n    assert str(blur.xs) == \"blur-xs\"\n    assert str(blur.sm) == \"blur-sm\"\n    assert str(blur.md) == \"blur-md\"\n    assert str(blur.lg) == \"blur-lg\"\n    assert str(blur.xl) == \"blur-xl\"\n    assert str(blur._2xl) == \"blur-2xl\"\n    assert str(blur._3xl) == \"blur-3xl\"\n\n# Run the tests\ntest_filters_blur_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#brightness-filter",
    "href": "utilities/filters.html#brightness-filter",
    "title": "filters",
    "section": "Brightness Filter",
    "text": "Brightness Filter\nControl the brightness of an element:\n\nsource\n\ntest_filters_brightness_examples\n\n test_filters_brightness_examples ()\n\nTest brightness filter utilities.\n\n\nExported source\n# Brightness percentage values (common presets)\nBRIGHTNESS_VALUES = [0, 50, 75, 90, 95, 100, 105, 110, 125, 150, 200]\n\n# Create brightness configuration for percentage scale\nbrightness_config = ScaleConfig(\n    numeric=True,  # Support numeric values\n    decimals=False,\n    fractions=False,\n    named=None,\n    special=None,\n    negative=False\n)\n\n# Create brightness factory\nbrightness = ScaledFactory(\"brightness\", brightness_config, \"Brightness filter utilities for adjusting element brightness\")\n\n\n\n\nExported source\ndef test_filters_brightness_examples():\n    \"\"\"Test brightness filter utilities.\"\"\"\n    # Test common brightness values\n    assert str(brightness(0)) == \"brightness-0\"\n    assert str(brightness(50)) == \"brightness-50\"\n    assert str(brightness(100)) == \"brightness-100\"\n    assert str(brightness(150)) == \"brightness-150\"\n    assert str(brightness(200)) == \"brightness-200\"\n    \n    # Test arbitrary values\n    assert str(brightness(\"730\")) == \"brightness-[730]\"\n    assert str(brightness(\"125%\")) == \"brightness-[125%]\"\n    \n    # Test custom properties\n    assert str(brightness(\"--custom-brightness\")) == \"brightness-(--custom-brightness)\"\n\n# Run the tests\ntest_filters_brightness_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#contrast-filter",
    "href": "utilities/filters.html#contrast-filter",
    "title": "filters",
    "section": "Contrast Filter",
    "text": "Contrast Filter\nControl the contrast of an element:\n\nsource\n\ntest_filters_contrast_examples\n\n test_filters_contrast_examples ()\n\nTest contrast filter utilities.\n\n\nExported source\n# Contrast percentage values (common presets)\nCONTRAST_VALUES = [0, 50, 75, 100, 125, 150, 200]\n\n# Create contrast factory using same config as brightness\ncontrast = ScaledFactory(\"contrast\", brightness_config, \"Contrast filter utilities for adjusting element contrast\")\n\n\n\n\nExported source\ndef test_filters_contrast_examples():\n    \"\"\"Test contrast filter utilities.\"\"\"\n    # Test common contrast values\n    assert str(contrast(0)) == \"contrast-0\"\n    assert str(contrast(50)) == \"contrast-50\"\n    assert str(contrast(100)) == \"contrast-100\"\n    assert str(contrast(125)) == \"contrast-125\"\n    assert str(contrast(200)) == \"contrast-200\"\n    \n    # Test arbitrary values\n    assert str(contrast(\"870\")) == \"contrast-[870]\"\n    assert str(contrast(\"150%\")) == \"contrast-[150%]\"\n    \n    # Test custom properties\n    assert str(contrast(\"--custom-contrast\")) == \"contrast-(--custom-contrast)\"\n\n# Run the tests\ntest_filters_contrast_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#drop-shadow-filter",
    "href": "utilities/filters.html#drop-shadow-filter",
    "title": "filters",
    "section": "Drop Shadow Filter",
    "text": "Drop Shadow Filter\nApply drop shadow filters to an element:\n\nsource\n\nDropShadowScale\n\n DropShadowScale (name:str, shadow:str, var:str)\n\nRepresents a drop shadow scale with name and shadow value.\n\nsource\n\n\ntest_filters_drop_shadow_examples\n\n test_filters_drop_shadow_examples ()\n\nTest drop shadow filter utilities.\n\n\nExported source\n# Drop shadow scale definitions based on Tailwind v4 docs\nDROP_SHADOW_SCALES = [\n    DropShadowScale(\"xs\", \"0 1px 1px rgb(0 0 0 / 0.05)\", \"--drop-shadow-xs\"),\n    DropShadowScale(\"sm\", \"0 1px 2px rgb(0 0 0 / 0.15)\", \"--drop-shadow-sm\"),\n    DropShadowScale(\"md\", \"0 3px 3px rgb(0 0 0 / 0.12)\", \"--drop-shadow-md\"),\n    DropShadowScale(\"lg\", \"0 4px 4px rgb(0 0 0 / 0.15)\", \"--drop-shadow-lg\"),\n    DropShadowScale(\"xl\", \"0 9px 7px rgb(0 0 0 / 0.1)\", \"--drop-shadow-xl\"),\n    DropShadowScale(\"2xl\", \"0 25px 25px rgb(0 0 0 / 0.15)\", \"--drop-shadow-2xl\"),\n]\n\n\n\n\nExported source\n# Create drop shadow factory for basic shadow utilities\ndrop_shadow = SimpleFactory(\n    {\n        \"none\": \"drop-shadow-none\",\n        \"xs\": \"drop-shadow-xs\",\n        \"sm\": \"drop-shadow-sm\",\n        \"md\": \"drop-shadow-md\",\n        \"lg\": \"drop-shadow-lg\",\n        \"xl\": \"drop-shadow-xl\",\n        \"_2xl\": \"drop-shadow-2xl\"\n    },\n    \"Drop shadow filter utilities for applying drop shadow effects to an element\"\n) # Drop shadow factory\n\n\n\n\nExported source\n# Create drop shadow color factory\ndrop_shadow_color = ColoredFactory(\"drop-shadow\", \"Drop shadow color utilities for customizing the color of drop shadows\")\n\n\n\n\nExported source\ndef test_filters_drop_shadow_examples():\n    \"\"\"Test drop shadow filter utilities.\"\"\"\n    # Test named drop shadow scales\n    assert str(drop_shadow.none) == \"drop-shadow-none\"\n    assert str(drop_shadow.xs) == \"drop-shadow-xs\"\n    assert str(drop_shadow.sm) == \"drop-shadow-sm\"\n    assert str(drop_shadow.md) == \"drop-shadow-md\"\n    assert str(drop_shadow.lg) == \"drop-shadow-lg\"\n    assert str(drop_shadow.xl) == \"drop-shadow-xl\"\n    assert str(drop_shadow._2xl) == \"drop-shadow-2xl\"\n    \n    # Test drop shadow colors - all 22 Tailwind color families\n    assert str(drop_shadow_color.red._500) == \"drop-shadow-red-500\"\n    assert str(drop_shadow_color.orange._500) == \"drop-shadow-orange-500\"\n    assert str(drop_shadow_color.amber._500) == \"drop-shadow-amber-500\"\n    assert str(drop_shadow_color.yellow._500) == \"drop-shadow-yellow-500\"\n    assert str(drop_shadow_color.lime._500) == \"drop-shadow-lime-500\"\n    assert str(drop_shadow_color.green._500) == \"drop-shadow-green-500\"\n    assert str(drop_shadow_color.emerald._500) == \"drop-shadow-emerald-500\"\n    assert str(drop_shadow_color.teal._500) == \"drop-shadow-teal-500\"\n    assert str(drop_shadow_color.cyan._500) == \"drop-shadow-cyan-500\"\n    assert str(drop_shadow_color.sky._500) == \"drop-shadow-sky-500\"\n    assert str(drop_shadow_color.blue._500) == \"drop-shadow-blue-500\"\n    assert str(drop_shadow_color.indigo._500) == \"drop-shadow-indigo-500\"\n    assert str(drop_shadow_color.violet._500) == \"drop-shadow-violet-500\"\n    assert str(drop_shadow_color.purple._500) == \"drop-shadow-purple-500\"\n    assert str(drop_shadow_color.fuchsia._500) == \"drop-shadow-fuchsia-500\"\n    assert str(drop_shadow_color.pink._500) == \"drop-shadow-pink-500\"\n    assert str(drop_shadow_color.rose._500) == \"drop-shadow-rose-500\"\n    assert str(drop_shadow_color.slate._500) == \"drop-shadow-slate-500\"\n    assert str(drop_shadow_color.gray._500) == \"drop-shadow-gray-500\"\n    assert str(drop_shadow_color.zinc._500) == \"drop-shadow-zinc-500\"\n    assert str(drop_shadow_color.neutral._500) == \"drop-shadow-neutral-500\"\n    assert str(drop_shadow_color.stone._500) == \"drop-shadow-stone-500\"\n    \n    # Test different shades\n    assert str(drop_shadow_color.blue._300) == \"drop-shadow-blue-300\"\n    assert str(drop_shadow_color.green._950) == \"drop-shadow-green-950\"\n    \n    # Test special colors\n    assert str(drop_shadow_color.transparent) == \"drop-shadow-transparent\"\n    assert str(drop_shadow_color.black) == \"drop-shadow-black\"\n    assert str(drop_shadow_color.white) == \"drop-shadow-white\"\n    assert str(drop_shadow_color.current) == \"drop-shadow-current\"\n    assert str(drop_shadow_color.inherit) == \"drop-shadow-inherit\"\n    \n    # Test arbitrary drop shadow color values\n    assert str(drop_shadow_color(\"#ff0000\")) == \"drop-shadow-[#ff0000]\"\n    assert str(drop_shadow_color(\"--custom-shadow-color\")) == \"drop-shadow-(--custom-shadow-color)\"\n\n# Run the tests\ntest_filters_drop_shadow_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#grayscale-filter",
    "href": "utilities/filters.html#grayscale-filter",
    "title": "filters",
    "section": "Grayscale Filter",
    "text": "Grayscale Filter\nConvert an element to grayscale:\n\nsource\n\ntest_filters_grayscale_examples\n\n test_filters_grayscale_examples ()\n\nTest grayscale filter utilities.\n\n\nExported source\n# Create grayscale factory with percentage support\ngrayscale = ScaledFactory(\"grayscale\", brightness_config, \"Grayscale filter utilities for converting elements to grayscale\")\n\n# Add convenience for full grayscale\ngrayscale.full = SingleValueFactory(\"grayscale\", \"Apply 100% grayscale filter\")\n\n\n\n\nExported source\ndef test_filters_grayscale_examples():\n    \"\"\"Test grayscale filter utilities.\"\"\"\n    # Test full grayscale (default)\n    assert str(grayscale.full) == \"grayscale\"\n    \n    # Test percentage grayscale values\n    assert str(grayscale(0)) == \"grayscale-0\"\n    assert str(grayscale(50)) == \"grayscale-50\"\n    assert str(grayscale(100)) == \"grayscale-100\"\n    \n    # Test arbitrary values\n    assert str(grayscale(\"250\")) == \"grayscale-[250]\"\n    assert str(grayscale(\"75%\")) == \"grayscale-[75%]\"\n    \n    # Test custom properties\n    assert str(grayscale(\"--custom-grayscale\")) == \"grayscale-(--custom-grayscale)\"\n\n# Run the tests\ntest_filters_grayscale_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#hue-rotate-filter",
    "href": "utilities/filters.html#hue-rotate-filter",
    "title": "filters",
    "section": "Hue Rotate Filter",
    "text": "Hue Rotate Filter\nApply hue rotation to an element:\n\nsource\n\ntest_filters_hue_rotate_examples\n\n test_filters_hue_rotate_examples ()\n\nTest hue rotate filter utilities.\n\n\nExported source\n# Common hue rotation angles\nHUE_ROTATE_VALUES = [0, 15, 30, 60, 90, 180]\n\n# Create hue rotate configuration with negative support\nhue_rotate_config = ScaleConfig(\n    numeric=True,  # Support numeric values (angles)\n    decimals=False,\n    fractions=False,\n    named=None,\n    special=None,\n    negative=True  # Support negative angles\n)\n\n# Create hue rotate factory\nhue_rotate = ScaledFactory(\"hue-rotate\", hue_rotate_config, \"Hue rotate filter utilities for rotating element colors\")\n\n\n\n\nExported source\ndef test_filters_hue_rotate_examples():\n    \"\"\"Test hue rotate filter utilities.\"\"\"\n    # Test positive angles\n    assert str(hue_rotate(0)) == \"hue-rotate-0\"\n    assert str(hue_rotate(15)) == \"hue-rotate-15\"\n    assert str(hue_rotate(30)) == \"hue-rotate-30\"\n    assert str(hue_rotate(60)) == \"hue-rotate-60\"\n    assert str(hue_rotate(90)) == \"hue-rotate-90\"\n    assert str(hue_rotate(180)) == \"hue-rotate-180\"\n    \n    # Test negative angles\n    assert str(hue_rotate(30, negative=True)) == \"-hue-rotate-30\"\n    assert str(hue_rotate.negative(60)) == \"-hue-rotate-60\"\n    assert str(hue_rotate.negative(180)) == \"-hue-rotate-180\"\n    \n    # Test arbitrary values\n    assert str(hue_rotate(\"45deg\")) == \"hue-rotate-[45deg]\"\n    \n    # Test custom properties\n    assert str(hue_rotate(\"--custom-rotation\")) == \"hue-rotate-(--custom-rotation)\"\n\n# Run the tests\ntest_filters_hue_rotate_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#invert-filter",
    "href": "utilities/filters.html#invert-filter",
    "title": "filters",
    "section": "Invert Filter",
    "text": "Invert Filter\nInvert the colors of an element:\n\nsource\n\ntest_filters_invert_examples\n\n test_filters_invert_examples ()\n\nTest invert filter utilities.\n\n\nExported source\n# Create invert factory with percentage support\ninvert = ScaledFactory(\"invert\", brightness_config, \"Invert filter utilities for inverting element colors\")\n\n# Add convenience for full invert\ninvert.full = SingleValueFactory(\"invert\", \"Apply 100% invert filter\")\n\n\n\n\nExported source\ndef test_filters_invert_examples():\n    \"\"\"Test invert filter utilities.\"\"\"\n    # Test full invert (default)\n    assert str(invert.full) == \"invert\"\n    \n    # Test percentage invert values\n    assert str(invert(0)) == \"invert-0\"\n    assert str(invert(50)) == \"invert-50\"\n    assert str(invert(100)) == \"invert-100\"\n    \n    # Test arbitrary values\n    assert str(invert(\"250\")) == \"invert-[250]\"\n    assert str(invert(\"75%\")) == \"invert-[75%]\"\n    \n    # Test custom properties\n    assert str(invert(\"--custom-invert\")) == \"invert-(--custom-invert)\"\n\n# Run the tests\ntest_filters_invert_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#saturate-filter",
    "href": "utilities/filters.html#saturate-filter",
    "title": "filters",
    "section": "Saturate Filter",
    "text": "Saturate Filter\nControl the saturation of an element:\n\nsource\n\ntest_filters_saturate_examples\n\n test_filters_saturate_examples ()\n\nTest saturate filter utilities.\n\n\nExported source\n# Common saturation values\nSATURATE_VALUES = [0, 50, 100, 150, 200]\n\n# Create saturate factory\nsaturate = ScaledFactory(\"saturate\", brightness_config, \"Saturate filter utilities for adjusting element color saturation\")\n\n\n\n\nExported source\ndef test_filters_saturate_examples():\n    \"\"\"Test saturate filter utilities.\"\"\"\n    # Test common saturate values\n    assert str(saturate(0)) == \"saturate-0\"\n    assert str(saturate(50)) == \"saturate-50\"\n    assert str(saturate(100)) == \"saturate-100\"\n    assert str(saturate(150)) == \"saturate-150\"\n    assert str(saturate(200)) == \"saturate-200\"\n    \n    # Test arbitrary values\n    assert str(saturate(\"750\")) == \"saturate-[750]\"\n    assert str(saturate(\"125%\")) == \"saturate-[125%]\"\n    \n    # Test custom properties\n    assert str(saturate(\"--custom-saturate\")) == \"saturate-(--custom-saturate)\"\n\n# Run the tests\ntest_filters_saturate_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#sepia-filter",
    "href": "utilities/filters.html#sepia-filter",
    "title": "filters",
    "section": "Sepia Filter",
    "text": "Sepia Filter\nApply a sepia tone to an element:\n\nsource\n\ntest_filters_sepia_examples\n\n test_filters_sepia_examples ()\n\nTest sepia filter utilities.\n\n\nExported source\n# Create sepia factory with percentage support\nsepia = ScaledFactory(\"sepia\", brightness_config, \"Sepia filter utilities for applying sepia tone effects\")\n\n# Add convenience for full sepia\nsepia.full = SingleValueFactory(\"sepia\", \"Apply 100% sepia filter\")\n\n\n\n\nExported source\ndef test_filters_sepia_examples():\n    \"\"\"Test sepia filter utilities.\"\"\"\n    # Test full sepia (default)\n    assert str(sepia.full) == \"sepia\"\n    \n    # Test percentage sepia values\n    assert str(sepia(0)) == \"sepia-0\"\n    assert str(sepia(50)) == \"sepia-50\"\n    assert str(sepia(100)) == \"sepia-100\"\n    \n    # Test arbitrary values\n    assert str(sepia(\"250\")) == \"sepia-[250]\"\n    assert str(sepia(\"75%\")) == \"sepia-[75%]\"\n    \n    # Test custom properties\n    assert str(sepia(\"--custom-sepia\")) == \"sepia-(--custom-sepia)\"\n\n# Run the tests\ntest_filters_sepia_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#backdrop-filters",
    "href": "utilities/filters.html#backdrop-filters",
    "title": "filters",
    "section": "Backdrop Filters",
    "text": "Backdrop Filters\nApply filter effects to the area behind an element. All backdrop filters use the same scale values as their regular filter counterparts:\n\nBackdrop Filter Control\n\n\nExported source\nbackdrop_filter_none = SingleValueFactory(\"backdrop-filter-none\", \"Remove all backdrop filters from an element\") # Remove backdrop filters\n\n\n\n\nBackdrop Blur\n\n\nExported source\n# Create backdrop blur factory using same scales as regular blur\nbackdrop_blur = SimpleFactory(\n    {\n        \"none\": \"backdrop-blur-none\",\n        \"xs\": \"backdrop-blur-xs\",\n        \"sm\": \"backdrop-blur-sm\",\n        \"md\": \"backdrop-blur-md\",\n        \"lg\": \"backdrop-blur-lg\",\n        \"xl\": \"backdrop-blur-xl\",\n        \"_2xl\": \"backdrop-blur-2xl\",\n        \"_3xl\": \"backdrop-blur-3xl\"\n    },\n    \"Backdrop blur filter utilities for applying blur effects to the backdrop\"\n) # Backdrop blur factory\n\n\n\n\nBackdrop Brightness, Contrast, and Other Percentage-based Filters\n\n\nExported source\n# Create backdrop filter factories using same configurations as regular filters\nbackdrop_brightness = ScaledFactory(\"backdrop-brightness\", brightness_config, \"Backdrop brightness filter utilities\")\nbackdrop_contrast = ScaledFactory(\"backdrop-contrast\", brightness_config, \"Backdrop contrast filter utilities\")\nbackdrop_saturate = ScaledFactory(\"backdrop-saturate\", brightness_config, \"Backdrop saturate filter utilities\")\nbackdrop_opacity = ScaledFactory(\"backdrop-opacity\", brightness_config, \"Backdrop opacity filter utilities\")\n\n# Grayscale with full convenience\nbackdrop_grayscale = ScaledFactory(\"backdrop-grayscale\", brightness_config, \"Backdrop grayscale filter utilities\")\nbackdrop_grayscale.full = SingleValueFactory(\"backdrop-grayscale\", \"Apply 100% backdrop grayscale filter\")\n\n# Sepia with full convenience\nbackdrop_sepia = ScaledFactory(\"backdrop-sepia\", brightness_config, \"Backdrop sepia filter utilities\")\nbackdrop_sepia.full = SingleValueFactory(\"backdrop-sepia\", \"Apply 100% backdrop sepia filter\")\n\n\n\n\nBackdrop Hue Rotate\n\nsource\n\n\ntest_filters_backdrop_examples\n\n test_filters_backdrop_examples ()\n\nTest backdrop filter utilities.\n\n\nExported source\n# Create backdrop hue rotate with negative support\nbackdrop_hue_rotate = ScaledFactory(\"backdrop-hue-rotate\", hue_rotate_config, \"Backdrop hue rotate filter utilities\")\n\n\n\n\nExported source\ndef test_filters_backdrop_examples():\n    \"\"\"Test backdrop filter utilities.\"\"\"\n    # Test backdrop filter control\n    assert str(backdrop_filter_none) == \"backdrop-filter-none\"\n    \n    # Test backdrop blur\n    assert str(backdrop_blur.none) == \"backdrop-blur-none\"\n    assert str(backdrop_blur.sm) == \"backdrop-blur-sm\"\n    assert str(backdrop_blur.lg) == \"backdrop-blur-lg\"\n    assert str(backdrop_blur._2xl) == \"backdrop-blur-2xl\"\n    \n    # Test backdrop brightness\n    assert str(backdrop_brightness(50)) == \"backdrop-brightness-50\"\n    assert str(backdrop_brightness(100)) == \"backdrop-brightness-100\"\n    assert str(backdrop_brightness(150)) == \"backdrop-brightness-150\"\n    \n    # Test backdrop contrast\n    assert str(backdrop_contrast(0)) == \"backdrop-contrast-0\"\n    assert str(backdrop_contrast(100)) == \"backdrop-contrast-100\"\n    assert str(backdrop_contrast(200)) == \"backdrop-contrast-200\"\n    \n    # Test backdrop grayscale\n    assert str(backdrop_grayscale.full) == \"backdrop-grayscale\"\n    assert str(backdrop_grayscale(0)) == \"backdrop-grayscale-0\"\n    assert str(backdrop_grayscale(50)) == \"backdrop-grayscale-50\"\n    \n    # Test backdrop hue rotate with negative\n    assert str(backdrop_hue_rotate(90)) == \"backdrop-hue-rotate-90\"\n    assert str(backdrop_hue_rotate.negative(60)) == \"-backdrop-hue-rotate-60\"\n    \n    # Test backdrop opacity\n    assert str(backdrop_opacity(25)) == \"backdrop-opacity-25\"\n    assert str(backdrop_opacity(50)) == \"backdrop-opacity-50\"\n    assert str(backdrop_opacity(75)) == \"backdrop-opacity-75\"\n    \n    # Test backdrop saturate\n    assert str(backdrop_saturate(0)) == \"backdrop-saturate-0\"\n    assert str(backdrop_saturate(150)) == \"backdrop-saturate-150\"\n    \n    # Test backdrop sepia\n    assert str(backdrop_sepia.full) == \"backdrop-sepia\"\n    assert str(backdrop_sepia(50)) == \"backdrop-sepia-50\"\n\n# Run the tests\ntest_filters_backdrop_examples()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#practical-examples",
    "href": "utilities/filters.html#practical-examples",
    "title": "filters",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these filter utilities in real FastHTML components:\n\nsource\n\ntest_filters_fasthtml_examples\n\n test_filters_fasthtml_examples ()\n\nTest filter utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_filters_fasthtml_examples():\n    \"\"\"Test filter utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Img, P, H1, Section\n    from cjm_fasthtml_tailwind.utilities.transitions_and_animation import transition, duration\n    from cjm_fasthtml_tailwind.utilities.interactivity import cursor, pointer_events\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.layout import position, inset, display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Image with hover blur effect\n    image_hover = Img(\n        src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\",\n        alt=\"Hoverable image\",\n        cls=combine_classes(\n            transition.all,\n            blur.sm.hover,\n            cursor.pointer\n        )\n    )\n    assert \"hover:blur-sm\" in image_hover.attrs['class']\n    \n    # Grayscale image that becomes colored on hover\n    grayscale_img = Img(\n        src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\",\n        alt=\"Grayscale photo\",\n        cls=combine_classes(\n            grayscale.full,\n            grayscale(0).hover,\n            transition.all,\n            duration(300)\n        )\n    )\n    assert \"grayscale\" in grayscale_img.attrs['class']\n    assert \"hover:grayscale-0\" in grayscale_img.attrs['class']\n    \n    # Card with drop shadow\n    card_shadow = Div(\n        H1(\"Card Title\"),\n        P(\"Card content\"),\n        cls=combine_classes(\n            drop_shadow.lg,\n            drop_shadow_color.blue._500,\n            p(6),\n            bg.white,\n            rounded.lg\n        )\n    )\n    assert \"drop-shadow-lg\" in card_shadow.attrs['class']\n    assert \"drop-shadow-blue-500\" in card_shadow.attrs['class']\n    \n    # Frosted glass effect with backdrop blur\n    frosted_glass = Div(\n        P(\"Frosted glass content\"),\n        cls=combine_classes(\n            backdrop_blur.md,\n            backdrop_saturate(150),\n            bg.white.opacity(30),\n            p(8),\n            rounded.xl\n        )\n    )\n    assert \"backdrop-blur-md\" in frosted_glass.attrs['class']\n    assert \"backdrop-saturate-150\" in frosted_glass.attrs['class']\n    \n    # Image with multiple filters\n    artistic_img = Img(\n        src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\",\n        alt=\"Artistic image\",\n        cls=combine_classes(\n            brightness(110),\n            contrast(125),\n            saturate(150),\n            hue_rotate(15)\n        )\n    )\n    assert \"brightness-110\" in artistic_img.attrs['class']\n    assert \"contrast-125\" in artistic_img.attrs['class']\n    assert \"saturate-150\" in artistic_img.attrs['class']\n    assert \"hue-rotate-15\" in artistic_img.attrs['class']\n    \n    # Dark mode overlay with filters\n    dark_overlay = Div(\n        cls=combine_classes(\n            invert.full,\n            hue_rotate(180),\n            position.fixed,\n            inset(0),\n            pointer_events.none\n        )\n    )\n    assert \"invert\" in dark_overlay.attrs['class']\n    assert \"hue-rotate-180\" in dark_overlay.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        image_hover,\n        grayscale_img,\n        card_shadow,\n        frosted_glass,\n        artistic_img,\n        dark_overlay,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_filters_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" alt=\"Hoverable image\" class=\"transition-all hover:blur-sm cursor-pointer\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" alt=\"Grayscale photo\" class=\"grayscale hover:grayscale-0 transition-all duration-300\"&gt;  &lt;div class=\"drop-shadow-lg drop-shadow-blue-500 p-6 bg-white rounded-lg\"&gt;\n    &lt;h1&gt;Card Title&lt;/h1&gt;\n    &lt;p&gt;Card content&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"backdrop-blur-md backdrop-saturate-150 bg-white/30 p-8 rounded-xl\"&gt;\n    &lt;p&gt;Frosted glass content&lt;/p&gt;\n  &lt;/div&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" alt=\"Artistic image\" class=\"brightness-110 contrast-125 saturate-150 hue-rotate-15\"&gt;  &lt;div class=\"invert hue-rotate-180 fixed inset-0 pointer-events-none\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_filters_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/filters.html#export",
    "href": "utilities/filters.html#export",
    "title": "filters",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "filters"
    ]
  },
  {
    "objectID": "utilities/tables.html",
    "href": "utilities/tables.html",
    "title": "tables",
    "section": "",
    "text": "Display utilities for creating and styling table elements:\n\nsource\n\n\n\n TableDisplayFactory ()\n\nFactory for table display utilities.\n\nsource\n\n\n\n\n test_tables_display_examples ()\n\nTest table display utilities.\n\n\nExported source\n# Create the table display factory\ntable_display = TableDisplayFactory() # The table display factory\n\n\n\n\nExported source\ndef test_tables_display_examples():\n    \"\"\"Test table display utilities.\"\"\"\n    # Basic table display\n    assert str(table_display) == \"table\"\n    assert table_display.inline == \"inline-table\"\n    \n    # Table element display types\n    assert table_display.caption == \"table-caption\"\n    assert table_display.cell == \"table-cell\"\n    assert table_display.column == \"table-column\"\n    assert table_display.column_group == \"table-column-group\"\n    assert table_display.footer_group == \"table-footer-group\"\n    assert table_display.header_group == \"table-header-group\"\n    assert table_display.row_group == \"table-row-group\"\n    assert table_display.row == \"table-row\"\n    \n    # Test with modifiers\n    assert str(table_display.hover) == \"hover:table\"\n    assert str(table_display.md) == \"md:table\"\n\n# Run the tests\ntest_tables_display_examples()",
    "crumbs": [
      "utilities",
      "tables"
    ]
  },
  {
    "objectID": "utilities/tables.html#table-display-utilities",
    "href": "utilities/tables.html#table-display-utilities",
    "title": "tables",
    "section": "",
    "text": "Display utilities for creating and styling table elements:\n\nsource\n\n\n\n TableDisplayFactory ()\n\nFactory for table display utilities.\n\nsource\n\n\n\n\n test_tables_display_examples ()\n\nTest table display utilities.\n\n\nExported source\n# Create the table display factory\ntable_display = TableDisplayFactory() # The table display factory\n\n\n\n\nExported source\ndef test_tables_display_examples():\n    \"\"\"Test table display utilities.\"\"\"\n    # Basic table display\n    assert str(table_display) == \"table\"\n    assert table_display.inline == \"inline-table\"\n    \n    # Table element display types\n    assert table_display.caption == \"table-caption\"\n    assert table_display.cell == \"table-cell\"\n    assert table_display.column == \"table-column\"\n    assert table_display.column_group == \"table-column-group\"\n    assert table_display.footer_group == \"table-footer-group\"\n    assert table_display.header_group == \"table-header-group\"\n    assert table_display.row_group == \"table-row-group\"\n    assert table_display.row == \"table-row\"\n    \n    # Test with modifiers\n    assert str(table_display.hover) == \"hover:table\"\n    assert str(table_display.md) == \"md:table\"\n\n# Run the tests\ntest_tables_display_examples()",
    "crumbs": [
      "utilities",
      "tables"
    ]
  },
  {
    "objectID": "utilities/tables.html#border-collapse",
    "href": "utilities/tables.html#border-collapse",
    "title": "tables",
    "section": "Border Collapse",
    "text": "Border Collapse\nControl whether table borders should collapse or be separated:\n\nsource\n\ntest_tables_border_collapse_examples\n\n test_tables_border_collapse_examples ()\n\nTest border collapse utilities.\n\n\nExported source\nborder_collapse = SimpleFactory(\n    {\n        \"collapse\": \"border-collapse\",\n        \"separate\": \"border-separate\"\n    },\n    \"Border collapse utilities for controlling whether table borders should collapse or be separated\"\n) # Border collapse factory\n\n\n\n\nExported source\ndef test_tables_border_collapse_examples():\n    \"\"\"Test border collapse utilities.\"\"\"\n    assert str(border_collapse.collapse) == \"border-collapse\"\n    assert str(border_collapse.separate) == \"border-separate\"\n\n# Run the tests\ntest_tables_border_collapse_examples()",
    "crumbs": [
      "utilities",
      "tables"
    ]
  },
  {
    "objectID": "utilities/tables.html#border-spacing",
    "href": "utilities/tables.html#border-spacing",
    "title": "tables",
    "section": "Border Spacing",
    "text": "Border Spacing\nControl the spacing between table borders when using border-separate:\n\nsource\n\nBorderSpacingFactory\n\n BorderSpacingFactory ()\n\nFactory for border-spacing utilities with directional support.\n\n\nExported source\nborder_spacing = BorderSpacingFactory() # The border spacing factory\n\n\n\n\nBasic Border Spacing\nApply equal spacing to all sides:\n\nsource\n\n\ntest_tables_border_spacing_basic_examples\n\n test_tables_border_spacing_basic_examples ()\n\nTest basic border spacing utilities.\n\n\nExported source\ndef test_tables_border_spacing_basic_examples():\n    \"\"\"Test basic border spacing utilities.\"\"\"\n    # Numeric scales\n    assert str(border_spacing(0)) == \"border-spacing-0\"\n    assert str(border_spacing(4)) == \"border-spacing-4\"\n    assert str(border_spacing(8)) == \"border-spacing-8\"\n    assert str(border_spacing(2.5)) == \"border-spacing-2.5\"\n    \n    # Special values\n    assert str(border_spacing.px) == \"border-spacing-px\"\n\n# Run the tests\ntest_tables_border_spacing_basic_examples()\n\n\n\n\nDirectional Border Spacing\nApply different spacing to horizontal and vertical borders:\n\nsource\n\n\ntest_tables_border_spacing_directional_examples\n\n test_tables_border_spacing_directional_examples ()\n\nTest directional border spacing utilities.\n\n\nExported source\ndef test_tables_border_spacing_directional_examples():\n    \"\"\"Test directional border spacing utilities.\"\"\"\n    # Horizontal spacing\n    assert str(border_spacing.x(4)) == \"border-spacing-x-4\"\n    assert str(border_spacing.x(8)) == \"border-spacing-x-8\"\n    assert str(border_spacing.x.px) == \"border-spacing-x-px\"\n    \n    # Vertical spacing\n    assert str(border_spacing.y(2)) == \"border-spacing-y-2\"\n    assert str(border_spacing.y(6)) == \"border-spacing-y-6\"\n    assert str(border_spacing.y.px) == \"border-spacing-y-px\"\n\n# Run the tests\ntest_tables_border_spacing_directional_examples()\n\n\n\n\nArbitrary Border Spacing Values\nUse custom values when needed:\n\nsource\n\n\ntest_tables_border_spacing_arbitrary_examples\n\n test_tables_border_spacing_arbitrary_examples ()\n\nTest border spacing utilities with arbitrary values.\n\n\nExported source\ndef test_tables_border_spacing_arbitrary_examples():\n    \"\"\"Test border spacing utilities with arbitrary values.\"\"\"\n    # Arbitrary values\n    assert str(border_spacing(\"5px\")) == \"border-spacing-[5px]\"\n    assert str(border_spacing(\"0.125rem\")) == \"border-spacing-[0.125rem]\"\n    assert str(border_spacing.x(\"10px\")) == \"border-spacing-x-[10px]\"\n    assert str(border_spacing.y(\"0.5em\")) == \"border-spacing-y-[0.5em]\"\n    \n    # Custom properties\n    assert str(border_spacing(\"--table-spacing\")) == \"border-spacing-(--table-spacing)\"\n    assert str(border_spacing.x(\"--horizontal-gap\")) == \"border-spacing-x-(--horizontal-gap)\"\n\n# Run the tests\ntest_tables_border_spacing_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "tables"
    ]
  },
  {
    "objectID": "utilities/tables.html#table-layout",
    "href": "utilities/tables.html#table-layout",
    "title": "tables",
    "section": "Table Layout",
    "text": "Table Layout\nControl the table layout algorithm:\n\nsource\n\ntest_tables_layout_examples\n\n test_tables_layout_examples ()\n\nTest table layout utilities.\n\n\nExported source\ntable_layout = SimpleFactory(\n    {\n        \"auto\": \"table-auto\",\n        \"fixed\": \"table-fixed\"\n    },\n    \"Table layout utilities for controlling the table layout algorithm\"\n) # Table layout factory\n\n\n\n\nExported source\ndef test_tables_layout_examples():\n    \"\"\"Test table layout utilities.\"\"\"\n    assert str(table_layout.auto) == \"table-auto\"\n    assert str(table_layout.fixed) == \"table-fixed\"\n\n# Run the tests\ntest_tables_layout_examples()",
    "crumbs": [
      "utilities",
      "tables"
    ]
  },
  {
    "objectID": "utilities/tables.html#caption-side",
    "href": "utilities/tables.html#caption-side",
    "title": "tables",
    "section": "Caption Side",
    "text": "Caption Side\nControl the alignment of a caption element inside of a table:\n\nsource\n\ntest_tables_caption_side_examples\n\n test_tables_caption_side_examples ()\n\nTest caption side utilities.\n\n\nExported source\ncaption_side = SimpleFactory(\n    {\n        \"top\": \"caption-top\",\n        \"bottom\": \"caption-bottom\"\n    },\n    \"Caption side utilities for controlling the alignment of a caption element inside of a table\"\n) # Caption side factory\n\n\n\n\nExported source\ndef test_tables_caption_side_examples():\n    \"\"\"Test caption side utilities.\"\"\"\n    assert str(caption_side.top) == \"caption-top\"\n    assert str(caption_side.bottom) == \"caption-bottom\"\n\n# Run the tests\ntest_tables_caption_side_examples()",
    "crumbs": [
      "utilities",
      "tables"
    ]
  },
  {
    "objectID": "utilities/tables.html#comprehensive-test-functions",
    "href": "utilities/tables.html#comprehensive-test-functions",
    "title": "tables",
    "section": "Comprehensive Test Functions",
    "text": "Comprehensive Test Functions\nTest all table utilities to ensure they work correctly:\n\nsource\n\ntest_tables_all_utilities\n\n test_tables_all_utilities ()\n\nComprehensive test of all table utilities.",
    "crumbs": [
      "utilities",
      "tables"
    ]
  },
  {
    "objectID": "utilities/tables.html#practical-examples",
    "href": "utilities/tables.html#practical-examples",
    "title": "tables",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these table utilities in real FastHTML components:\n\nsource\n\ntest_tables_fasthtml_examples\n\n test_tables_fasthtml_examples ()\n\nTest table utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_tables_fasthtml_examples():\n    \"\"\"Test table utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Table, Thead, Tbody, Tr, Th, Td, Caption, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w, min_w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Basic table with collapsed borders\n    basic_table = Table(\n        Thead(\n            Tr(\n                Th(\"Name\"),\n                Th(\"Email\"),\n                Th(\"Role\")\n            )\n        ),\n        Tbody(\n            Tr(\n                Td(\"John Doe\"),\n                Td(\"john@example.com\"),\n                Td(\"Admin\")\n            ),\n            Tr(\n                Td(\"Jane Smith\"),\n                Td(\"jane@example.com\"),\n                Td(\"User\")\n            )\n        ),\n        cls=combine_classes(\n            border_collapse.collapse,\n            w.full\n        )\n    )\n    assert \"border-collapse\" in basic_table.attrs['class']\n    \n    # Table with separated borders and spacing\n    spaced_table = Table(\n        Tbody(\n            Tr(Td(\"Cell 1\"), Td(\"Cell 2\")),\n            Tr(Td(\"Cell 3\"), Td(\"Cell 4\"))\n        ),\n        cls=combine_classes(\n            border_collapse.separate,\n            border_spacing(2),\n            w.full\n        )\n    )\n    assert \"border-separate\" in spaced_table.attrs['class']\n    assert \"border-spacing-2\" in spaced_table.attrs['class']\n    \n    # Table with different horizontal and vertical spacing\n    custom_spaced_table = Table(\n        Tbody(\n            Tr(Td(\"A\"), Td(\"B\"), Td(\"C\")),\n            Tr(Td(\"D\"), Td(\"E\"), Td(\"F\"))\n        ),\n        cls=combine_classes(\n            border_collapse.separate,\n            border_spacing.x(4),\n            border_spacing.y(2),\n            w.full\n        )\n    )\n    assert \"border-spacing-x-4\" in custom_spaced_table.attrs['class']\n    assert \"border-spacing-y-2\" in custom_spaced_table.attrs['class']\n    \n    # Fixed layout table with caption\n    fixed_table = Table(\n        Caption(\"User Information\", cls=str(caption_side.top)),\n        Thead(\n            Tr(\n                Th(\"ID\", cls=str(w(20))),\n                Th(\"Name\", cls=str(w(40))),\n                Th(\"Description\")\n            )\n        ),\n        Tbody(\n            Tr(\n                Td(\"001\"),\n                Td(\"Product A\"),\n                Td(\"A detailed description of Product A that might be quite long\")\n            )\n        ),\n        cls=combine_classes(\n            table_layout.fixed,\n            border_collapse.collapse,\n            w.full\n        )\n    )\n    assert \"table-fixed\" in fixed_table.attrs['class']\n    assert \"caption-top\" in fixed_table.children[0].attrs['class']\n    \n    # Auto layout table (default behavior)\n    auto_table = Table(\n        Caption(\"Sales Data\", cls=str(caption_side.bottom)),\n        Thead(\n            Tr(Th(\"Month\"), Th(\"Revenue\"), Th(\"Growth\"))\n        ),\n        Tbody(\n            Tr(Td(\"January\"), Td(\"$10,000\"), Td(\"+5%\")),\n            Tr(Td(\"February\"), Td(\"$12,000\"), Td(\"+20%\"))\n        ),\n        cls=combine_classes(\n            table_layout.auto,\n            border_collapse.separate,\n            border_spacing.px,\n            min_w.full\n        )\n    )\n    assert \"table-auto\" in auto_table.attrs['class']\n    assert \"caption-bottom\" in auto_table.children[0].attrs['class']\n    assert \"border-spacing-px\" in auto_table.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        basic_table,\n        spaced_table,\n        custom_spaced_table,\n        fixed_table,\n        auto_table,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_tables_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;table class=\"border-collapse w-full\"&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Name&lt;/th&gt;\n        &lt;th&gt;Email&lt;/th&gt;\n        &lt;th&gt;Role&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;John Doe&lt;/td&gt;\n        &lt;td&gt;john@example.com&lt;/td&gt;\n        &lt;td&gt;Admin&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Jane Smith&lt;/td&gt;\n        &lt;td&gt;jane@example.com&lt;/td&gt;\n        &lt;td&gt;User&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;table class=\"border-separate border-spacing-2 w-full\"&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Cell 1&lt;/td&gt;\n        &lt;td&gt;Cell 2&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Cell 3&lt;/td&gt;\n        &lt;td&gt;Cell 4&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;table class=\"border-separate border-spacing-x-4 border-spacing-y-2 w-full\"&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;A&lt;/td&gt;\n        &lt;td&gt;B&lt;/td&gt;\n        &lt;td&gt;C&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;D&lt;/td&gt;\n        &lt;td&gt;E&lt;/td&gt;\n        &lt;td&gt;F&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;table class=\"table-fixed border-collapse w-full\"&gt;\n&lt;caption class=\"caption-top\"&gt;User Information&lt;/caption&gt;    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th class=\"w-20\"&gt;ID&lt;/th&gt;\n        &lt;th class=\"w-40\"&gt;Name&lt;/th&gt;\n        &lt;th&gt;Description&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;001&lt;/td&gt;\n        &lt;td&gt;Product A&lt;/td&gt;\n        &lt;td&gt;A detailed description of Product A that might be quite long&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;table class=\"table-auto border-separate border-spacing-px min-w-full\"&gt;\n&lt;caption class=\"caption-bottom\"&gt;Sales Data&lt;/caption&gt;    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Month&lt;/th&gt;\n        &lt;th&gt;Revenue&lt;/th&gt;\n        &lt;th&gt;Growth&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;January&lt;/td&gt;\n        &lt;td&gt;$10,000&lt;/td&gt;\n        &lt;td&gt;+5%&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;February&lt;/td&gt;\n        &lt;td&gt;$12,000&lt;/td&gt;\n        &lt;td&gt;+20%&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tables_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\n\nComplex Table Example\nA more complex example combining multiple table utilities:\n\nsource\n\n\ntest_tables_complex_fasthtml_examples\n\n test_tables_complex_fasthtml_examples ()\n\nTest a complex table example with various styling.\n\n\nExported source\ndef test_tables_complex_fasthtml_examples():\n    \"\"\"Test a complex table example with various styling.\"\"\"\n    from fasthtml.common import Table, Thead, Tbody, Tr, Th, Td, Caption, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.borders import border, border_color, rounded\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_family, font_weight, text_color, text_align\n    from cjm_fasthtml_tailwind.utilities.spacing import p, m\n    from cjm_fasthtml_tailwind.utilities.layout import overflow\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Create a styled data table\n    data_table = Div(\n        Table(\n            Caption(\n                \"Quarterly Sales Report\",\n                cls=combine_classes(\n                    caption_side.top,\n                    font_size.lg,\n                    font_weight.semibold,\n                    text_color.gray._700,\n                    m.b(2)\n                )\n            ),\n            Thead(\n                Tr(\n                    Th(\"Quarter\", cls=combine_classes(text_align.left, p(4), bg.gray._100)),\n                    Th(\"Product\", cls=combine_classes(text_align.left, p(4), bg.gray._100)),\n                    Th(\"Units Sold\", cls=combine_classes(text_align.right, p(4), bg.gray._100)),\n                    Th(\"Revenue\", cls=combine_classes(text_align.right, p(4), bg.gray._100)),\n                    cls=combine_classes(border.b._2, border_color.gray._300)\n                )\n            ),\n            Tbody(\n                Tr(\n                    Td(\"Q1 2024\", cls=str(p(4))),\n                    Td(\"Widget A\", cls=str(p(4))),\n                    Td(\"1,234\", cls=combine_classes(text_align.right, p(4))),\n                    Td(\"$12,340\", cls=combine_classes(text_align.right, p(4))),\n                    cls=combine_classes(border.b(), border_color.gray._200)\n                ),\n                Tr(\n                    Td(\"Q1 2024\", cls=str(p(4))),\n                    Td(\"Widget B\", cls=str(p(4))),\n                    Td(\"567\", cls=combine_classes(text_align.right, p(4))),\n                    Td(\"$8,505\", cls=combine_classes(text_align.right, p(4))),\n                    cls=combine_classes(border.b(), border_color.gray._200)\n                ),\n                Tr(\n                    Td(\"Q2 2024\", cls=str(p(4))),\n                    Td(\"Widget A\", cls=str(p(4))),\n                    Td(\"1,567\", cls=combine_classes(text_align.right, p(4))),\n                    Td(\"$15,670\", cls=combine_classes(text_align.right, p(4))),\n                    cls=combine_classes(border.b(), border_color.gray._200)\n                ),\n                Tr(\n                    Td(\"Q2 2024\", cls=str(p(4))),\n                    Td(\"Widget B\", cls=str(p(4))),\n                    Td(\"890\", cls=combine_classes(text_align.right, p(4))),\n                    Td(\"$13,350\", cls=combine_classes(text_align.right, p(4))),\n                    cls=combine_classes(border.b(), border_color.gray._200)\n                )\n            ),\n            cls=combine_classes(\n                table_layout.fixed,\n                border_collapse.separate,\n                border_spacing(0),\n                w.full,\n                bg.white,\n                shadow.sm,\n                rounded.lg,\n                overflow.hidden\n            )\n        ),\n        cls=str(p(6))\n    )\n    \n    # Verify table utilities are applied\n    table_elem = data_table.children[0]\n    assert \"table-fixed\" in table_elem.attrs['class']\n    assert \"border-separate\" in table_elem.attrs['class']\n    assert \"border-spacing-0\" in table_elem.attrs['class']\n    assert \"caption-top\" in table_elem.children[0].attrs['class']\n    \n    # Create a compact table with custom spacing\n    compact_table = Table(\n        Tbody(\n            Tr(Td(\"Item 1\"), Td(\"$10\"), Td(\"✓\")),\n            Tr(Td(\"Item 2\"), Td(\"$20\"), Td(\"✓\")),\n            Tr(Td(\"Item 3\"), Td(\"$15\"), Td(\"✗\"))\n        ),\n        cls=combine_classes(\n            border_collapse.separate,\n            border_spacing.x(1),\n            border_spacing.y(0.5),\n            table_layout.auto,\n            font_size.sm\n        )\n    )\n    \n    assert \"border-separate\" in compact_table.attrs['class']\n    assert \"border-spacing-x-1\" in compact_table.attrs['class']\n    assert \"border-spacing-y-0.5\" in compact_table.attrs['class']\n    assert \"table-auto\" in compact_table.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        data_table,\n        compact_table,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the test\ntest_tables_complex_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"p-6\"&gt;\n    &lt;table class=\"table-fixed border-separate border-spacing-0 w-full bg-white shadow-sm rounded-lg overflow-hidden\"&gt;\n&lt;caption class=\"caption-top text-lg font-semibold text-gray-700 mb-2\"&gt;Quarterly Sales Report&lt;/caption&gt;      &lt;thead&gt;\n        &lt;tr class=\"border-b-2 border-gray-300\"&gt;\n          &lt;th class=\"text-left p-4 bg-gray-100\"&gt;Quarter&lt;/th&gt;\n          &lt;th class=\"text-left p-4 bg-gray-100\"&gt;Product&lt;/th&gt;\n          &lt;th class=\"text-right p-4 bg-gray-100\"&gt;Units Sold&lt;/th&gt;\n          &lt;th class=\"text-right p-4 bg-gray-100\"&gt;Revenue&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr class=\"border-b border-gray-200\"&gt;\n          &lt;td class=\"p-4\"&gt;Q1 2024&lt;/td&gt;\n          &lt;td class=\"p-4\"&gt;Widget A&lt;/td&gt;\n          &lt;td class=\"text-right p-4\"&gt;1,234&lt;/td&gt;\n          &lt;td class=\"text-right p-4\"&gt;$12,340&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr class=\"border-b border-gray-200\"&gt;\n          &lt;td class=\"p-4\"&gt;Q1 2024&lt;/td&gt;\n          &lt;td class=\"p-4\"&gt;Widget B&lt;/td&gt;\n          &lt;td class=\"text-right p-4\"&gt;567&lt;/td&gt;\n          &lt;td class=\"text-right p-4\"&gt;$8,505&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr class=\"border-b border-gray-200\"&gt;\n          &lt;td class=\"p-4\"&gt;Q2 2024&lt;/td&gt;\n          &lt;td class=\"p-4\"&gt;Widget A&lt;/td&gt;\n          &lt;td class=\"text-right p-4\"&gt;1,567&lt;/td&gt;\n          &lt;td class=\"text-right p-4\"&gt;$15,670&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr class=\"border-b border-gray-200\"&gt;\n          &lt;td class=\"p-4\"&gt;Q2 2024&lt;/td&gt;\n          &lt;td class=\"p-4\"&gt;Widget B&lt;/td&gt;\n          &lt;td class=\"text-right p-4\"&gt;890&lt;/td&gt;\n          &lt;td class=\"text-right p-4\"&gt;$13,350&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n  &lt;table class=\"border-separate border-spacing-x-1 border-spacing-y-0.5 table-auto text-sm\"&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Item 1&lt;/td&gt;\n        &lt;td&gt;$10&lt;/td&gt;\n        &lt;td&gt;✓&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Item 2&lt;/td&gt;\n        &lt;td&gt;$20&lt;/td&gt;\n        &lt;td&gt;✓&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Item 3&lt;/td&gt;\n        &lt;td&gt;$15&lt;/td&gt;\n        &lt;td&gt;✗&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tables_complex_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "tables"
    ]
  },
  {
    "objectID": "utilities/tables.html#export",
    "href": "utilities/tables.html#export",
    "title": "tables",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "tables"
    ]
  },
  {
    "objectID": "utilities/transitions_and_animation.html",
    "href": "utilities/transitions_and_animation.html",
    "title": "transitions_and_animation",
    "section": "",
    "text": "Control which CSS properties transition:\n\nsource\n\n\n\n TransitionPropertyFactory (values_dict:Optional[Dict[str,str]]=None,\n                            doc:Optional[str]=None)\n\nFactory for transition property utilities with custom value support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\nsource\n\n\n\n\n TransitionPropertyFactory (values_dict:Optional[Dict[str,str]]=None,\n                            doc:Optional[str]=None)\n\nFactory for transition property utilities with custom value support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Create transition property factory\ntransition = TransitionPropertyFactory(\n    {\n        \"\": \"transition\",  # Default transition\n        \"all\": \"transition-all\",\n        \"colors\": \"transition-colors\",\n        \"opacity\": \"transition-opacity\",\n        \"shadow\": \"transition-shadow\",\n        \"transform\": \"transition-transform\",\n        \"none\": \"transition-none\"\n    },\n    \"Transition property utilities for controlling which CSS properties transition\"\n) # The transition property factory\n\n\n\nsource\n\n\n\n\n test_transitions_and_animation_property_examples ()\n\nTest transition property utilities.\n\n\nExported source\n# Recreate transition property factory with the enhanced class\ntransition = TransitionPropertyFactory(\n    {\n        \"\": \"transition\",  # Default transition\n        \"all\": \"transition-all\",\n        \"colors\": \"transition-colors\",\n        \"opacity\": \"transition-opacity\",\n        \"shadow\": \"transition-shadow\",\n        \"transform\": \"transition-transform\",\n        \"none\": \"transition-none\"\n    },\n    \"Transition property utilities for controlling which CSS properties transition\"\n) # The transition property factory\n\n\n\n\nExported source\ndef test_transitions_and_animation_property_examples():\n    \"\"\"Test transition property utilities.\"\"\"\n    # Test predefined transition properties\n    assert str(transition.default) == \"transition\"\n    assert str(transition.all) == \"transition-all\"\n    assert str(transition.colors) == \"transition-colors\"\n    assert str(transition.opacity) == \"transition-opacity\"\n    assert str(transition.shadow) == \"transition-shadow\"\n    assert str(transition.transform) == \"transition-transform\"\n    assert str(transition.none) == \"transition-none\"\n    \n    # Test custom properties\n    assert transition(\"--my-transition\") == \"transition-(--my-transition)\"\n    assert transition(\"--custom-props\") == \"transition-(--custom-props)\"\n    \n    # Test arbitrary values\n    assert transition(\"width\") == \"transition-[width]\"\n    assert transition(\"width, height\") == \"transition-[width, height]\"\n    assert transition(\"opacity 0.3s, transform 0.3s\") == \"transition-[opacity 0.3s, transform 0.3s]\"\n\n# Run the tests\ntest_transitions_and_animation_property_examples()",
    "crumbs": [
      "utilities",
      "transitions_and_animation"
    ]
  },
  {
    "objectID": "utilities/transitions_and_animation.html#transition-property",
    "href": "utilities/transitions_and_animation.html#transition-property",
    "title": "transitions_and_animation",
    "section": "",
    "text": "Control which CSS properties transition:\n\nsource\n\n\n\n TransitionPropertyFactory (values_dict:Optional[Dict[str,str]]=None,\n                            doc:Optional[str]=None)\n\nFactory for transition property utilities with custom value support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\nsource\n\n\n\n\n TransitionPropertyFactory (values_dict:Optional[Dict[str,str]]=None,\n                            doc:Optional[str]=None)\n\nFactory for transition property utilities with custom value support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Create transition property factory\ntransition = TransitionPropertyFactory(\n    {\n        \"\": \"transition\",  # Default transition\n        \"all\": \"transition-all\",\n        \"colors\": \"transition-colors\",\n        \"opacity\": \"transition-opacity\",\n        \"shadow\": \"transition-shadow\",\n        \"transform\": \"transition-transform\",\n        \"none\": \"transition-none\"\n    },\n    \"Transition property utilities for controlling which CSS properties transition\"\n) # The transition property factory\n\n\n\nsource\n\n\n\n\n test_transitions_and_animation_property_examples ()\n\nTest transition property utilities.\n\n\nExported source\n# Recreate transition property factory with the enhanced class\ntransition = TransitionPropertyFactory(\n    {\n        \"\": \"transition\",  # Default transition\n        \"all\": \"transition-all\",\n        \"colors\": \"transition-colors\",\n        \"opacity\": \"transition-opacity\",\n        \"shadow\": \"transition-shadow\",\n        \"transform\": \"transition-transform\",\n        \"none\": \"transition-none\"\n    },\n    \"Transition property utilities for controlling which CSS properties transition\"\n) # The transition property factory\n\n\n\n\nExported source\ndef test_transitions_and_animation_property_examples():\n    \"\"\"Test transition property utilities.\"\"\"\n    # Test predefined transition properties\n    assert str(transition.default) == \"transition\"\n    assert str(transition.all) == \"transition-all\"\n    assert str(transition.colors) == \"transition-colors\"\n    assert str(transition.opacity) == \"transition-opacity\"\n    assert str(transition.shadow) == \"transition-shadow\"\n    assert str(transition.transform) == \"transition-transform\"\n    assert str(transition.none) == \"transition-none\"\n    \n    # Test custom properties\n    assert transition(\"--my-transition\") == \"transition-(--my-transition)\"\n    assert transition(\"--custom-props\") == \"transition-(--custom-props)\"\n    \n    # Test arbitrary values\n    assert transition(\"width\") == \"transition-[width]\"\n    assert transition(\"width, height\") == \"transition-[width, height]\"\n    assert transition(\"opacity 0.3s, transform 0.3s\") == \"transition-[opacity 0.3s, transform 0.3s]\"\n\n# Run the tests\ntest_transitions_and_animation_property_examples()",
    "crumbs": [
      "utilities",
      "transitions_and_animation"
    ]
  },
  {
    "objectID": "utilities/transitions_and_animation.html#transition-behavior",
    "href": "utilities/transitions_and_animation.html#transition-behavior",
    "title": "transitions_and_animation",
    "section": "Transition Behavior",
    "text": "Transition Behavior\nControl the behavior of CSS transitions:\n\nsource\n\ntest_transitions_and_animation_behavior_examples\n\n test_transitions_and_animation_behavior_examples ()\n\nTest transition behavior utilities.\n\n\nExported source\ntransition_behavior = SimpleFactory(\n    {\n        \"normal\": \"transition-normal\",\n        \"discrete\": \"transition-discrete\"\n    },\n    \"Transition behavior utilities for controlling the behavior of CSS transitions\"\n) # The transition behavior factory\n\n\n\n\nExported source\ndef test_transitions_and_animation_behavior_examples():\n    \"\"\"Test transition behavior utilities.\"\"\"\n    assert str(transition_behavior.normal) == \"transition-normal\"\n    assert str(transition_behavior.discrete) == \"transition-discrete\"\n\n# Run the tests\ntest_transitions_and_animation_behavior_examples()",
    "crumbs": [
      "utilities",
      "transitions_and_animation"
    ]
  },
  {
    "objectID": "utilities/transitions_and_animation.html#transition-duration",
    "href": "utilities/transitions_and_animation.html#transition-duration",
    "title": "transitions_and_animation",
    "section": "Transition Duration",
    "text": "Transition Duration\nControl the duration of CSS transitions:\n\nsource\n\nDurationFactory\n\n DurationFactory (prefix:str,\n                  config:cjm_fasthtml_tailwind.builders.scales.ScaleConfig\n                  , doc:Optional[str]=None)\n\nFactory for duration utilities with millisecond support.\n\n\nExported source\n# Standard duration values in milliseconds\nDURATION_SCALE = [0, 75, 100, 150, 200, 300, 500, 700, 1000] # Standard Tailwind duration scale\n\n\n\n\nExported source\nDURATION_CONFIG = ScaleConfig( # Duration configuration\n    numeric=False,  # Don't use full numeric scale\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"0\": \"0\",\n        \"75\": \"75\",\n        \"100\": \"100\",\n        \"150\": \"150\",\n        \"200\": \"200\",\n        \"300\": \"300\",\n        \"500\": \"500\",\n        \"700\": \"700\",\n        \"1000\": \"1000\",\n        \"initial\": \"initial\"\n    },\n    negative=False\n)\n\n\n\n\nExported source\n# Create duration factory\nduration = DurationFactory(\"duration\", DURATION_CONFIG, \"Transition duration utilities for controlling the duration of CSS transitions\") # The duration factory\n\n\n\nsource\n\n\ntest_transitions_and_animation_duration_examples\n\n test_transitions_and_animation_duration_examples ()\n\nTest transition duration utilities.\n\n\nExported source\ndef test_transitions_and_animation_duration_examples():\n    \"\"\"Test transition duration utilities.\"\"\"\n    # Test standard duration values with attributes\n    assert str(duration._0) == \"duration-0\"\n    assert str(duration._75) == \"duration-75\"\n    assert str(duration._100) == \"duration-100\"\n    assert str(duration._150) == \"duration-150\"\n    assert str(duration._200) == \"duration-200\"\n    assert str(duration._300) == \"duration-300\"\n    assert str(duration._500) == \"duration-500\"\n    assert str(duration._700) == \"duration-700\"\n    assert str(duration._1000) == \"duration-1000\"\n    assert str(duration.initial) == \"duration-initial\"\n    \n    # Test all attributes are available for autocomplete\n    assert hasattr(duration, '_0')\n    assert hasattr(duration, '_75')\n    assert hasattr(duration, '_100')\n    assert hasattr(duration, '_150')\n    assert hasattr(duration, '_200')\n    assert hasattr(duration, '_300')\n    assert hasattr(duration, '_500')\n    assert hasattr(duration, '_700')\n    assert hasattr(duration, '_1000')\n    assert hasattr(duration, 'initial')\n    \n    # Verify they are ScaledUtility instances\n    assert isinstance(duration._300, ScaledUtility)\n    assert isinstance(duration._500, ScaledUtility)\n    \n    # Test with numeric values\n    assert str(duration(0)) == \"duration-0\"\n    assert str(duration(75)) == \"duration-75\"\n    assert str(duration(150)) == \"duration-150\"\n    assert str(duration(1000)) == \"duration-1000\"\n    \n    # Test arbitrary values\n    assert str(duration(\"250\")) == \"duration-[250]\"\n    assert str(duration(\"2s\")) == \"duration-[2s]\"\n    assert str(duration(\"100ms\")) == \"duration-[100ms]\"\n    assert str(duration(\"0.5s\")) == \"duration-[0.5s]\"\n    \n    # Test custom properties\n    assert str(duration(\"--my-duration\")) == \"duration-(--my-duration)\"\n    assert str(duration(\"--animation-speed\")) == \"duration-(--animation-speed)\"\n\n# Run the tests\ntest_transitions_and_animation_duration_examples()",
    "crumbs": [
      "utilities",
      "transitions_and_animation"
    ]
  },
  {
    "objectID": "utilities/transitions_and_animation.html#transition-timing-function",
    "href": "utilities/transitions_and_animation.html#transition-timing-function",
    "title": "transitions_and_animation",
    "section": "Transition Timing Function",
    "text": "Transition Timing Function\nControl the easing of CSS transitions:\n\nsource\n\nEaseFactory\n\n EaseFactory (values_dict:Optional[Dict[str,str]]=None,\n              doc:Optional[str]=None)\n\nFactory for easing/timing function utilities with custom value support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\nsource\n\n\ntest_transitions_and_animation_timing_examples\n\n test_transitions_and_animation_timing_examples ()\n\nTest transition timing function utilities.\n\n\nExported source\n# Create ease factory\nease = EaseFactory(\n    {\n        \"linear\": \"ease-linear\",\n        \"_in\": \"ease-in\",\n        \"out\": \"ease-out\",\n        \"in-out\": \"ease-in-out\",\n        \"initial\": \"ease-initial\"\n    },\n    \"Transition timing function utilities for controlling the easing of CSS transitions\"\n) # The ease factory\n\n\n\n\nExported source\ndef test_transitions_and_animation_timing_examples():\n    \"\"\"Test transition timing function utilities.\"\"\"\n    # Test predefined easing functions\n    assert str(ease.linear) == \"ease-linear\"\n    assert str(ease._in) == \"ease-in\"  # Note: 'in' is a Python keyword, so we use 'in_'\n    assert str(ease.out) == \"ease-out\"\n    assert str(ease.in_out) == \"ease-in-out\"\n    assert str(ease.initial) == \"ease-initial\"\n    \n    # Test custom properties\n    assert ease(\"--my-ease\") == \"ease-(--my-ease)\"\n    assert ease(\"--custom-timing\") == \"ease-(--custom-timing)\"\n    \n    # Test cubic-bezier functions\n    assert ease(\"cubic-bezier(0.4, 0, 0.2, 1)\") == \"ease-[cubic-bezier(0.4, 0, 0.2, 1)]\"\n    assert ease(\"cubic-bezier(0.1, 0.7, 1.0, 0.1)\") == \"ease-[cubic-bezier(0.1, 0.7, 1.0, 0.1)]\"\n    \n    # Test steps function\n    assert ease(\"steps(4, jump-start)\") == \"ease-[steps(4, jump-start)]\"\n\n# Run the tests\ntest_transitions_and_animation_timing_examples()",
    "crumbs": [
      "utilities",
      "transitions_and_animation"
    ]
  },
  {
    "objectID": "utilities/transitions_and_animation.html#transition-delay",
    "href": "utilities/transitions_and_animation.html#transition-delay",
    "title": "transitions_and_animation",
    "section": "Transition Delay",
    "text": "Transition Delay\nControl the delay of CSS transitions:\n\nsource\n\nDelayFactory\n\n DelayFactory (prefix:str,\n               config:cjm_fasthtml_tailwind.builders.scales.ScaleConfig,\n               doc:Optional[str]=None)\n\nFactory for delay utilities with millisecond support.\n\n\nExported source\n# Standard delay values in milliseconds (same as duration scale)\nDELAY_SCALE = [0, 75, 100, 150, 200, 300, 500, 700, 1000] # Standard Tailwind delay scale\n\n\n\n\nExported source\nDELAY_CONFIG = ScaleConfig( # Delay configuration\n    numeric=False,  # Don't use full numeric scale\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"0\": \"0\",\n        \"75\": \"75\",\n        \"100\": \"100\",\n        \"150\": \"150\",\n        \"200\": \"200\",\n        \"300\": \"300\",\n        \"500\": \"500\",\n        \"700\": \"700\",\n        \"1000\": \"1000\"\n    },\n    negative=False\n)\n\n\n\nsource\n\n\ntest_transitions_and_animation_delay_examples\n\n test_transitions_and_animation_delay_examples ()\n\nTest transition delay utilities.\n\n\nExported source\n# Create delay factory\ndelay = DelayFactory(\"delay\", DELAY_CONFIG, \"Transition delay utilities for controlling the delay of CSS transitions\") # The delay factory\n\n\n\n\nExported source\ndef test_transitions_and_animation_delay_examples():\n    \"\"\"Test transition delay utilities.\"\"\"\n    # Test standard delay values with attributes\n    assert str(delay._0) == \"delay-0\"\n    assert str(delay._75) == \"delay-75\"\n    assert str(delay._100) == \"delay-100\"\n    assert str(delay._150) == \"delay-150\"\n    assert str(delay._200) == \"delay-200\"\n    assert str(delay._300) == \"delay-300\"\n    assert str(delay._500) == \"delay-500\"\n    assert str(delay._700) == \"delay-700\"\n    assert str(delay._1000) == \"delay-1000\"\n    \n    # Test all attributes are available for autocomplete\n    assert hasattr(delay, '_0')\n    assert hasattr(delay, '_75')\n    assert hasattr(delay, '_100')\n    assert hasattr(delay, '_150')\n    assert hasattr(delay, '_200')\n    assert hasattr(delay, '_300')\n    assert hasattr(delay, '_500')\n    assert hasattr(delay, '_700')\n    assert hasattr(delay, '_1000')\n    \n    # Verify they are ScaledUtility instances\n    assert isinstance(delay._300, ScaledUtility)\n    assert isinstance(delay._500, ScaledUtility)\n    \n    # Test with numeric values\n    assert str(delay(0)) == \"delay-0\"\n    assert str(delay(75)) == \"delay-75\"\n    assert str(delay(150)) == \"delay-150\"\n    assert str(delay(1000)) == \"delay-1000\"\n    \n    # Test arbitrary values\n    assert str(delay(\"250\")) == \"delay-[250]\"\n    assert str(delay(\"2s\")) == \"delay-[2s]\"\n    assert str(delay(\"100ms\")) == \"delay-[100ms]\"\n    assert str(delay(\"0.5s\")) == \"delay-[0.5s]\"\n    \n    # Test custom properties\n    assert str(delay(\"--my-delay\")) == \"delay-(--my-delay)\"\n    assert str(delay(\"--animation-delay\")) == \"delay-(--animation-delay)\"\n\n# Run the tests\ntest_transitions_and_animation_delay_examples()",
    "crumbs": [
      "utilities",
      "transitions_and_animation"
    ]
  },
  {
    "objectID": "utilities/transitions_and_animation.html#animation",
    "href": "utilities/transitions_and_animation.html#animation",
    "title": "transitions_and_animation",
    "section": "Animation",
    "text": "Animation\nUtilities for animating elements with CSS animations:\n\nsource\n\nAnimationFactory\n\n AnimationFactory (values_dict:Optional[Dict[str,str]]=None,\n                   doc:Optional[str]=None)\n\nFactory for animation utilities with custom value support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\nsource\n\n\ntest_transitions_and_animation_examples\n\n test_transitions_and_animation_examples ()\n\nTest animation utilities.\n\n\nExported source\n# Create animation factory\nanimate = AnimationFactory(\n    {\n        \"spin\": \"animate-spin\",\n        \"ping\": \"animate-ping\",\n        \"pulse\": \"animate-pulse\",\n        \"bounce\": \"animate-bounce\",\n        \"none\": \"animate-none\"\n    },\n    \"Animation utilities for animating elements with CSS animations\"\n) # The animation factory\n\n\n\n\nExported source\ndef test_transitions_and_animation_examples():\n    \"\"\"Test animation utilities.\"\"\"\n    # Test predefined animations\n    assert str(animate.spin) == \"animate-spin\"\n    assert str(animate.ping) == \"animate-ping\"\n    assert str(animate.pulse) == \"animate-pulse\"\n    assert str(animate.bounce) == \"animate-bounce\"\n    assert str(animate.none) == \"animate-none\"\n    \n    # Test custom properties\n    assert animate(\"--my-animation\") == \"animate-(--my-animation)\"\n    assert animate(\"--custom-spin\") == \"animate-(--custom-spin)\"\n    \n    # Test arbitrary animation values\n    assert animate(\"slide 1s ease-in-out\") == \"animate-[slide 1s ease-in-out]\"\n    assert animate(\"fade 0.5s linear infinite\") == \"animate-[fade 0.5s linear infinite]\"\n    assert animate(\"wiggle 1s ease-in-out infinite\") == \"animate-[wiggle 1s ease-in-out infinite]\"\n\n# Run the tests\ntest_transitions_and_animation_examples()",
    "crumbs": [
      "utilities",
      "transitions_and_animation"
    ]
  },
  {
    "objectID": "utilities/transitions_and_animation.html#practical-examples",
    "href": "utilities/transitions_and_animation.html#practical-examples",
    "title": "transitions_and_animation",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these transition and animation utilities in real FastHTML components:\n\nsource\n\ntest_transitions_and_animation_fasthtml_examples\n\n test_transitions_and_animation_fasthtml_examples ()\n\nTest transition and animation utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_transitions_and_animation_fasthtml_examples():\n    \"\"\"Test transition and animation utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Button, Card, Span, A, Img\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.transforms import scale_tw, translate\n    from cjm_fasthtml_tailwind.utilities.effects import opacity\n    from cjm_fasthtml_tailwind.utilities.transforms import transform\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Button with hover transition\n    button = Button(\n        \"Hover me\",\n        cls=combine_classes(\n            bg.blue._500, bg.blue._700.hover, text_color.white, p.x(4), p.y(2), rounded.full,\n            transition.colors,\n            duration._300,\n            ease.in_out\n        )\n    )\n    assert \"transition-colors\" in button.attrs['class']\n    assert \"duration-300\" in button.attrs['class']\n    assert \"ease-in-out\" in button.attrs['class']\n    \n    # Card with shadow transition\n    card = Card(\n        \"Content\",\n        cls=combine_classes(\n            shadow.md, shadow.xl.hover,\n            transition.shadow,\n            duration._200\n        )\n    )\n    assert \"transition-shadow\" in card.attrs['class']\n    assert \"duration-200\" in card.attrs['class']\n    \n    # Scale transform on hover\n    scale_div = Div(\n        \"Scale on hover\",\n        cls=combine_classes(\n            scale_tw(110).hover,\n            transition.transform,\n            duration._150,\n            ease.out\n        )\n    )\n    assert \"transition-transform\" in scale_div.attrs['class']\n    assert \"duration-150\" in scale_div.attrs['class']\n    assert \"ease-out\" in scale_div.attrs['class']\n    \n    # Delayed transition\n    delayed_link = A(\n        \"Delayed hover\",\n        cls=combine_classes(\n            text_color.gray._600, text_color.blue._500.hover,\n            transition.colors,\n            duration._500,\n            delay._200\n        )\n    )\n    assert \"delay-200\" in delayed_link.attrs['class']\n    \n    # Multiple property transitions\n    multi_transition = Div(\n        \"Multiple transitions\",\n        cls=combine_classes(\n            opacity._50, opacity._100.hover, transform.gpu, translate.y(1).hover,\n            transition(\"opacity, transform\"),\n            duration._300\n        )\n    )\n    assert \"transition-[opacity, transform]\" in multi_transition.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        button,\n        card,\n        scale_div,\n        delayed_link,\n        multi_transition,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_transitions_and_animation_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n&lt;button class=\"bg-blue-500 hover:bg-blue-700 text-white px-4 py-2 rounded-full transition-colors duration-300 ease-in-out\"&gt;Hover me&lt;/button&gt;  &lt;article class=\"shadow-md hover:shadow-xl transition-shadow duration-200\"&gt;Content&lt;/article&gt;\n  &lt;div class=\"hover:scale-110 transition-transform duration-150 ease-out\"&gt;Scale on hover&lt;/div&gt;\n&lt;a href=\"#\" class=\"text-gray-600 hover:text-blue-500 transition-colors duration-500 delay-200\"&gt;Delayed hover&lt;/a&gt;  &lt;div class=\"opacity-50 hover:opacity-100 transform-gpu hover:translate-y-1 transition-[opacity, transform] duration-300\"&gt;Multiple transitions&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_transitions_and_animation_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_transitions_and_animation_animation_fasthtml_examples\n\n test_transitions_and_animation_animation_fasthtml_examples ()\n\nTest animation utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_transitions_and_animation_animation_fasthtml_examples():\n    \"\"\"Test animation utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Span, Button\n    from cjm_fasthtml_tailwind.utilities.borders import border, border_color, rounded\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.layout import position, top, right, display_tw\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    grid_display\n    # Loading spinner\n    spinner = Div(\n        cls=combine_classes(\n            border._2, border_color.gray._200, border_color.t.blue._500, rounded.full, w(6), h(6),\n            animate.spin\n        )\n    )\n    assert \"animate-spin\" in spinner.attrs['class']\n    \n    # Ping notification\n    notification_dot = Span(\n        cls=combine_classes(\n            position.absolute, top.negative(1), right.negative(1), h(3), w(3), bg.red._500, rounded.full,\n            animate.ping\n        )\n    )\n    assert \"animate-ping\" in notification_dot.attrs['class']\n    \n    # Pulse skeleton loader\n    skeleton = Div(\n        cls=combine_classes(\n            h(4), bg.gray._200, rounded.full,\n            animate.pulse\n        )\n    )\n    assert \"animate-pulse\" in skeleton.attrs['class']\n    \n    # Bounce arrow\n    arrow = Div(\n        \"↓\",\n        cls=combine_classes(\n            font_size._2xl,\n            animate.bounce\n        )\n    )\n    assert \"animate-bounce\" in arrow.attrs['class']\n    \n    # Custom animation\n    custom_animated = Div(\n        \"Custom animation\",\n        cls=combine_classes(\n            animate(\"slide-in 0.5s ease-out forwards\")\n        )\n    )\n    assert \"animate-[slide-in 0.5s ease-out forwards]\" in custom_animated.attrs['class']\n    \n    # Animation with CSS variable\n    var_animated = Div(\n        \"Variable animation\",\n        cls=combine_classes(\n            animate(\"--custom-fade-in\")\n        )\n    )\n    assert \"animate-(--custom-fade-in)\" in var_animated.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        spinner,\n        notification_dot,\n        skeleton,\n        arrow,\n        custom_animated,\n        var_animated,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_transitions_and_animation_animation_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"border-2 border-gray-200 border-t-blue-500 rounded-full w-6 h-6 animate-spin\"&gt;&lt;/div&gt;\n&lt;span class=\"absolute -top-1 -right-1 h-3 w-3 bg-red-500 rounded-full animate-ping\"&gt;&lt;/span&gt;  &lt;div class=\"h-4 bg-gray-200 rounded-full animate-pulse\"&gt;&lt;/div&gt;\n  &lt;div class=\"text-2xl animate-bounce\"&gt;↓&lt;/div&gt;\n  &lt;div class=\"animate-[slide-in 0.5s ease-out forwards]\"&gt;Custom animation&lt;/div&gt;\n  &lt;div class=\"animate-(--custom-fade-in)\"&gt;Variable animation&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_transitions_and_animation_animation_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_transitions_and_animation_composition_fasthtml_examples\n\n test_transitions_and_animation_composition_fasthtml_examples ()\n\nTest composing multiple transition utilities together.\n\n\nExported source\ndef test_transitions_and_animation_composition_fasthtml_examples():\n    \"\"\"Test composing multiple transition utilities together.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg_linear, from_color, to_color\n    from cjm_fasthtml_tailwind.utilities.transforms import scale_tw, translate, transform\n    from cjm_fasthtml_tailwind.utilities.effects import shadow, opacity\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Complete transition setup\n    interactive_element = Button(\n        \"Interactive\",\n        cls=combine_classes(\n            bg_linear.to_r, from_color.blue._500, to_color.purple._600,\n            from_color.blue._600.hover, to_color.purple._700.hover,\n            transform.gpu, scale_tw(105).hover, scale_tw(95).active,\n            shadow.lg, shadow.xl.hover,\n            transition.all,  # Transition all properties\n            duration._300,\n            ease.in_out,\n            delay._0\n        )\n    )\n    assert \"transition-all\" in interactive_element.attrs['class']\n    assert \"duration-300\" in interactive_element.attrs['class']\n    assert \"ease-in-out\" in interactive_element.attrs['class']\n    assert \"delay-0\" in interactive_element.attrs['class']\n    \n    # Different transitions for different properties\n    multi_property = Div(\n        \"Multi-property transitions\",\n        cls=combine_classes(\n            opacity._75, opacity._100.hover,\n            transform.gpu, translate.x(2).hover,\n            transition(\"opacity, transform\"),\n            duration(\"200ms\"),  # Custom duration\n            ease(\"cubic-bezier(0.4, 0, 0.2, 1)\")  # Custom easing\n        )\n    )\n    assert \"transition-[opacity, transform]\" in multi_property.attrs['class']\n    assert \"duration-[200ms]\" in multi_property.attrs['class']\n    assert \"ease-[cubic-bezier(0.4, 0, 0.2, 1)]\" in multi_property.attrs['class']\n    \n    # Combining animation with transitions\n    animated_transitional = Div(\n        \"Loading...\",\n        cls=combine_classes(\n            animate.pulse,\n            opacity._50.hover,\n            transition.opacity,\n            duration._150\n        )\n    )\n    assert \"animate-pulse\" in animated_transitional.attrs['class']\n    assert \"transition-opacity\" in animated_transitional.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        interactive_element,\n        multi_property,\n        animated_transitional,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_transitions_and_animation_composition_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n&lt;button class=\"bg-linear-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transform-gpu hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl transition-all duration-300 ease-in-out delay-0\"&gt;Interactive&lt;/button&gt;  &lt;div class=\"opacity-75 hover:opacity-100 transform-gpu hover:translate-x-2 transition-[opacity, transform] duration-[200ms] ease-[cubic-bezier(0.4, 0, 0.2, 1)]\"&gt;Multi-property transitions&lt;/div&gt;\n  &lt;div class=\"animate-pulse hover:opacity-50 transition-opacity duration-150\"&gt;Loading...&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_transitions_and_animation_composition_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "transitions_and_animation"
    ]
  },
  {
    "objectID": "utilities/transitions_and_animation.html#helper-functions",
    "href": "utilities/transitions_and_animation.html#helper-functions",
    "title": "transitions_and_animation",
    "section": "Helper Functions",
    "text": "Helper Functions\nConvenient functions for common transition and animation patterns:\n\nsource\n\nsmooth_transition\n\n smooth_transition (properties:str='all', duration_ms:int=300,\n                    easing:str='in-out')\n\nCreate a smooth transition with common defaults.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nproperties\nstr\nall\nWhich properties to transition (default: all)\n\n\nduration_ms\nint\n300\nDuration in milliseconds\n\n\neasing\nstr\nin-out\nEasing function\n\n\nReturns\nstr\n\nCombined CSS classes for smooth transitions\n\n\n\n\nsource\n\n\nhover_effect\n\n hover_effect (duration_ms:int=200)\n\nStandard hover effect transition for interactive elements.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nduration_ms\nint\n200\nDuration in milliseconds\n\n\nReturns\nstr\n\nCombined CSS classes for hover effects\n\n\n\n\nsource\n\n\nfade_in\n\n fade_in (duration_ms:int=500, delay_ms:Optional[int]=None)\n\nFade-in transition for entering elements.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nduration_ms\nint\n500\nDuration in milliseconds\n\n\ndelay_ms\nOptional\nNone\nOptional delay in milliseconds\n\n\nReturns\nstr\n\nCombined CSS classes for fade-in effect\n\n\n\n\nsource\n\n\nloading_spinner\n\n loading_spinner ()\n\nCreate a loading spinner animation.\n\nsource\n\n\nskeleton_loader\n\n skeleton_loader ()\n\nCreate a skeleton loader animation for content placeholders.\n\nsource\n\n\ntest_transitions_and_animation_helper_examples\n\n test_transitions_and_animation_helper_examples ()\n\nTest helper functions for common transition patterns.\n\n\nExported source\ndef test_transitions_and_animation_helper_examples():\n    \"\"\"Test helper functions for common transition patterns.\"\"\"\n    # Test smooth_transition\n    assert smooth_transition() == \"transition-all duration-300 ease-in-out\"\n    assert smooth_transition(\"colors\", 200, \"out\") == \"transition-colors duration-200 ease-out\"\n    assert smooth_transition(\"opacity, transform\", 500, \"linear\") == \"transition-[opacity, transform] duration-500 ease-linear\"\n    \n    # Test hover_effect\n    assert hover_effect() == \"transition-all duration-200 ease-in-out\"\n    assert hover_effect(150) == \"transition-all duration-150 ease-in-out\"\n    \n    # Test fade_in\n    assert fade_in() == \"transition-opacity duration-500 ease-out\"\n    assert fade_in(300) == \"transition-opacity duration-300 ease-out\"\n    assert fade_in(500, 200) == \"transition-opacity duration-500 ease-out delay-200\"\n    \n    # Test loading_spinner\n    assert loading_spinner() == \"border-2 border-gray-200 border-t-current rounded-full animate-spin\"\n    \n    # Test skeleton_loader\n    assert skeleton_loader() == \"bg-gray-200 animate-pulse\"\n\n# Run the tests\ntest_transitions_and_animation_helper_examples()",
    "crumbs": [
      "utilities",
      "transitions_and_animation"
    ]
  },
  {
    "objectID": "utilities/effects.html",
    "href": "utilities/effects.html",
    "title": "effects",
    "section": "",
    "text": "Utilities for controlling the box shadow of an element. Box shadows in Tailwind CSS v4 support both shadow size and shadow color customization.\n\n\nDefine the available shadow sizes from smallest to largest:\n\n\nExported source\n# Shadow size\nSHADOW_SIZE_CONFIG = ScaleConfig(\n    numeric=False,\n    decimals=False,\n    fractions=False,\n    named=[\n        NamedScale(\"none\", \"0\", \"0 #0000\"),\n        NamedScale(\"2xs\", \"--shadow-2xs\", \"0 1px rgb(0 0 0 / 0.05)\"),\n        NamedScale(\"xs\", \"--shadow-xs\", \"0 1px 2px 0 rgb(0 0 0 / 0.05)\"),\n        NamedScale(\"sm\", \"--shadow-sm\", \"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\"),\n        NamedScale(\"md\", \"--shadow-md\", \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\"),\n        NamedScale(\"lg\", \"--shadow-lg\", \"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\"),\n        NamedScale(\"xl\", \"--shadow-xl\", \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\"),\n        NamedScale(\"2xl\", \"--shadow-2xl\", \"0 25px 50px -12px rgb(0 0 0 / 0.25)\"),\n    ],\n    special={},\n    negative=False\n)\n\nshadow = ScaledFactory(\"shadow\", SHADOW_SIZE_CONFIG, \"Box shadow utilities for adding depth to elements\") # Box shadow factory\n\n\n\n\n\nControl the color of shadows using the standard color palette:\n\n\nExported source\nshadow_color = ColoredFactory(\"shadow\", \"Shadow color utilities for customizing the color of box shadows\") # Create shadow color factory using the existing ColoredFactory\n\n\n\n\n\nTest the shadow size utilities:\n\nsource\n\n\n\n\n test_effects_shadow_base_examples ()\n\nTest shadow size utilities.\n\n\nExported source\ndef test_effects_shadow_base_examples():\n    \"\"\"Test shadow size utilities.\"\"\"\n    assert str(shadow()) == \"shadow\"\n\n# Run the tests\ntest_effects_shadow_base_examples()\n\n\n\nsource\n\n\n\n\n test_effects_shadow_size_examples ()\n\nTest shadow size utilities.\n\n\nExported source\ndef test_effects_shadow_size_examples():\n    \"\"\"Test shadow size utilities.\"\"\"\n    assert str(shadow()) == \"shadow\"\n    # Test all named sizes\n    assert str(shadow._2xs) == \"shadow-2xs\"\n    assert str(shadow.xs) == \"shadow-xs\"\n    assert str(shadow.sm) == \"shadow-sm\"\n    assert str(shadow.md) == \"shadow-md\"\n    assert str(shadow.lg) == \"shadow-lg\"\n    assert str(shadow.xl) == \"shadow-xl\"\n    assert str(shadow._2xl) == \"shadow-2xl\"\n    assert str(shadow.none) == \"shadow-none\"\n    \n    # Test default shadow (no size)\n    assert str(shadow()) == \"shadow\"\n    \n    # Test with size parameter\n    assert str(shadow(\"sm\")) == \"shadow-sm\"\n    assert str(shadow(\"lg\")) == \"shadow-lg\"\n    assert str(shadow(\"none\")) == \"shadow-none\"\n\n# Run the tests\ntest_effects_shadow_size_examples()\n\n\n\nsource\n\n\n\n\n test_effects_shadow_arbitrary_examples ()\n\nTest shadow utilities with arbitrary and custom values.\n\n\nExported source\ndef test_effects_shadow_arbitrary_examples():\n    \"\"\"Test shadow utilities with arbitrary and custom values.\"\"\"\n    # Test arbitrary shadow values\n    assert str(shadow(\"10px 10px 5px gray\")) == \"shadow-[10px 10px 5px gray]\"\n    assert str(shadow(\"0 4px 6px rgba(0,0,0,0.1)\")) == \"shadow-[0 4px 6px rgba(0,0,0,0.1)]\"\n    assert str(shadow(\"inset 0 2px 4px rgba(0,0,0,0.06)\")) == \"shadow-[inset 0 2px 4px rgba(0,0,0,0.06)]\"\n    \n    # Test CSS custom properties\n    assert str(shadow(\"--custom-shadow\")) == \"shadow-(--custom-shadow)\"\n    assert str(shadow(\"--elevation-high\")) == \"shadow-(--elevation-high)\"\n\n# Run the tests  \ntest_effects_shadow_arbitrary_examples()\n\n\n\n\n\nTest the shadow color utilities:\n\nsource\n\n\n\n\n test_effects_shadow_color_examples ()\n\nTest shadow color utilities with various color values.\n\n\nExported source\ndef test_effects_shadow_color_examples():\n    \"\"\"Test shadow color utilities with various color values.\"\"\"\n    # Test all 22 Tailwind color families\n    assert str(shadow_color.red._500) == \"shadow-red-500\"\n    assert str(shadow_color.orange._500) == \"shadow-orange-500\"\n    assert str(shadow_color.amber._500) == \"shadow-amber-500\"\n    assert str(shadow_color.yellow._500) == \"shadow-yellow-500\"\n    assert str(shadow_color.lime._500) == \"shadow-lime-500\"\n    assert str(shadow_color.green._500) == \"shadow-green-500\"\n    assert str(shadow_color.emerald._500) == \"shadow-emerald-500\"\n    assert str(shadow_color.teal._500) == \"shadow-teal-500\"\n    assert str(shadow_color.cyan._500) == \"shadow-cyan-500\"\n    assert str(shadow_color.sky._500) == \"shadow-sky-500\"\n    assert str(shadow_color.blue._500) == \"shadow-blue-500\"\n    assert str(shadow_color.indigo._500) == \"shadow-indigo-500\"\n    assert str(shadow_color.violet._500) == \"shadow-violet-500\"\n    assert str(shadow_color.purple._500) == \"shadow-purple-500\"\n    assert str(shadow_color.fuchsia._500) == \"shadow-fuchsia-500\"\n    assert str(shadow_color.pink._500) == \"shadow-pink-500\"\n    assert str(shadow_color.rose._500) == \"shadow-rose-500\"\n    assert str(shadow_color.slate._500) == \"shadow-slate-500\"\n    assert str(shadow_color.gray._500) == \"shadow-gray-500\"\n    assert str(shadow_color.zinc._500) == \"shadow-zinc-500\"\n    assert str(shadow_color.neutral._500) == \"shadow-neutral-500\"\n    assert str(shadow_color.stone._500) == \"shadow-stone-500\"\n    \n    # Test different shades\n    assert str(shadow_color.blue._300) == \"shadow-blue-300\"\n    assert str(shadow_color.green._950) == \"shadow-green-950\"\n    \n    # Special colors\n    assert str(shadow_color.transparent) == \"shadow-transparent\"\n    assert str(shadow_color.black) == \"shadow-black\"\n    assert str(shadow_color.white) == \"shadow-white\"\n    assert str(shadow_color.current) == \"shadow-current\"\n    assert str(shadow_color.inherit) == \"shadow-inherit\"\n\n# Run the tests\ntest_effects_shadow_color_examples()\n\n\n\nsource\n\n\n\n\n test_effects_shadow_color_arbitrary_examples ()\n\nTest shadow color utilities with arbitrary values.\n\n\nExported source\ndef test_effects_shadow_color_arbitrary_examples():\n    \"\"\"Test shadow color utilities with arbitrary values.\"\"\"\n    # Test hex colors\n    assert str(shadow_color(\"#ff0000\")) == \"shadow-[#ff0000]\"\n    assert str(shadow_color(\"#123456\")) == \"shadow-[#123456]\"\n    \n    # Test RGB/RGBA colors\n    assert str(shadow_color(\"rgb(255, 0, 0)\")) == \"shadow-[rgb(255, 0, 0)]\"\n    assert str(shadow_color(\"rgba(0, 0, 0, 0.5)\")) == \"shadow-[rgba(0, 0, 0, 0.5)]\"\n    \n    # Test CSS custom properties\n    assert str(shadow_color(\"--shadow-color-primary\")) == \"shadow-(--shadow-color-primary)\"\n    assert str(shadow_color(\"--brand-shadow\")) == \"shadow-(--brand-shadow)\"\n\n# Run the tests\ntest_effects_shadow_color_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#box-shadow",
    "href": "utilities/effects.html#box-shadow",
    "title": "effects",
    "section": "",
    "text": "Utilities for controlling the box shadow of an element. Box shadows in Tailwind CSS v4 support both shadow size and shadow color customization.\n\n\nDefine the available shadow sizes from smallest to largest:\n\n\nExported source\n# Shadow size\nSHADOW_SIZE_CONFIG = ScaleConfig(\n    numeric=False,\n    decimals=False,\n    fractions=False,\n    named=[\n        NamedScale(\"none\", \"0\", \"0 #0000\"),\n        NamedScale(\"2xs\", \"--shadow-2xs\", \"0 1px rgb(0 0 0 / 0.05)\"),\n        NamedScale(\"xs\", \"--shadow-xs\", \"0 1px 2px 0 rgb(0 0 0 / 0.05)\"),\n        NamedScale(\"sm\", \"--shadow-sm\", \"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\"),\n        NamedScale(\"md\", \"--shadow-md\", \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\"),\n        NamedScale(\"lg\", \"--shadow-lg\", \"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\"),\n        NamedScale(\"xl\", \"--shadow-xl\", \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\"),\n        NamedScale(\"2xl\", \"--shadow-2xl\", \"0 25px 50px -12px rgb(0 0 0 / 0.25)\"),\n    ],\n    special={},\n    negative=False\n)\n\nshadow = ScaledFactory(\"shadow\", SHADOW_SIZE_CONFIG, \"Box shadow utilities for adding depth to elements\") # Box shadow factory\n\n\n\n\n\nControl the color of shadows using the standard color palette:\n\n\nExported source\nshadow_color = ColoredFactory(\"shadow\", \"Shadow color utilities for customizing the color of box shadows\") # Create shadow color factory using the existing ColoredFactory\n\n\n\n\n\nTest the shadow size utilities:\n\nsource\n\n\n\n\n test_effects_shadow_base_examples ()\n\nTest shadow size utilities.\n\n\nExported source\ndef test_effects_shadow_base_examples():\n    \"\"\"Test shadow size utilities.\"\"\"\n    assert str(shadow()) == \"shadow\"\n\n# Run the tests\ntest_effects_shadow_base_examples()\n\n\n\nsource\n\n\n\n\n test_effects_shadow_size_examples ()\n\nTest shadow size utilities.\n\n\nExported source\ndef test_effects_shadow_size_examples():\n    \"\"\"Test shadow size utilities.\"\"\"\n    assert str(shadow()) == \"shadow\"\n    # Test all named sizes\n    assert str(shadow._2xs) == \"shadow-2xs\"\n    assert str(shadow.xs) == \"shadow-xs\"\n    assert str(shadow.sm) == \"shadow-sm\"\n    assert str(shadow.md) == \"shadow-md\"\n    assert str(shadow.lg) == \"shadow-lg\"\n    assert str(shadow.xl) == \"shadow-xl\"\n    assert str(shadow._2xl) == \"shadow-2xl\"\n    assert str(shadow.none) == \"shadow-none\"\n    \n    # Test default shadow (no size)\n    assert str(shadow()) == \"shadow\"\n    \n    # Test with size parameter\n    assert str(shadow(\"sm\")) == \"shadow-sm\"\n    assert str(shadow(\"lg\")) == \"shadow-lg\"\n    assert str(shadow(\"none\")) == \"shadow-none\"\n\n# Run the tests\ntest_effects_shadow_size_examples()\n\n\n\nsource\n\n\n\n\n test_effects_shadow_arbitrary_examples ()\n\nTest shadow utilities with arbitrary and custom values.\n\n\nExported source\ndef test_effects_shadow_arbitrary_examples():\n    \"\"\"Test shadow utilities with arbitrary and custom values.\"\"\"\n    # Test arbitrary shadow values\n    assert str(shadow(\"10px 10px 5px gray\")) == \"shadow-[10px 10px 5px gray]\"\n    assert str(shadow(\"0 4px 6px rgba(0,0,0,0.1)\")) == \"shadow-[0 4px 6px rgba(0,0,0,0.1)]\"\n    assert str(shadow(\"inset 0 2px 4px rgba(0,0,0,0.06)\")) == \"shadow-[inset 0 2px 4px rgba(0,0,0,0.06)]\"\n    \n    # Test CSS custom properties\n    assert str(shadow(\"--custom-shadow\")) == \"shadow-(--custom-shadow)\"\n    assert str(shadow(\"--elevation-high\")) == \"shadow-(--elevation-high)\"\n\n# Run the tests  \ntest_effects_shadow_arbitrary_examples()\n\n\n\n\n\nTest the shadow color utilities:\n\nsource\n\n\n\n\n test_effects_shadow_color_examples ()\n\nTest shadow color utilities with various color values.\n\n\nExported source\ndef test_effects_shadow_color_examples():\n    \"\"\"Test shadow color utilities with various color values.\"\"\"\n    # Test all 22 Tailwind color families\n    assert str(shadow_color.red._500) == \"shadow-red-500\"\n    assert str(shadow_color.orange._500) == \"shadow-orange-500\"\n    assert str(shadow_color.amber._500) == \"shadow-amber-500\"\n    assert str(shadow_color.yellow._500) == \"shadow-yellow-500\"\n    assert str(shadow_color.lime._500) == \"shadow-lime-500\"\n    assert str(shadow_color.green._500) == \"shadow-green-500\"\n    assert str(shadow_color.emerald._500) == \"shadow-emerald-500\"\n    assert str(shadow_color.teal._500) == \"shadow-teal-500\"\n    assert str(shadow_color.cyan._500) == \"shadow-cyan-500\"\n    assert str(shadow_color.sky._500) == \"shadow-sky-500\"\n    assert str(shadow_color.blue._500) == \"shadow-blue-500\"\n    assert str(shadow_color.indigo._500) == \"shadow-indigo-500\"\n    assert str(shadow_color.violet._500) == \"shadow-violet-500\"\n    assert str(shadow_color.purple._500) == \"shadow-purple-500\"\n    assert str(shadow_color.fuchsia._500) == \"shadow-fuchsia-500\"\n    assert str(shadow_color.pink._500) == \"shadow-pink-500\"\n    assert str(shadow_color.rose._500) == \"shadow-rose-500\"\n    assert str(shadow_color.slate._500) == \"shadow-slate-500\"\n    assert str(shadow_color.gray._500) == \"shadow-gray-500\"\n    assert str(shadow_color.zinc._500) == \"shadow-zinc-500\"\n    assert str(shadow_color.neutral._500) == \"shadow-neutral-500\"\n    assert str(shadow_color.stone._500) == \"shadow-stone-500\"\n    \n    # Test different shades\n    assert str(shadow_color.blue._300) == \"shadow-blue-300\"\n    assert str(shadow_color.green._950) == \"shadow-green-950\"\n    \n    # Special colors\n    assert str(shadow_color.transparent) == \"shadow-transparent\"\n    assert str(shadow_color.black) == \"shadow-black\"\n    assert str(shadow_color.white) == \"shadow-white\"\n    assert str(shadow_color.current) == \"shadow-current\"\n    assert str(shadow_color.inherit) == \"shadow-inherit\"\n\n# Run the tests\ntest_effects_shadow_color_examples()\n\n\n\nsource\n\n\n\n\n test_effects_shadow_color_arbitrary_examples ()\n\nTest shadow color utilities with arbitrary values.\n\n\nExported source\ndef test_effects_shadow_color_arbitrary_examples():\n    \"\"\"Test shadow color utilities with arbitrary values.\"\"\"\n    # Test hex colors\n    assert str(shadow_color(\"#ff0000\")) == \"shadow-[#ff0000]\"\n    assert str(shadow_color(\"#123456\")) == \"shadow-[#123456]\"\n    \n    # Test RGB/RGBA colors\n    assert str(shadow_color(\"rgb(255, 0, 0)\")) == \"shadow-[rgb(255, 0, 0)]\"\n    assert str(shadow_color(\"rgba(0, 0, 0, 0.5)\")) == \"shadow-[rgba(0, 0, 0, 0.5)]\"\n    \n    # Test CSS custom properties\n    assert str(shadow_color(\"--shadow-color-primary\")) == \"shadow-(--shadow-color-primary)\"\n    assert str(shadow_color(\"--brand-shadow\")) == \"shadow-(--brand-shadow)\"\n\n# Run the tests\ntest_effects_shadow_color_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#inset-shadow",
    "href": "utilities/effects.html#inset-shadow",
    "title": "effects",
    "section": "Inset Shadow",
    "text": "Inset Shadow\nUtilities for controlling inset box shadows. These shadows appear inside the element rather than outside.\n\nInset Shadow Size\nDefine the inset shadow size configuration:\n\n\nExported source\n# Inset shadow size\nINSET_SHADOW_SIZE_CONFIG = ScaleConfig(\n    numeric=False,\n    decimals=False,\n    fractions=False,\n    named=[\n        NamedScale(\"none\", \"0\", \"inset 0 0 #0000\"),\n        NamedScale(\"2xs\", \"--inset-shadow-2xs\", \"inset 0 1px rgb(0 0 0 / 0.05)\"),\n        NamedScale(\"xs\", \"--inset-shadow-xs\", \"inset 0 1px 1px rgb(0 0 0 / 0.05)\"),\n        NamedScale(\"sm\", \"--inset-shadow-sm\", \"inset 0 2px 4px rgb(0 0 0 / 0.05)\"),\n    ],\n    special={},\n    negative=False\n)\n\ninset_shadow = ScaledFactory(\"inset-shadow\", INSET_SHADOW_SIZE_CONFIG, \"Inset box shadow utilities for adding inner depth to elements\") # Inset box shadow factory\n\n\n\n\nInset Shadow Color\nControl the color of inset shadows using the standard color palette:\n\n\nExported source\ninset_shadow_color = ColoredFactory(\"inset-shadow\", \"Inset shadow color utilities for customizing the color of inner box shadows\") # Create inset shadow color factory using the existing ColoredFactory\n\n\n\n\nTest Inset Shadow Utilities\nTest the inset shadow size utilities:\n\nsource\n\n\ntest_effects_inset_shadow_size_examples\n\n test_effects_inset_shadow_size_examples ()\n\nTest inset shadow size utilities.\n\n\nExported source\ndef test_effects_inset_shadow_size_examples():\n    \"\"\"Test inset shadow size utilities.\"\"\"\n    # Test all named sizes\n    assert str(inset_shadow._2xs) == \"inset-shadow-2xs\"\n    assert str(inset_shadow.xs) == \"inset-shadow-xs\"\n    assert str(inset_shadow.sm) == \"inset-shadow-sm\"\n    assert str(inset_shadow.none) == \"inset-shadow-none\"\n    \n    # Test default inset shadow (no default)\n    assert str(inset_shadow()) == \"inset-shadow\"\n    \n    # Test with size parameter\n    assert str(inset_shadow.xs) == \"inset-shadow-xs\"\n    assert str(inset_shadow._2xs) == \"inset-shadow-2xs\"\n    assert str(inset_shadow.none) == \"inset-shadow-none\"\n\n# Run the tests\ntest_effects_inset_shadow_size_examples()\n\n\n\nsource\n\n\ntest_effects_inset_shadow_arbitrary_examples\n\n test_effects_inset_shadow_arbitrary_examples ()\n\nTest inset shadow utilities with arbitrary and custom values.\n\n\nExported source\ndef test_effects_inset_shadow_arbitrary_examples():\n    \"\"\"Test inset shadow utilities with arbitrary and custom values.\"\"\"\n    # Test arbitrary inset shadow values\n    assert str(inset_shadow(\"inset 0 2px 4px rgba(0,0,0,0.06)\")) == \"inset-shadow-[inset 0 2px 4px rgba(0,0,0,0.06)]\"\n    assert str(inset_shadow(\"inset 0 1px 3px rgba(0,0,0,0.12)\")) == \"inset-shadow-[inset 0 1px 3px rgba(0,0,0,0.12)]\"\n    \n    # Test CSS custom properties\n    assert str(inset_shadow(\"--custom-inset-shadow\")) == \"inset-shadow-(--custom-inset-shadow)\"\n    assert str(inset_shadow(\"--inner-glow\")) == \"inset-shadow-(--inner-glow)\"\n\n# Run the tests  \ntest_effects_inset_shadow_arbitrary_examples()\n\n\n\n\nTest Inset Shadow Color Utilities\nTest the inset shadow color utilities:\n\nsource\n\n\ntest_effects_inset_shadow_color_examples\n\n test_effects_inset_shadow_color_examples ()\n\nTest inset shadow color utilities with various color values.\n\n\nExported source\ndef test_effects_inset_shadow_color_examples():\n    \"\"\"Test inset shadow color utilities with various color values.\"\"\"\n    # Test standard color families\n    assert str(inset_shadow_color.red._500) == \"inset-shadow-red-500\"\n    assert str(inset_shadow_color.blue._300) == \"inset-shadow-blue-300\"\n    assert str(inset_shadow_color.green._950) == \"inset-shadow-green-950\"\n    assert str(inset_shadow_color.purple._600) == \"inset-shadow-purple-600\"\n\n    # Test all 22 Tailwind color families\n    assert str(inset_shadow_color.red._500) == \"inset-shadow-red-500\"\n    assert str(inset_shadow_color.orange._500) == \"inset-shadow-orange-500\"\n    assert str(inset_shadow_color.amber._500) == \"inset-shadow-amber-500\"\n    assert str(inset_shadow_color.yellow._500) == \"inset-shadow-yellow-500\"\n    assert str(inset_shadow_color.lime._500) == \"inset-shadow-lime-500\"\n    assert str(inset_shadow_color.green._500) == \"inset-shadow-green-500\"\n    assert str(inset_shadow_color.emerald._500) == \"inset-shadow-emerald-500\"\n    assert str(inset_shadow_color.teal._500) == \"inset-shadow-teal-500\"\n    assert str(inset_shadow_color.cyan._500) == \"inset-shadow-cyan-500\"\n    assert str(inset_shadow_color.sky._500) == \"inset-shadow-sky-500\"\n    assert str(inset_shadow_color.blue._500) == \"inset-shadow-blue-500\"\n    assert str(inset_shadow_color.indigo._500) == \"inset-shadow-indigo-500\"\n    assert str(inset_shadow_color.violet._500) == \"inset-shadow-violet-500\"\n    assert str(inset_shadow_color.purple._500) == \"inset-shadow-purple-500\"\n    assert str(inset_shadow_color.fuchsia._500) == \"inset-shadow-fuchsia-500\"\n    assert str(inset_shadow_color.pink._500) == \"inset-shadow-pink-500\"\n    assert str(inset_shadow_color.rose._500) == \"inset-shadow-rose-500\"\n    assert str(inset_shadow_color.slate._500) == \"inset-shadow-slate-500\"\n    assert str(inset_shadow_color.gray._500) == \"inset-shadow-gray-500\"\n    assert str(inset_shadow_color.zinc._500) == \"inset-shadow-zinc-500\"\n    assert str(inset_shadow_color.neutral._500) == \"inset-shadow-neutral-500\"\n    assert str(inset_shadow_color.stone._500) == \"inset-shadow-stone-500\"\n    \n    # Special colors\n    assert str(inset_shadow_color.transparent) == \"inset-shadow-transparent\"\n    assert str(inset_shadow_color.black) == \"inset-shadow-black\"\n    assert str(inset_shadow_color.white) == \"inset-shadow-white\"\n    assert str(inset_shadow_color.current) == \"inset-shadow-current\"\n    assert str(inset_shadow_color.inherit) == \"inset-shadow-inherit\"\n    \n    # Test with arbitrary colors\n    assert str(inset_shadow_color(\"#ff0000\")) == \"inset-shadow-[#ff0000]\"\n    assert str(inset_shadow_color(\"rgba(0, 0, 0, 0.5)\")) == \"inset-shadow-[rgba(0, 0, 0, 0.5)]\"\n    \n    # Test CSS custom properties\n    assert str(inset_shadow_color(\"--inset-shadow-primary\")) == \"inset-shadow-(--inset-shadow-primary)\"\n\n# Run the tests\ntest_effects_inset_shadow_color_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#ring",
    "href": "utilities/effects.html#ring",
    "title": "effects",
    "section": "Ring",
    "text": "Ring\nUtilities for creating outline rings around elements. These are commonly used for focus states.\n\nRing Width\nDefine the ring width configuration:\n\n\nExported source\n# Ring width configuration\nRING_WIDTH_CONFIG = ScaleConfig(\n    numeric=True,  # Support numeric widths (0, 1, 2, 4, 8, etc.)\n    decimals=False,\n    fractions=False,\n    named=[],\n    special={},\n    negative=False\n)\n\nring = ScaledFactory(\"ring\", RING_WIDTH_CONFIG, \"Ring (outline) utilities for adding focus rings and outlines to elements\") # Ring width factory\n\n\n\n\nRing Color\nControl the color of rings using the standard color palette:\n\n\nExported source\nring_color = ColoredFactory(\"ring\", \"Ring color utilities for customizing the color of focus rings and outlines\") # Create ring color factory using the existing ColoredFactory\n\n\n\n\nTest Ring Utilities\nTest the ring width utilities:\n\nsource\n\n\ntest_effects_ring_width_examples\n\n test_effects_ring_width_examples ()\n\nTest ring width utilities.\n\n\nExported source\ndef test_effects_ring_width_examples():\n    \"\"\"Test ring width utilities.\"\"\"\n    # Test default ring\n    assert str(ring()) == \"ring\"\n    \n    # Test common widths\n    assert str(ring(0)) == \"ring-0\"\n    assert str(ring(1)) == \"ring-1\"\n    assert str(ring(2)) == \"ring-2\"\n    assert str(ring(4)) == \"ring-4\"\n    assert str(ring(8)) == \"ring-8\"\n    \n    # Test with width parameter\n    assert str(ring(0)) == \"ring-0\"\n    assert str(ring(2)) == \"ring-2\"\n    assert str(ring(4)) == \"ring-4\"\n    assert str(ring(16)) == \"ring-16\"\n    \n    # Test arbitrary values\n    assert str(ring(\"3px\")) == \"ring-[3px]\"\n    assert str(ring(\"0.5rem\")) == \"ring-[0.5rem]\"\n    \n    # Test CSS custom properties\n    assert str(ring(\"--ring-width\")) == \"ring-(--ring-width)\"\n    assert str(ring(\"--focus-ring\")) == \"ring-(--focus-ring)\"\n\n# Run the tests\ntest_effects_ring_width_examples()\n\n\n\n\nTest Ring Color Utilities\nTest the ring color utilities:\n\nsource\n\n\ntest_effects_ring_color_examples\n\n test_effects_ring_color_examples ()\n\nTest ring color utilities with various color values.\n\n\nExported source\ndef test_effects_ring_color_examples():\n    \"\"\"Test ring color utilities with various color values.\"\"\"\n    # Test standard color families\n    assert str(ring_color.red._500) == \"ring-red-500\"\n    assert str(ring_color.blue._300) == \"ring-blue-300\"\n    assert str(ring_color.green._950) == \"ring-green-950\"\n    assert str(ring_color.purple._600) == \"ring-purple-600\"\n\n    # Test all 22 Tailwind color families\n    assert str(ring_color.red._500) == \"ring-red-500\"\n    assert str(ring_color.orange._500) == \"ring-orange-500\"\n    assert str(ring_color.amber._500) == \"ring-amber-500\"\n    assert str(ring_color.yellow._500) == \"ring-yellow-500\"\n    assert str(ring_color.lime._500) == \"ring-lime-500\"\n    assert str(ring_color.green._500) == \"ring-green-500\"\n    assert str(ring_color.emerald._500) == \"ring-emerald-500\"\n    assert str(ring_color.teal._500) == \"ring-teal-500\"\n    assert str(ring_color.cyan._500) == \"ring-cyan-500\"\n    assert str(ring_color.sky._500) == \"ring-sky-500\"\n    assert str(ring_color.blue._500) == \"ring-blue-500\"\n    assert str(ring_color.indigo._500) == \"ring-indigo-500\"\n    assert str(ring_color.violet._500) == \"ring-violet-500\"\n    assert str(ring_color.purple._500) == \"ring-purple-500\"\n    assert str(ring_color.fuchsia._500) == \"ring-fuchsia-500\"\n    assert str(ring_color.pink._500) == \"ring-pink-500\"\n    assert str(ring_color.rose._500) == \"ring-rose-500\"\n    assert str(ring_color.slate._500) == \"ring-slate-500\"\n    assert str(ring_color.gray._500) == \"ring-gray-500\"\n    assert str(ring_color.zinc._500) == \"ring-zinc-500\"\n    assert str(ring_color.neutral._500) == \"ring-neutral-500\"\n    assert str(ring_color.stone._500) == \"ring-stone-500\"\n    \n    # Special colors\n    assert str(ring_color.transparent) == \"ring-transparent\"\n    assert str(ring_color.black) == \"ring-black\"\n    assert str(ring_color.white) == \"ring-white\"\n    assert str(ring_color.current) == \"ring-current\"\n    assert str(ring_color.inherit) == \"ring-inherit\"\n    \n    # Test with arbitrary colors\n    assert str(ring_color(\"#ff0000\")) == \"ring-[#ff0000]\"\n    assert str(ring_color(\"rgba(0, 0, 255, 0.5)\")) == \"ring-[rgba(0, 0, 255, 0.5)]\"\n    \n    # Test CSS custom properties\n    assert str(ring_color(\"--ring-primary\")) == \"ring-(--ring-primary)\"\n\n# Run the tests\ntest_effects_ring_color_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#inset-ring",
    "href": "utilities/effects.html#inset-ring",
    "title": "effects",
    "section": "Inset Ring",
    "text": "Inset Ring\nUtilities for creating inset (inner) outline rings. These appear inside the element rather than outside.\n\nInset Ring Width\nDefine the inset ring width configuration:\n\n\nExported source\n# Inset ring width configuration (same as ring width)\nINSET_RING_WIDTH_CONFIG = ScaleConfig(\n    numeric=True,  # Support numeric widths (0, 1, 2, 4, 8, etc.)\n    decimals=False,\n    fractions=False,\n    named=[],\n    special={},\n    negative=False\n)\n\ninset_ring = ScaledFactory(\"inset-ring\", INSET_RING_WIDTH_CONFIG, \"Inset ring (inner outline) utilities for adding inner focus rings and outlines to elements\") # Inset ring width factory\n\n\n\n\nInset Ring Color\nControl the color of inset rings using the standard color palette:\n\n\nExported source\ninset_ring_color = ColoredFactory(\"inset-ring\", \"Inset ring color utilities for customizing the color of inner focus rings and outlines\") # Create inset ring color factory using the existing ColoredFactory\n\n\n\n\nTest Inset Ring Utilities\nTest the inset ring width utilities:\n\nsource\n\n\ntest_effects_inset_ring_width_examples\n\n test_effects_inset_ring_width_examples ()\n\nTest inset ring width utilities.\n\n\nExported source\ndef test_effects_inset_ring_width_examples():\n    \"\"\"Test inset ring width utilities.\"\"\"\n    # Test default inset ring\n    assert str(inset_ring()) == \"inset-ring\"\n    \n    # Test common widths\n    assert str(inset_ring(0)) == \"inset-ring-0\"\n    assert str(inset_ring(1)) == \"inset-ring-1\"\n    assert str(inset_ring(2)) == \"inset-ring-2\"\n    assert str(inset_ring(4)) == \"inset-ring-4\"\n    assert str(inset_ring(8)) == \"inset-ring-8\"\n    \n    # Test with width parameter\n    assert str(inset_ring(0)) == \"inset-ring-0\"\n    assert str(inset_ring(2)) == \"inset-ring-2\"\n    assert str(inset_ring(4)) == \"inset-ring-4\"\n    assert str(inset_ring(16)) == \"inset-ring-16\"\n    \n    # Test arbitrary values\n    assert str(inset_ring(\"3px\")) == \"inset-ring-[3px]\"\n    assert str(inset_ring(\"0.25rem\")) == \"inset-ring-[0.25rem]\"\n    \n    # Test CSS custom properties\n    assert str(inset_ring(\"--inset-ring-width\")) == \"inset-ring-(--inset-ring-width)\"\n    assert str(inset_ring(\"--inner-focus-ring\")) == \"inset-ring-(--inner-focus-ring)\"\n\n# Run the tests\ntest_effects_inset_ring_width_examples()\n\n\n\n\nTest Inset Ring Color Utilities\nTest the inset ring color utilities:\n\nsource\n\n\ntest_effects_inset_ring_color_examples\n\n test_effects_inset_ring_color_examples ()\n\nTest inset ring color utilities with various color values.\n\n\nExported source\ndef test_effects_inset_ring_color_examples():\n    \"\"\"Test inset ring color utilities with various color values.\"\"\"\n    # Test standard color families\n    assert str(inset_ring_color.red._500) == \"inset-ring-red-500\"\n    assert str(inset_ring_color.blue._300) == \"inset-ring-blue-300\"\n    assert str(inset_ring_color.green._950) == \"inset-ring-green-950\"\n    assert str(inset_ring_color.purple._600) == \"inset-ring-purple-600\"\n\n    # Test all 22 Tailwind color families\n    assert str(inset_ring_color.red._500) == \"inset-ring-red-500\"\n    assert str(inset_ring_color.orange._500) == \"inset-ring-orange-500\"\n    assert str(inset_ring_color.amber._500) == \"inset-ring-amber-500\"\n    assert str(inset_ring_color.yellow._500) == \"inset-ring-yellow-500\"\n    assert str(inset_ring_color.lime._500) == \"inset-ring-lime-500\"\n    assert str(inset_ring_color.green._500) == \"inset-ring-green-500\"\n    assert str(inset_ring_color.emerald._500) == \"inset-ring-emerald-500\"\n    assert str(inset_ring_color.teal._500) == \"inset-ring-teal-500\"\n    assert str(inset_ring_color.cyan._500) == \"inset-ring-cyan-500\"\n    assert str(inset_ring_color.sky._500) == \"inset-ring-sky-500\"\n    assert str(inset_ring_color.blue._500) == \"inset-ring-blue-500\"\n    assert str(inset_ring_color.indigo._500) == \"inset-ring-indigo-500\"\n    assert str(inset_ring_color.violet._500) == \"inset-ring-violet-500\"\n    assert str(inset_ring_color.purple._500) == \"inset-ring-purple-500\"\n    assert str(inset_ring_color.fuchsia._500) == \"inset-ring-fuchsia-500\"\n    assert str(inset_ring_color.pink._500) == \"inset-ring-pink-500\"\n    assert str(inset_ring_color.rose._500) == \"inset-ring-rose-500\"\n    assert str(inset_ring_color.slate._500) == \"inset-ring-slate-500\"\n    assert str(inset_ring_color.gray._500) == \"inset-ring-gray-500\"\n    assert str(inset_ring_color.zinc._500) == \"inset-ring-zinc-500\"\n    assert str(inset_ring_color.neutral._500) == \"inset-ring-neutral-500\"\n    assert str(inset_ring_color.stone._500) == \"inset-ring-stone-500\"\n    \n    # Special colors\n    assert str(inset_ring_color.transparent) == \"inset-ring-transparent\"\n    assert str(inset_ring_color.black) == \"inset-ring-black\"\n    assert str(inset_ring_color.white) == \"inset-ring-white\"\n    assert str(inset_ring_color.current) == \"inset-ring-current\"\n    assert str(inset_ring_color.inherit) == \"inset-ring-inherit\"\n    \n    # Test with arbitrary colors\n    assert str(inset_ring_color(\"#0000ff\")) == \"inset-ring-[#0000ff]\"\n    assert str(inset_ring_color(\"rgba(255, 0, 0, 0.8)\")) == \"inset-ring-[rgba(255, 0, 0, 0.8)]\"\n    \n    # Test CSS custom properties\n    assert str(inset_ring_color(\"--inset-ring-primary\")) == \"inset-ring-(--inset-ring-primary)\"\n\n# Run the tests\ntest_effects_inset_ring_color_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#text-shadow",
    "href": "utilities/effects.html#text-shadow",
    "title": "effects",
    "section": "Text Shadow",
    "text": "Text Shadow\nUtilities for controlling the shadow of a text element. Text shadows in Tailwind CSS v4 support both shadow size and shadow color customization.\n\nText Shadow Size\nDefine the text shadow size configuration:\n\n\nExported source\n# Text shadow size\nTEXT_SHADOW_SIZE_CONFIG = ScaleConfig(\n    numeric=False,\n    decimals=False,\n    fractions=False,\n    named=[\n        NamedScale(\"none\", \"0\", \"none\"),\n        NamedScale(\"2xs\", \"--text-shadow-2xs\", \"0px 1px 0px rgb(0 0 0 / 0.15)\"),\n        NamedScale(\"xs\", \"--text-shadow-xs\", \"0px 1px 1px rgb(0 0 0 / 0.2)\"),\n        NamedScale(\"sm\", \"--text-shadow-sm\", \"0px 1px 0px rgb(0 0 0 / 0.075), 0px 1px 1px rgb(0 0 0 / 0.075), 0px 2px 2px rgb(0 0 0 / 0.075)\"),\n        NamedScale(\"md\", \"--text-shadow-md\", \"0px 1px 1px rgb(0 0 0 / 0.1), 0px 1px 2px rgb(0 0 0 / 0.1), 0px 2px 4px rgb(0 0 0 / 0.1)\"),\n        NamedScale(\"lg\", \"--text-shadow-lg\", \"0px 1px 2px rgb(0 0 0 / 0.1), 0px 3px 2px rgb(0 0 0 / 0.1), 0px 4px 8px rgb(0 0 0 / 0.1)\"),\n    ],\n    special={},\n    negative=False\n)\n\ntext_shadow = ScaledFactory(\"text-shadow\", TEXT_SHADOW_SIZE_CONFIG, \"Text shadow utilities for adding shadows to text\") # Text shadow factory\n\n\n\n\nText Shadow Color\nControl the color of text shadows using the standard color palette:\n\n\nExported source\ntext_shadow_color = ColoredFactory(\"text-shadow\", \"Text shadow color utilities for customizing the color of text shadows\") # Create text shadow color factory using the existing ColoredFactory\n\n\n\n\nTest Text Shadow Utilities\nTest the text shadow size utilities:\n\nsource\n\n\ntest_effects_text_shadow_size_examples\n\n test_effects_text_shadow_size_examples ()\n\nTest text shadow size utilities.\n\n\nExported source\ndef test_effects_text_shadow_size_examples():\n    \"\"\"Test text shadow size utilities.\"\"\"\n    # Test all named sizes\n    assert str(text_shadow._2xs) == \"text-shadow-2xs\"\n    assert str(text_shadow.xs) == \"text-shadow-xs\"\n    assert str(text_shadow.sm) == \"text-shadow-sm\"\n    assert str(text_shadow.md) == \"text-shadow-md\"\n    assert str(text_shadow.lg) == \"text-shadow-lg\"\n    assert str(text_shadow.none) == \"text-shadow-none\"\n    \n    # Test default text shadow (no size)\n    assert str(text_shadow()) == \"text-shadow\"\n    \n    # Test with size parameter\n    assert str(text_shadow(\"sm\")) == \"text-shadow-sm\"\n    assert str(text_shadow(\"lg\")) == \"text-shadow-lg\"\n    assert str(text_shadow(\"none\")) == \"text-shadow-none\"\n\n# Run the tests\ntest_effects_text_shadow_size_examples()\n\n\n\nsource\n\n\ntest_effects_text_shadow_arbitrary_examples\n\n test_effects_text_shadow_arbitrary_examples ()\n\nTest text shadow utilities with arbitrary and custom values.\n\n\nExported source\ndef test_effects_text_shadow_arbitrary_examples():\n    \"\"\"Test text shadow utilities with arbitrary and custom values.\"\"\"\n    # Test arbitrary text shadow values\n    assert str(text_shadow(\"2px 2px 4px rgba(0,0,0,0.5)\")) == \"text-shadow-[2px 2px 4px rgba(0,0,0,0.5)]\"\n    assert str(text_shadow(\"1px 1px 2px black\")) == \"text-shadow-[1px 1px 2px black]\"\n    assert str(text_shadow(\"0 0 10px #ff0000\")) == \"text-shadow-[0 0 10px #ff0000]\"\n    \n    # Test CSS custom properties\n    assert str(text_shadow(\"--custom-text-shadow\")) == \"text-shadow-(--custom-text-shadow)\"\n    assert str(text_shadow(\"--heading-shadow\")) == \"text-shadow-(--heading-shadow)\"\n\n# Run the tests  \ntest_effects_text_shadow_arbitrary_examples()\n\n\n\n\nTest Text Shadow Color Utilities\nTest the text shadow color utilities:\n\nsource\n\n\ntest_effects_text_shadow_color_examples\n\n test_effects_text_shadow_color_examples ()\n\nTest text shadow color utilities with various color values.\n\n\nExported source\ndef test_effects_text_shadow_color_examples():\n    \"\"\"Test text shadow color utilities with various color values.\"\"\"\n    # Test all 22 Tailwind color families\n    assert str(text_shadow_color.red._500) == \"text-shadow-red-500\"\n    assert str(text_shadow_color.orange._500) == \"text-shadow-orange-500\"\n    assert str(text_shadow_color.amber._500) == \"text-shadow-amber-500\"\n    assert str(text_shadow_color.yellow._500) == \"text-shadow-yellow-500\"\n    assert str(text_shadow_color.lime._500) == \"text-shadow-lime-500\"\n    assert str(text_shadow_color.green._500) == \"text-shadow-green-500\"\n    assert str(text_shadow_color.emerald._500) == \"text-shadow-emerald-500\"\n    assert str(text_shadow_color.teal._500) == \"text-shadow-teal-500\"\n    assert str(text_shadow_color.cyan._500) == \"text-shadow-cyan-500\"\n    assert str(text_shadow_color.sky._500) == \"text-shadow-sky-500\"\n    assert str(text_shadow_color.blue._500) == \"text-shadow-blue-500\"\n    assert str(text_shadow_color.indigo._500) == \"text-shadow-indigo-500\"\n    assert str(text_shadow_color.violet._500) == \"text-shadow-violet-500\"\n    assert str(text_shadow_color.purple._500) == \"text-shadow-purple-500\"\n    assert str(text_shadow_color.fuchsia._500) == \"text-shadow-fuchsia-500\"\n    assert str(text_shadow_color.pink._500) == \"text-shadow-pink-500\"\n    assert str(text_shadow_color.rose._500) == \"text-shadow-rose-500\"\n    assert str(text_shadow_color.slate._500) == \"text-shadow-slate-500\"\n    assert str(text_shadow_color.gray._500) == \"text-shadow-gray-500\"\n    assert str(text_shadow_color.zinc._500) == \"text-shadow-zinc-500\"\n    assert str(text_shadow_color.neutral._500) == \"text-shadow-neutral-500\"\n    assert str(text_shadow_color.stone._500) == \"text-shadow-stone-500\"\n    \n    # Test different shades\n    assert str(text_shadow_color.blue._300) == \"text-shadow-blue-300\"\n    assert str(text_shadow_color.green._950) == \"text-shadow-green-950\"\n    \n    # Special colors\n    assert str(text_shadow_color.transparent) == \"text-shadow-transparent\"\n    assert str(text_shadow_color.black) == \"text-shadow-black\"\n    assert str(text_shadow_color.white) == \"text-shadow-white\"\n    assert str(text_shadow_color.current) == \"text-shadow-current\"\n    assert str(text_shadow_color.inherit) == \"text-shadow-inherit\"\n\n# Run the tests\ntest_effects_text_shadow_color_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#opacity",
    "href": "utilities/effects.html#opacity",
    "title": "effects",
    "section": "Opacity",
    "text": "Opacity\nUtilities for controlling the opacity of an element. Opacity values range from 0 (fully transparent) to 100 (fully opaque).\n\n\nExported source\n# Opacity configuration - support percentage values (0-100)\nOPACITY_CONFIG = ScaleConfig(\n    numeric=True,  # Support numeric values 0-100\n    decimals=False,\n    fractions=False,\n    named=[],\n    special={},\n    negative=False\n)\n\nopacity = ScaledFactory(\"opacity\", OPACITY_CONFIG, \"Opacity utilities for controlling element transparency\") # Opacity factory\n\n\n\nTest Opacity Utilities\nTest the opacity utilities:\n\nsource\n\n\ntest_effects_opacity_examples\n\n test_effects_opacity_examples ()\n\nTest opacity utilities with various values.\n\n\nExported source\ndef test_effects_opacity_examples():\n    \"\"\"Test opacity utilities with various values.\"\"\"\n    # Test common opacity values\n    assert str(opacity(0)) == \"opacity-0\"\n    assert str(opacity(5)) == \"opacity-5\"\n    assert str(opacity(10)) == \"opacity-10\"\n    assert str(opacity(20)) == \"opacity-20\"\n    assert str(opacity(25)) == \"opacity-25\"\n    assert str(opacity(30)) == \"opacity-30\"\n    assert str(opacity(40)) == \"opacity-40\"\n    assert str(opacity(50)) == \"opacity-50\"\n    assert str(opacity(60)) == \"opacity-60\"\n    assert str(opacity(70)) == \"opacity-70\"\n    assert str(opacity(75)) == \"opacity-75\"\n    assert str(opacity(80)) == \"opacity-80\"\n    assert str(opacity(90)) == \"opacity-90\"\n    assert str(opacity(95)) == \"opacity-95\"\n    assert str(opacity(100)) == \"opacity-100\"\n    \n    # Test arbitrary decimal values\n    assert str(opacity(\"0.87\")) == \"opacity-[0.87]\"\n    assert str(opacity(\"0.5\")) == \"opacity-[0.5]\"\n    assert str(opacity(\"0.333\")) == \"opacity-[0.333]\"\n    \n    # Test CSS custom properties\n    assert str(opacity(\"--custom-opacity\")) == \"opacity-(--custom-opacity)\"\n    assert str(opacity(\"--fade-amount\")) == \"opacity-(--fade-amount)\"\n\n# Run the tests\ntest_effects_opacity_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#mix-blend-mode",
    "href": "utilities/effects.html#mix-blend-mode",
    "title": "effects",
    "section": "Mix Blend Mode",
    "text": "Mix Blend Mode\nUtilities for controlling how an element should blend with the background.\n\nsource\n\ntest_effects_mix_blend_examples\n\n test_effects_mix_blend_examples ()\n\nTest mix blend mode utilities.\n\n\nExported source\nmix_blend = SimpleFactory(\n    {\n        \"normal\": \"mix-blend-normal\",\n        \"multiply\": \"mix-blend-multiply\",\n        \"screen\": \"mix-blend-screen\",\n        \"overlay\": \"mix-blend-overlay\",\n        \"darken\": \"mix-blend-darken\",\n        \"lighten\": \"mix-blend-lighten\",\n        \"color_dodge\": \"mix-blend-color-dodge\",\n        \"color_burn\": \"mix-blend-color-burn\",\n        \"hard_light\": \"mix-blend-hard-light\",\n        \"soft_light\": \"mix-blend-soft-light\",\n        \"difference\": \"mix-blend-difference\",\n        \"exclusion\": \"mix-blend-exclusion\",\n        \"hue\": \"mix-blend-hue\",\n        \"saturation\": \"mix-blend-saturation\",\n        \"color\": \"mix-blend-color\",\n        \"luminosity\": \"mix-blend-luminosity\",\n        \"plus_darker\": \"mix-blend-plus-darker\",\n        \"plus_lighter\": \"mix-blend-plus-lighter\"\n    },\n    \"Mix blend mode utilities for controlling how elements blend with their background\"\n) # Mix blend mode factory\n\n\n\n\nExported source\ndef test_effects_mix_blend_examples():\n    \"\"\"Test mix blend mode utilities.\"\"\"\n    assert str(mix_blend.normal) == \"mix-blend-normal\"\n    assert str(mix_blend.multiply) == \"mix-blend-multiply\"\n    assert str(mix_blend.screen) == \"mix-blend-screen\"\n    assert str(mix_blend.overlay) == \"mix-blend-overlay\"\n    assert str(mix_blend.darken) == \"mix-blend-darken\"\n    assert str(mix_blend.lighten) == \"mix-blend-lighten\"\n    assert str(mix_blend.color_dodge) == \"mix-blend-color-dodge\"\n    assert str(mix_blend.color_burn) == \"mix-blend-color-burn\"\n    assert str(mix_blend.hard_light) == \"mix-blend-hard-light\"\n    assert str(mix_blend.soft_light) == \"mix-blend-soft-light\"\n    assert str(mix_blend.difference) == \"mix-blend-difference\"\n    assert str(mix_blend.exclusion) == \"mix-blend-exclusion\"\n    assert str(mix_blend.hue) == \"mix-blend-hue\"\n    assert str(mix_blend.saturation) == \"mix-blend-saturation\"\n    assert str(mix_blend.color) == \"mix-blend-color\"\n    assert str(mix_blend.luminosity) == \"mix-blend-luminosity\"\n    assert str(mix_blend.plus_darker) == \"mix-blend-plus-darker\"\n    assert str(mix_blend.plus_lighter) == \"mix-blend-plus-lighter\"\n\n# Run the tests\ntest_effects_mix_blend_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#background-blend-mode",
    "href": "utilities/effects.html#background-blend-mode",
    "title": "effects",
    "section": "Background Blend Mode",
    "text": "Background Blend Mode\nUtilities for controlling how an element’s background image should blend with its background color.\n\nsource\n\ntest_effects_bg_blend_examples\n\n test_effects_bg_blend_examples ()\n\nTest background blend mode utilities.\n\n\nExported source\nbg_blend = SimpleFactory(\n    {\n        \"normal\": \"bg-blend-normal\",\n        \"multiply\": \"bg-blend-multiply\",\n        \"screen\": \"bg-blend-screen\",\n        \"overlay\": \"bg-blend-overlay\",\n        \"darken\": \"bg-blend-darken\",\n        \"lighten\": \"bg-blend-lighten\",\n        \"color_dodge\": \"bg-blend-color-dodge\",\n        \"color_burn\": \"bg-blend-color-burn\",\n        \"hard_light\": \"bg-blend-hard-light\",\n        \"soft_light\": \"bg-blend-soft-light\",\n        \"difference\": \"bg-blend-difference\",\n        \"exclusion\": \"bg-blend-exclusion\",\n        \"hue\": \"bg-blend-hue\",\n        \"saturation\": \"bg-blend-saturation\",\n        \"color\": \"bg-blend-color\",\n        \"luminosity\": \"bg-blend-luminosity\"\n    },\n    \"Background blend mode utilities for controlling how background images blend with background colors\"\n) # Background blend mode factory\n\n\n\n\nExported source\ndef test_effects_bg_blend_examples():\n    \"\"\"Test background blend mode utilities.\"\"\"\n    assert str(bg_blend.normal) == \"bg-blend-normal\"\n    assert str(bg_blend.multiply) == \"bg-blend-multiply\"\n    assert str(bg_blend.screen) == \"bg-blend-screen\"\n    assert str(bg_blend.overlay) == \"bg-blend-overlay\"\n    assert str(bg_blend.darken) == \"bg-blend-darken\"\n    assert str(bg_blend.lighten) == \"bg-blend-lighten\"\n    assert str(bg_blend.color_dodge) == \"bg-blend-color-dodge\"\n    assert str(bg_blend.color_burn) == \"bg-blend-color-burn\"\n    assert str(bg_blend.hard_light) == \"bg-blend-hard-light\"\n    assert str(bg_blend.soft_light) == \"bg-blend-soft-light\"\n    assert str(bg_blend.difference) == \"bg-blend-difference\"\n    assert str(bg_blend.exclusion) == \"bg-blend-exclusion\"\n    assert str(bg_blend.hue) == \"bg-blend-hue\"\n    assert str(bg_blend.saturation) == \"bg-blend-saturation\"\n    assert str(bg_blend.color) == \"bg-blend-color\"\n    assert str(bg_blend.luminosity) == \"bg-blend-luminosity\"\n\n# Run the tests\ntest_effects_bg_blend_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#mask-utilities",
    "href": "utilities/effects.html#mask-utilities",
    "title": "effects",
    "section": "Mask Utilities",
    "text": "Mask Utilities\nUtilities for controlling CSS mask properties. Masks allow you to hide portions of an element by masking it with an image or gradient.\n\nMask Clip\nUtilities for controlling the bounding box of an element’s mask:\n\nsource\n\n\ntest_effects_mask_clip_examples\n\n test_effects_mask_clip_examples ()\n\nTest mask clip utilities.\n\n\nExported source\nmask_clip = SimpleFactory(\n    {\n        \"border\": \"mask-clip-border\",\n        \"padding\": \"mask-clip-padding\",\n        \"content\": \"mask-clip-content\",\n        \"fill\": \"mask-clip-fill\",\n        \"stroke\": \"mask-clip-stroke\",\n        \"view\": \"mask-clip-view\",\n        \"no_clip\": \"mask-no-clip\"\n    },\n    \"Mask clip utilities for controlling the bounding box of an element's mask\"\n) # Mask clip factory\n\n\n\n\nExported source\ndef test_effects_mask_clip_examples():\n    \"\"\"Test mask clip utilities.\"\"\"\n    assert str(mask_clip.border) == \"mask-clip-border\"\n    assert str(mask_clip.padding) == \"mask-clip-padding\"\n    assert str(mask_clip.content) == \"mask-clip-content\"\n    assert str(mask_clip.fill) == \"mask-clip-fill\"\n    assert str(mask_clip.stroke) == \"mask-clip-stroke\"\n    assert str(mask_clip.view) == \"mask-clip-view\"\n    assert str(mask_clip.no_clip) == \"mask-no-clip\"\n\n# Run the tests\ntest_effects_mask_clip_examples()\n\n\n\n\nMask Composite\nUtilities for controlling how multiple masks are combined together:\n\nsource\n\n\ntest_effects_mask_composite_examples\n\n test_effects_mask_composite_examples ()\n\nTest mask composite utilities.\n\n\nExported source\nmask_composite = SimpleFactory(\n    {\n        \"add\": \"mask-add\",\n        \"subtract\": \"mask-subtract\",\n        \"intersect\": \"mask-intersect\",\n        \"exclude\": \"mask-exclude\"\n    },\n    \"Mask composite utilities for controlling how multiple masks are combined\"\n) # Mask composite factory\n\n\n\n\nExported source\ndef test_effects_mask_composite_examples():\n    \"\"\"Test mask composite utilities.\"\"\"\n    assert str(mask_composite.add) == \"mask-add\"\n    assert str(mask_composite.subtract) == \"mask-subtract\"\n    assert str(mask_composite.intersect) == \"mask-intersect\"\n    assert str(mask_composite.exclude) == \"mask-exclude\"\n\n# Run the tests\ntest_effects_mask_composite_examples()\n\n\n\n\nMask Image\nUtilities for controlling an element’s mask image. Masks allow you to create complex shapes and effects by using images or gradients to selectively show or hide parts of an element.\n\nBasic Mask Image\nSupport for basic mask image utilities including mask-none and arbitrary values:\n\nsource\n\n\n\nMaskImageUtility\n\n MaskImageUtility (value:Optional[str]=None)\n\nUtility class for mask images.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalue\nOptional\nNone\nMask image value (none, custom property, or arbitrary)\n\n\n\n\nsource\n\n\nMaskImageFactory\n\n MaskImageFactory (doc:Optional[str]=None)\n\nFactory for basic mask image utilities.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndoc\nOptional\nNone\nDocumentation\n\n\n\n\nLinear Gradient Masks\nCreate linear gradient masks with angle support:\n\nsource\n\n\n\nMaskLinearUtility\n\n MaskLinearUtility (angle:Union[int,str,NoneType]=None,\n                    negative:bool=False)\n\nUtility class for linear gradient masks with angle support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nangle\nUnion\nNone\nAngle in degrees or custom value\n\n\nnegative\nbool\nFalse\nWhether to negate the angle\n\n\n\n\nsource\n\n\nMaskLinearFactory\n\n MaskLinearFactory (doc:Optional[str]=None)\n\nFactory for linear gradient mask utilities with angle support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndoc\nOptional\nNone\nDocumentation\n\n\n\n\n\nExported source\nmask_linear = MaskLinearFactory(\"Linear gradient mask utilities for creating gradient-based masks\") # Create the linear gradient mask factory instance\n\n\n\nDirectional Linear Gradient Masks\nCreate directional linear gradient masks with from/to positioning:\n\nsource\n\n\n\nMaskDirectionalUtility\n\n MaskDirectionalUtility (direction:str, position:str,\n                         value:Union[int,str,NoneType]=None)\n\nUtility class for directional mask gradients with from/to support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndirection\nstr\n\nDirection (t, r, b, l, x, y)\n\n\nposition\nstr\n\nPosition type (from or to)\n\n\nvalue\nUnion\nNone\nValue (number, percentage, color, etc.)\n\n\n\n\nsource\n\n\nMaskDirectionalFactory\n\n MaskDirectionalFactory (direction:str, position:str,\n                         doc:Optional[str]=None)\n\nFactory for directional mask gradient utilities.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndirection\nstr\n\nDirection (t, r, b, l, x, y)\n\n\nposition\nstr\n\nPosition type (from or to)\n\n\ndoc\nOptional\nNone\nDocumentation\n\n\n\n\n\nExported source\n# Create directional mask gradient factories\nmask_t_from = MaskDirectionalFactory('t', 'from') # Top direction - from\nmask_t_to = MaskDirectionalFactory('t', 'to') # Top direction - to\n\nmask_r_from = MaskDirectionalFactory('r', 'from') # Right direction - from\nmask_r_to = MaskDirectionalFactory('r', 'to') # Right direction - to\n\nmask_b_from = MaskDirectionalFactory('b', 'from') # Bottom direction - from\nmask_b_to = MaskDirectionalFactory('b', 'to') # Bottom direction - to\n\nmask_l_from = MaskDirectionalFactory('l', 'from') # Left direction - from\nmask_l_to = MaskDirectionalFactory('l', 'to') # Left direction - to\n\nmask_x_from = MaskDirectionalFactory('x', 'from') # Horizontal (x) direction - from\nmask_x_to = MaskDirectionalFactory('x', 'to') # Horizontal (x) direction - to\n\nmask_y_from = MaskDirectionalFactory('y', 'from') # Vertical (y) direction - from\nmask_y_to = MaskDirectionalFactory('y', 'to') # Vertical (y) direction - to\n\n\n\nRadial Gradient Masks\nCreate radial gradient masks with shape, size, and position controls:\n\nsource\n\n\n\nMaskRadialUtility\n\n MaskRadialUtility (value:Optional[str]=None)\n\nUtility class for radial gradient masks.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalue\nOptional\nNone\nArbitrary radial gradient value\n\n\n\n\nsource\n\n\nMaskRadialFactory\n\n MaskRadialFactory (doc:Optional[str]=None)\n\nFactory for radial gradient mask utilities.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndoc\nOptional\nNone\nDocumentation\n\n\n\n\n\nExported source\n# Radial gradient shape controls\nmask_circle = SingleValueFactory(\"mask-circle\", \"Set radial gradient mask shape to circle\")\nmask_ellipse = SingleValueFactory(\"mask-ellipse\", \"Set radial gradient mask shape to ellipse\")\n\n# Radial gradient size controls\nmask_radial_closest_corner = SingleValueFactory(\"mask-radial-closest-corner\", \"Size radial gradient mask to closest corner\")\nmask_radial_closest_side = SingleValueFactory(\"mask-radial-closest-side\", \"Size radial gradient mask to closest side\")\nmask_radial_farthest_corner = SingleValueFactory(\"mask-radial-farthest-corner\", \"Size radial gradient mask to farthest corner\")\nmask_radial_farthest_side = SingleValueFactory(\"mask-radial-farthest-side\", \"Size radial gradient mask to farthest side\")\n\n# Radial gradient position controls\nmask_radial_at_top_left = SingleValueFactory(\"mask-radial-at-top-left\", \"Position radial gradient mask at top left\")\nmask_radial_at_top = SingleValueFactory(\"mask-radial-at-top\", \"Position radial gradient mask at top\")\nmask_radial_at_top_right = SingleValueFactory(\"mask-radial-at-top-right\", \"Position radial gradient mask at top right\")\nmask_radial_at_left = SingleValueFactory(\"mask-radial-at-left\", \"Position radial gradient mask at left\")\nmask_radial_at_center = SingleValueFactory(\"mask-radial-at-center\", \"Position radial gradient mask at center\")\nmask_radial_at_right = SingleValueFactory(\"mask-radial-at-right\", \"Position radial gradient mask at right\")\nmask_radial_at_bottom_left = SingleValueFactory(\"mask-radial-at-bottom-left\", \"Position radial gradient mask at bottom left\")\nmask_radial_at_bottom = SingleValueFactory(\"mask-radial-at-bottom\", \"Position radial gradient mask at bottom\")\nmask_radial_at_bottom_right = SingleValueFactory(\"mask-radial-at-bottom-right\", \"Position radial gradient mask at bottom right\")\n\n# Radial gradient from/to positioning\nmask_radial_from = MaskDirectionalFactory('radial', 'from', \"Radial gradient mask from position utilities\")\nmask_radial_to = MaskDirectionalFactory('radial', 'to', \"Radial gradient mask to position utilities\")\n\n\n\nConic Gradient Masks\nCreate conic gradient masks with angle support:\n\nsource\n\n\n\nMaskConicUtility\n\n MaskConicUtility (angle:Union[int,str,NoneType]=None,\n                   negative:bool=False)\n\nUtility class for conic gradient masks with angle support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nangle\nUnion\nNone\nStarting angle in degrees or custom value\n\n\nnegative\nbool\nFalse\nWhether to negate the angle\n\n\n\n\nsource\n\n\nMaskConicFactory\n\n MaskConicFactory (doc:Optional[str]=None)\n\nFactory for conic gradient mask utilities with angle support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndoc\nOptional\nNone\nDocumentation\n\n\n\n\n\nExported source\n# Create the conic gradient mask factory instance\nmask_conic = MaskConicFactory(\"Conic gradient mask utilities for creating conical gradient-based masks\")\n\n# Conic gradient from/to positioning\nmask_conic_from = MaskDirectionalFactory('conic', 'from', \"Conic gradient mask from position utilities\")\nmask_conic_to = MaskDirectionalFactory('conic', 'to', \"Conic gradient mask to position utilities\")\n\n\n\n\nMask Mode\nUtilities for controlling an element’s mask mode:\n\n\nExported source\nmask_mode = SimpleFactory(\n    {\n        \"alpha\": \"mask-alpha\",\n        \"luminance\": \"mask-luminance\",\n        \"match\": \"mask-match\"\n    },\n    \"Mask mode utilities for controlling how the mask is interpreted\"\n) # Mask mode factory\n\n\n\n\nMask Origin\nUtilities for controlling how an element’s mask image is positioned relative to borders, padding, and content:\n\n\nExported source\nmask_origin = SimpleFactory(\n    {\n        \"border\": \"mask-origin-border\",\n        \"padding\": \"mask-origin-padding\",\n        \"content\": \"mask-origin-content\",\n        \"fill\": \"mask-origin-fill\",\n        \"stroke\": \"mask-origin-stroke\",\n        \"view\": \"mask-origin-view\"\n    },\n    \"Mask origin utilities for controlling how the mask is positioned relative to borders, padding, and content\"\n) # Mask origin factory\n\n\n\n\nMask Position\nUtilities for controlling the position of an element’s mask image:\n\n\nExported source\nmask_position = SimpleFactory(\n    {\n        \"top_left\": \"mask-top-left\",\n        \"top\": \"mask-top\",\n        \"top_right\": \"mask-top-right\",\n        \"left\": \"mask-left\",\n        \"center\": \"mask-center\",\n        \"right\": \"mask-right\",\n        \"bottom_left\": \"mask-bottom-left\",\n        \"bottom\": \"mask-bottom\",\n        \"bottom_right\": \"mask-bottom-right\"\n    },\n    \"Mask position utilities for controlling the position of an element's mask image\"\n) # Mask position factory\n\n\n\n\nMask Repeat\nUtilities for controlling the repetition of an element’s mask image:\n\n\nExported source\nmask_repeat = SimpleFactory(\n    {\n        \"repeat\": \"mask-repeat\",\n        \"no_repeat\": \"mask-no-repeat\",\n        \"repeat_x\": \"mask-repeat-x\",\n        \"repeat_y\": \"mask-repeat-y\",\n        \"repeat_space\": \"mask-repeat-space\",\n        \"repeat_round\": \"mask-repeat-round\"\n    },\n    \"Mask repeat utilities for controlling the repetition of an element's mask image\"\n) # Mask repeat factory\n\n\n\n\nMask Size\nUtilities for controlling the size of an element’s mask image:\n\n\nExported source\nmask_size = SimpleFactory(\n    {\n        \"auto\": \"mask-auto\",\n        \"cover\": \"mask-cover\",\n        \"contain\": \"mask-contain\"\n    },\n    \"Mask size utilities for controlling the size of an element's mask image\"\n) # Mask size factory\n\n\n\n\nMask Type\nUtilities for controlling how an SVG mask is interpreted:\n\n\nExported source\nmask_type = SimpleFactory(\n    {\n        \"alpha\": \"mask-type-alpha\",\n        \"luminance\": \"mask-type-luminance\"\n    },\n    \"Mask type utilities for controlling how an SVG mask is interpreted\"\n) # Mask type factory\n\n\n\n\nTest Mask Utilities\nTest all mask image utilities:\n\nsource\n\n\ntest_effects_mask_basic_examples\n\n test_effects_mask_basic_examples ()\n\nTest basic mask image utilities.\n\n\nExported source\ndef test_effects_mask_basic_examples():\n    \"\"\"Test basic mask image utilities.\"\"\"\n    # Test mask-none\n    assert str(mask.none) == \"mask-none\"\n    \n    # Test arbitrary mask values\n    assert str(mask(\"url(#my-mask)\")) == \"mask-[url(#my-mask)]\"\n    assert str(mask(\"linear-gradient(black, transparent)\")) == \"mask-[linear-gradient(black, transparent)]\"\n    assert str(mask(\"radial-gradient(circle, black, transparent)\")) == \"mask-[radial-gradient(circle, black, transparent)]\"\n    \n    # Test CSS custom properties\n    assert str(mask(\"--custom-mask\")) == \"mask-(--custom-mask)\"\n    assert str(mask(\"--theme-mask\")) == \"mask-(--theme-mask)\"\n\n# Run the tests\ntest_effects_mask_basic_examples()\n\n\n\nsource\n\n\ntest_effects_mask_linear_examples\n\n test_effects_mask_linear_examples ()\n\nTest linear gradient mask utilities.\n\n\nExported source\ndef test_effects_mask_linear_examples():\n    \"\"\"Test linear gradient mask utilities.\"\"\"\n    # Test common angles\n    assert str(mask_linear._0) == \"mask-linear-0\"\n    assert str(mask_linear._45) == \"mask-linear-45\"\n    assert str(mask_linear._90) == \"mask-linear-90\"\n    assert str(mask_linear._180) == \"mask-linear-180\"\n    \n    # Test with angle parameter\n    assert str(mask_linear(30)) == \"mask-linear-30\"\n    assert str(mask_linear(60)) == \"mask-linear-60\"\n    assert str(mask_linear(270)) == \"mask-linear-270\"\n    \n    # Test negative angles\n    assert str(mask_linear(45, negative=True)) == \"-mask-linear-45\"\n    assert str(mask_linear.neg_90) == \"-mask-linear-90\"\n    assert str(mask_linear.neg_180) == \"-mask-linear-180\"\n    \n    # Test CSS custom properties\n    assert str(mask_linear(\"--gradient-angle\")) == \"mask-linear-(--gradient-angle)\"\n\n# Run the tests\ntest_effects_mask_linear_examples()\n\n\n\nsource\n\n\ntest_effects_mask_directional_examples\n\n test_effects_mask_directional_examples ()\n\nTest directional mask gradient utilities.\n\n\nExported source\ndef test_effects_mask_directional_examples():\n    \"\"\"Test directional mask gradient utilities.\"\"\"\n    # Test top direction\n    assert str(mask_t_from(50)) == \"mask-t-from-50\"\n    assert str(mask_t_from(\"50%\")) == \"mask-t-from-50%\"\n    assert str(mask_t_from.black) == \"mask-t-from-black\"\n    assert str(mask_t_to(100)) == \"mask-t-to-100\"\n    assert str(mask_t_to.transparent) == \"mask-t-to-transparent\"\n    \n    # Test right direction\n    assert str(mask_r_from._20) == \"mask-r-from-20\"\n    assert str(mask_r_from._50p) == \"mask-r-from-50%\"\n    assert str(mask_r_to.white) == \"mask-r-to-white\"\n    \n    # Test bottom direction\n    assert str(mask_b_from(0)) == \"mask-b-from-0\"\n    assert str(mask_b_to(\"75%\")) == \"mask-b-to-75%\"\n    \n    # Test left direction\n    assert str(mask_l_from(10)) == \"mask-l-from-10\"\n    assert str(mask_l_to(90)) == \"mask-l-to-90\"\n    \n    # Test horizontal (x) direction\n    assert str(mask_x_from(25)) == \"mask-x-from-25\"\n    assert str(mask_x_to(\"100%\")) == \"mask-x-to-100%\"\n    \n    # Test vertical (y) direction\n    assert str(mask_y_from(0)) == \"mask-y-from-0\"\n    assert str(mask_y_to(50)) == \"mask-y-to-50\"\n    \n    # Test with custom properties\n    assert str(mask_t_from(\"--mask-start\")) == \"mask-t-from-(--mask-start)\"\n    assert str(mask_r_to(\"--mask-end\")) == \"mask-r-to-(--mask-end)\"\n    \n    # Test with arbitrary values\n    assert str(mask_b_from(\"10px\")) == \"mask-b-from-[10px]\"\n    assert str(mask_l_to(\"5rem\")) == \"mask-l-to-[5rem]\"\n\n# Run the tests\ntest_effects_mask_directional_examples()\n\n\n\nsource\n\n\ntest_effects_mask_radial_examples\n\n test_effects_mask_radial_examples ()\n\nTest radial gradient mask utilities.\n\n\nExported source\ndef test_effects_mask_radial_examples():\n    \"\"\"Test radial gradient mask utilities.\"\"\"\n    # Test basic radial gradient\n    assert str(mask_radial()) == \"mask-radial\"\n    \n    # Test arbitrary radial values\n    assert str(mask_radial(\"circle at center\")) == \"mask-radial-[circle at center]\"\n    assert str(mask_radial(\"ellipse at top\")) == \"mask-radial-[ellipse at top]\"\n    assert str(mask_radial(\"circle 50px at 25% 75%\")) == \"mask-radial-[circle 50px at 25% 75%]\"\n    \n    # Test shape controls\n    assert str(mask_circle) == \"mask-circle\"\n    assert str(mask_ellipse) == \"mask-ellipse\"\n    \n    # Test size controls\n    assert str(mask_radial_closest_corner) == \"mask-radial-closest-corner\"\n    assert str(mask_radial_closest_side) == \"mask-radial-closest-side\"\n    assert str(mask_radial_farthest_corner) == \"mask-radial-farthest-corner\"\n    assert str(mask_radial_farthest_side) == \"mask-radial-farthest-side\"\n    \n    # Test position controls\n    assert str(mask_radial_at_top_left) == \"mask-radial-at-top-left\"\n    assert str(mask_radial_at_top) == \"mask-radial-at-top\"\n    assert str(mask_radial_at_top_right) == \"mask-radial-at-top-right\"\n    assert str(mask_radial_at_center) == \"mask-radial-at-center\"\n    assert str(mask_radial_at_bottom) == \"mask-radial-at-bottom\"\n    \n    # Test radial from/to\n    assert str(mask_radial_from(0)) == \"mask-radial-from-0\"\n    assert str(mask_radial_from(\"25%\")) == \"mask-radial-from-25%\"\n    assert str(mask_radial_from.black) == \"mask-radial-from-black\"\n    assert str(mask_radial_to(100)) == \"mask-radial-to-100\"\n    assert str(mask_radial_to.transparent) == \"mask-radial-to-transparent\"\n    \n    # Test CSS custom properties\n    assert str(mask_radial(\"--radial-mask\")) == \"mask-radial-(--radial-mask)\"\n\n# Run the tests\ntest_effects_mask_radial_examples()\n\n\n\nsource\n\n\ntest_effects_mask_conic_examples\n\n test_effects_mask_conic_examples ()\n\nTest conic gradient mask utilities.\n\n\nExported source\ndef test_effects_mask_conic_examples():\n    \"\"\"Test conic gradient mask utilities.\"\"\"\n    # Test common angles\n    assert str(mask_conic._0) == \"mask-conic-0\"\n    assert str(mask_conic._45) == \"mask-conic-45\"\n    assert str(mask_conic._90) == \"mask-conic-90\"\n    assert str(mask_conic._180) == \"mask-conic-180\"\n    \n    # Test with angle parameter\n    assert str(mask_conic(30)) == \"mask-conic-30\"\n    assert str(mask_conic(120)) == \"mask-conic-120\"\n    assert str(mask_conic(270)) == \"mask-conic-270\"\n    \n    # Test negative angles\n    assert str(mask_conic(45, negative=True)) == \"-mask-conic-45\"\n    assert str(mask_conic.neg_90) == \"-mask-conic-90\"\n    assert str(mask_conic.neg_180) == \"-mask-conic-180\"\n    \n    # Test conic from/to\n    assert str(mask_conic_from(0)) == \"mask-conic-from-0\"\n    assert str(mask_conic_from(\"25%\")) == \"mask-conic-from-25%\"\n    assert str(mask_conic_from.black) == \"mask-conic-from-black\"\n    assert str(mask_conic_to(180)) == \"mask-conic-to-180\"\n    assert str(mask_conic_to.transparent) == \"mask-conic-to-transparent\"\n    \n    # Test CSS custom properties\n    assert str(mask_conic(\"--conic-angle\")) == \"mask-conic-(--conic-angle)\"\n\n# Run the tests\ntest_effects_mask_conic_examples()\n\n\n\nsource\n\n\ntest_effects_mask_properties_examples\n\n test_effects_mask_properties_examples ()\n\nTest mask property utilities (mode, origin, position, etc.).\n\n\nExported source\ndef test_effects_mask_properties_examples():\n    \"\"\"Test mask property utilities (mode, origin, position, etc.).\"\"\"\n    # Test mask mode\n    assert str(mask_mode.alpha) == \"mask-alpha\"\n    assert str(mask_mode.luminance) == \"mask-luminance\"\n    assert str(mask_mode.match) == \"mask-match\"\n    \n    # Test mask origin\n    assert str(mask_origin.border) == \"mask-origin-border\"\n    assert str(mask_origin.padding) == \"mask-origin-padding\"\n    assert str(mask_origin.content) == \"mask-origin-content\"\n    assert str(mask_origin.fill) == \"mask-origin-fill\"\n    assert str(mask_origin.stroke) == \"mask-origin-stroke\"\n    assert str(mask_origin.view) == \"mask-origin-view\"\n    \n    # Test mask position\n    assert str(mask_position.top_left) == \"mask-top-left\"\n    assert str(mask_position.top) == \"mask-top\"\n    assert str(mask_position.center) == \"mask-center\"\n    assert str(mask_position.bottom_right) == \"mask-bottom-right\"\n    \n    # Test mask repeat\n    assert str(mask_repeat.repeat) == \"mask-repeat\"\n    assert str(mask_repeat.no_repeat) == \"mask-no-repeat\"\n    assert str(mask_repeat.repeat_x) == \"mask-repeat-x\"\n    assert str(mask_repeat.repeat_y) == \"mask-repeat-y\"\n    assert str(mask_repeat.repeat_space) == \"mask-repeat-space\"\n    assert str(mask_repeat.repeat_round) == \"mask-repeat-round\"\n    \n    # Test mask size\n    assert str(mask_size.auto) == \"mask-auto\"\n    assert str(mask_size.cover) == \"mask-cover\"\n    assert str(mask_size.contain) == \"mask-contain\"\n    \n    # Test mask type\n    assert str(mask_type.alpha) == \"mask-type-alpha\"\n    assert str(mask_type.luminance) == \"mask-type-luminance\"\n\n# Run the tests\ntest_effects_mask_properties_examples()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#practical-examples",
    "href": "utilities/effects.html#practical-examples",
    "title": "effects",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use shadow utilities in real FastHTML components:\n\nsource\n\ntest_effects_shadow_fasthtml_examples\n\n test_effects_shadow_fasthtml_examples ()\n\nTest shadow utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_effects_shadow_fasthtml_examples():\n    \"\"\"Test shadow utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, H2, P, Button, Card\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.borders import rounded, border, border_color\n    from cjm_fasthtml_tailwind.utilities.transitions_and_animation import transition\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    \n    # Card with basic shadow\n    card = Div(\n        H2(\"Card Title\"),\n        P(\"Card content goes here.\"),\n        cls=combine_classes(shadow.md, p(6), bg.white, rounded.lg)\n    )\n    assert \"shadow-md\" in card.attrs['class']\n    \n    # Button with hover shadow effect\n    button = Button(\n        \"Click me\",\n        cls=combine_classes(\n            shadow.sm,\n            shadow.lg.hover,\n            transition.shadow,\n            p.x(4), p.y(2), bg.blue._500, text_color.white, rounded.full\n        )\n    )\n    assert \"shadow-sm\" in button.attrs['class']\n    \n    # Card with colored shadow\n    colored_card = Div(\n        \"Content with colored shadow\",\n        cls=combine_classes(\n            shadow.xl,\n            shadow_color.blue._500,\n            p(8), bg.white, rounded.xl\n        )\n    )\n    assert \"shadow-xl\" in colored_card.attrs['class']\n    assert \"shadow-blue-500\" in colored_card.attrs['class']\n    \n    # Floating action button with large shadow\n    fab = Button(\n        \"+\",\n        cls=combine_classes(\n            shadow._2xl,\n            shadow_color.black,\n            w(14), h(14), rounded.full, bg.purple._600, text_color.white\n        )\n    )\n    assert \"shadow-2xl\" in fab.attrs['class']\n    assert \"shadow-black\" in fab.attrs['class']\n    \n    # Card with no shadow (flat design)\n    flat_card = Div(\n        \"Flat design card\",\n        cls=combine_classes(\n            shadow.none,\n            p(4), bg.gray._100, border(), border_color.gray._300\n        )\n    )\n    assert \"shadow-none\" in flat_card.attrs['class']\n    \n    # Card with custom shadow\n    custom_shadow_card = Div(\n        \"Custom shadow\",\n        cls=combine_classes(\n            shadow(\"0 10px 30px -10px rgba(0, 0, 0, 0.3)\"),\n            p(6), bg.white, rounded.full\n        )\n    )\n    assert \"shadow-[0 10px 30px -10px rgba(0, 0, 0, 0.3)]\" in custom_shadow_card.attrs['class']\n    \n    # Input with inset shadow for depth\n    input_field = Div(\n        cls=combine_classes(\n            inset_shadow.sm,\n            inset_shadow_color.gray._400,\n            p(3), bg.gray._50, rounded.full, border(), border_color.gray._300\n        )\n    )\n    assert \"inset-shadow-sm\" in input_field.attrs['class']\n    assert \"inset-shadow-gray-400\" in input_field.attrs['class']\n    \n    # Button with focus ring\n    focus_button = Button(\n        \"Focus me\",\n        cls=combine_classes(\n            ring(2).focus,\n            ring_color.blue._500.focus,\n            p.x(4), p.y(2), bg.gray._200, rounded.full\n        )\n    )\n    assert \"focus:ring-2\" in focus_button.attrs['class']\n    \n    # Card with custom ring\n    ring_card = Div(\n        \"Ring example\",\n        cls=combine_classes(\n            ring(2),\n            ring_color.purple._500,\n            p(6), bg.white, rounded.full\n        )\n    )\n    assert \"ring-2\" in ring_card.attrs['class']\n    assert \"ring-purple-500\" in ring_card.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        card,\n        button,\n        colored_card,\n        fab,\n        flat_card,\n        custom_shadow_card,\n        input_field,\n        focus_button,\n        ring_card,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_effects_shadow_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"shadow-md p-6 bg-white rounded-lg\"&gt;\n    &lt;h2&gt;Card Title&lt;/h2&gt;\n    &lt;p&gt;Card content goes here.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;button class=\"shadow-sm hover:shadow-lg transition-shadow px-4 py-2 bg-blue-500 text-white rounded-full\"&gt;Click me&lt;/button&gt;  &lt;div class=\"shadow-xl shadow-blue-500 p-8 bg-white rounded-xl\"&gt;Content with colored shadow&lt;/div&gt;\n&lt;button class=\"shadow-2xl shadow-black w-14 h-14 rounded-full bg-purple-600 text-white\"&gt;+&lt;/button&gt;  &lt;div class=\"shadow-none p-4 bg-gray-100 border border-gray-300\"&gt;Flat design card&lt;/div&gt;\n  &lt;div class=\"shadow-[0 10px 30px -10px rgba(0, 0, 0, 0.3)] p-6 bg-white rounded-full\"&gt;Custom shadow&lt;/div&gt;\n  &lt;div class=\"inset-shadow-sm inset-shadow-gray-400 p-3 bg-gray-50 rounded-full border border-gray-300\"&gt;&lt;/div&gt;\n&lt;button class=\"focus:ring-2 focus:ring-blue-500 px-4 py-2 bg-gray-200 rounded-full\"&gt;Focus me&lt;/button&gt;  &lt;div class=\"ring-2 ring-purple-500 p-6 bg-white rounded-full\"&gt;Ring example&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_effects_shadow_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_effects_shadow_composition_fasthtml_examples\n\n test_effects_shadow_composition_fasthtml_examples ()\n\nTest composing shadow size and color utilities.\n\n\nExported source\ndef test_effects_shadow_composition_fasthtml_examples():\n    \"\"\"Test composing shadow size and color utilities.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Small shadow with custom color\n    example1 = Div(\n        \"Small blue shadow\",\n        cls=combine_classes(\n            shadow.sm,\n            shadow_color.blue._400,\n            \"p-4 bg-white\"\n        )\n    )\n    assert \"shadow-sm\" in example1.attrs['class']\n    assert \"shadow-blue-400\" in example1.attrs['class']\n    \n    # Large shadow with red color\n    example2 = Div(\n        \"Large red shadow\",\n        cls=combine_classes(\n            shadow.xl,\n            shadow_color.red._600,\n            \"p-6 bg-white\"\n        )\n    )\n    assert \"shadow-xl\" in example2.attrs['class']\n    assert \"shadow-red-600\" in example2.attrs['class']\n    \n    # Extra small shadow with transparent color\n    example3 = Div(\n        \"Subtle transparent shadow\",\n        cls=combine_classes(\n            shadow._2xs,\n            shadow_color.transparent,\n            \"p-3 bg-gray-50\"\n        )\n    )\n    assert \"shadow-2xs\" in example3.attrs['class']\n    assert \"shadow-transparent\" in example3.attrs['class']\n    \n    # Medium shadow with custom hex color\n    example4 = Div(\n        \"Custom color shadow\",\n        cls=combine_classes(\n            shadow.md,\n            shadow_color(\"#6B46C1\"),  # Purple hex\n            \"p-5 bg-white\"\n        )\n    )\n    assert \"shadow-md\" in example4.attrs['class']\n    assert \"shadow-[#6B46C1]\" in example4.attrs['class']\n\n    return Div(\n        example1,\n        example2,\n        example3,\n        example4,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_effects_shadow_composition_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"shadow-sm shadow-blue-400 p-4 bg-white\"&gt;Small blue shadow&lt;/div&gt;\n  &lt;div class=\"shadow-xl shadow-red-600 p-6 bg-white\"&gt;Large red shadow&lt;/div&gt;\n  &lt;div class=\"shadow-2xs shadow-transparent p-3 bg-gray-50\"&gt;Subtle transparent shadow&lt;/div&gt;\n  &lt;div class=\"shadow-md shadow-[#6B46C1] p-5 bg-white\"&gt;Custom color shadow&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_effects_shadow_composition_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_effects_comprehensive_fasthtml_examples\n\n test_effects_comprehensive_fasthtml_examples ()\n\nTest comprehensive usage of all effect utilities.\n\n\nExported source\ndef test_effects_comprehensive_fasthtml_examples():\n    \"\"\"Test comprehensive usage of all effect utilities.\"\"\"\n    from fasthtml.common import Div, Input, Button\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg, bg_linear, from_color, to_color\n    from cjm_fasthtml_tailwind.utilities.borders import rounded, border, border_color\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Form input with inset shadow\n    form_input = Input(\n        type=\"text\",\n        placeholder=\"Enter text\",\n        cls=combine_classes(\n            inset_shadow.xs,\n            inset_shadow_color.gray._300,\n            p.x(4), p.y(2), bg.white, border(), border_color.gray._200, rounded.md,\n            inset_shadow.sm.focus,\n            inset_shadow_color.blue._400.focus\n        )\n    )\n    assert \"inset-shadow-xs\" in form_input.attrs['class']\n    assert \"inset-shadow-gray-300\" in form_input.attrs['class']\n    \n    # Button with ring on focus\n    ring_button = Button(\n        \"Click for Ring\",\n        cls=combine_classes(\n            p.x(6), p.y(3), bg.blue._500, text_color.white, rounded.lg,\n            ring(4).focus,\n            ring_color.blue._300.focus\n        )\n    )\n    assert \"focus:ring-4\" in ring_button.attrs['class']\n    \n    # Card with inset ring\n    inset_ring_card = Div(\n        \"Inset Ring Card\",\n        cls=combine_classes(\n            inset_ring(2),\n            inset_ring_color.indigo._400,\n            p(8), bg.white, rounded.xl\n        )\n    )\n    assert \"inset-ring-2\" in inset_ring_card.attrs['class']\n    assert \"inset-ring-indigo-400\" in inset_ring_card.attrs['class']\n    \n    # Complex shadow layering\n    layered_card = Div(\n        \"Layered Effects\",\n        cls=combine_classes(\n            shadow.lg,\n            shadow_color.purple._500,\n            inset_shadow.sm,\n            inset_shadow_color.purple._200,\n            p(6), bg_linear.to_br, from_color.purple._100, to_color.purple._50, rounded.lg\n        )\n    )\n    assert \"shadow-lg\" in layered_card.attrs['class']\n    assert \"shadow-purple-500\" in layered_card.attrs['class']\n    assert \"inset-shadow-sm\" in layered_card.attrs['class']\n    assert \"inset-shadow-purple-200\" in layered_card.attrs['class']\n    \n    # Remove all effects\n    no_effects = Div(\n        \"No Effects\",\n        cls=combine_classes(\n            shadow.none,\n            inset_shadow.none,\n            ring(0),\n            inset_ring(0),\n            p(4), bg.gray._100\n        )\n    )\n    assert \"shadow-none\" in no_effects.attrs['class']\n    assert \"inset-shadow-none\" in no_effects.attrs['class']\n    assert \"ring-0\" in no_effects.attrs['class']\n    assert \"inset-ring-0\" in no_effects.attrs['class']\n\n    return Div(\n        form_input,\n        ring_button,\n        inset_ring_card,\n        layered_card,\n        no_effects,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_effects_comprehensive_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;input type=\"text\" placeholder=\"Enter text\" class=\"inset-shadow-xs inset-shadow-gray-300 px-4 py-2 bg-white border border-gray-200 rounded-md focus:inset-shadow-sm focus:inset-shadow-blue-400\"&gt;\n&lt;button class=\"px-6 py-3 bg-blue-500 text-white rounded-lg focus:ring-4 focus:ring-blue-300\"&gt;Click for Ring&lt;/button&gt;  &lt;div class=\"inset-ring-2 inset-ring-indigo-400 p-8 bg-white rounded-xl\"&gt;Inset Ring Card&lt;/div&gt;\n  &lt;div class=\"shadow-lg shadow-purple-500 inset-shadow-sm inset-shadow-purple-200 p-6 bg-linear-to-br from-purple-100 to-purple-50 rounded-lg\"&gt;Layered Effects&lt;/div&gt;\n  &lt;div class=\"shadow-none inset-shadow-none ring-0 inset-ring-0 p-4 bg-gray-100\"&gt;No Effects&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_effects_comprehensive_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#practical-mask-examples",
    "href": "utilities/effects.html#practical-mask-examples",
    "title": "effects",
    "section": "Practical Mask Examples",
    "text": "Practical Mask Examples\nLet’s see how to use mask utilities in real FastHTML components:\n\nsource\n\ntest_effects_mask_fasthtml_examples\n\n test_effects_mask_fasthtml_examples ()\n\nTest mask utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_effects_mask_fasthtml_examples():\n    \"\"\"Test mask utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Img, Section, H1, P\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg, bg_linear, from_color, to_color, via_color\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    from cjm_fasthtml_tailwind.utilities.layout import position, overflow, display_tw\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Fade out effect with linear gradient mask\n    fade_out_div = Div(\n        P(\"This text fades out at the bottom\"),\n        cls=combine_classes(\n            mask_linear._180,\n            mask_t_from.black,\n            mask_t_to.transparent,\n            p(8), bg.blue._500, text_color.white\n        )\n    )\n    assert \"mask-linear-180\" in fade_out_div.attrs['class']\n    assert \"mask-t-from-black\" in fade_out_div.attrs['class']\n    assert \"mask-t-to-transparent\" in fade_out_div.attrs['class']\n    \n    # Circular reveal with radial gradient mask\n    circular_reveal = Div(\n        Img(src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\"),\n        cls=combine_classes(\n            mask_radial(),\n            mask_circle,\n            mask_radial_at_center,\n            mask_radial_from.black,\n            mask_radial_to.transparent,\n            position.relative, overflow.hidden\n        )\n    )\n    assert \"mask-radial\" in circular_reveal.attrs['class']\n    assert \"mask-circle\" in circular_reveal.attrs['class']\n    assert \"mask-radial-at-center\" in circular_reveal.attrs['class']\n    \n    # Horizontal fade edges effect\n    fade_edges = Div(\n        \"Content with faded edges\",\n        cls=combine_classes(\n            mask_x_from._10,\n            mask_x_to._90,\n            p.x(8), p.y(4), bg_linear.to_r, from_color.purple._500, to_color.pink._500, text_color.white\n        )\n    )\n    assert \"mask-x-from-10\" in fade_edges.attrs['class']\n    assert \"mask-x-to-90\" in fade_edges.attrs['class']\n    \n    # Corner spotlight effect with radial mask\n    corner_spotlight = Section(\n        H1(\"Spotlight Effect\"),\n        cls=combine_classes(\n            mask_radial(),\n            mask_ellipse,\n            mask_radial_at_top_left,\n            mask_radial_farthest_corner,\n            mask_radial_from.black,\n            mask_radial_to.transparent,\n            p(16), bg.gray._900, text_color.white\n        )\n    )\n    assert \"mask-ellipse\" in corner_spotlight.attrs['class']\n    assert \"mask-radial-at-top-left\" in corner_spotlight.attrs['class']\n    assert \"mask-radial-farthest-corner\" in corner_spotlight.attrs['class']\n    \n    # SVG mask reference\n    svg_masked = Div(\n        \"Content with SVG mask\",\n        cls=combine_classes(\n            mask(\"url(#star-mask)\"),\n            mask_size.cover,\n            mask_position.center,\n            mask_repeat.no_repeat,\n            p(8), bg_linear.to_br, from_color.yellow._400, to_color.orange._500\n        )\n    )\n    assert \"mask-[url(#star-mask)]\" in svg_masked.attrs['class']\n    assert \"mask-cover\" in svg_masked.attrs['class']\n    assert \"mask-center\" in svg_masked.attrs['class']\n    assert \"mask-no-repeat\" in svg_masked.attrs['class']\n    \n    # Conic gradient pie chart mask\n    pie_mask = Div(\n        \"Pie chart effect\",\n        cls=combine_classes(\n            mask_conic._0,\n            mask_conic_from.black,\n            mask_conic_to.transparent,\n            w(32), h(32), bg.blue._600, rounded.full\n        )\n    )\n    assert \"mask-conic-0\" in pie_mask.attrs['class']\n    assert \"mask-conic-from-black\" in pie_mask.attrs['class']\n    \n    # Complex gradient mask composition\n    complex_mask = Div(\n        \"Complex masked content\",\n        cls=combine_classes(\n            mask_linear._45,\n            mask_t_from._20,\n            mask_b_from._20,\n            mask_l_from(\"10%\"),\n            mask_r_to(\"90%\"),\n            mask_mode.alpha,\n            mask_origin.content,\n            p(12), bg_linear.to_r, from_color.indigo._500, via_color.purple._500, to_color.pink._500, text_color.white\n        )\n    )\n    assert \"mask-linear-45\" in complex_mask.attrs['class']\n    assert \"mask-t-from-20\" in complex_mask.attrs['class']\n    assert \"mask-alpha\" in complex_mask.attrs['class']\n    assert \"mask-origin-content\" in complex_mask.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        fade_out_div,\n        circular_reveal,\n        fade_edges,\n        corner_spotlight,\n        svg_masked,\n        pie_mask,\n        complex_mask,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_effects_mask_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"mask-linear-180 mask-t-from-black mask-t-to-transparent p-8 bg-blue-500 text-white\"&gt;\n    &lt;p&gt;This text fades out at the bottom&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"mask-radial mask-circle mask-radial-at-center mask-radial-from-black mask-radial-to-transparent relative overflow-hidden\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\"&gt;  &lt;/div&gt;\n  &lt;div class=\"mask-x-from-10 mask-x-to-90 px-8 py-4 bg-linear-to-r from-purple-500 to-pink-500 text-white\"&gt;Content with faded edges&lt;/div&gt;\n  &lt;section class=\"mask-radial mask-ellipse mask-radial-at-top-left mask-radial-farthest-corner mask-radial-from-black mask-radial-to-transparent p-16 bg-gray-900 text-white\"&gt;\n    &lt;h1&gt;Spotlight Effect&lt;/h1&gt;\n  &lt;/section&gt;\n  &lt;div class=\"mask-[url(#star-mask)] mask-cover mask-center mask-no-repeat p-8 bg-linear-to-br from-yellow-400 to-orange-500\"&gt;Content with SVG mask&lt;/div&gt;\n  &lt;div class=\"mask-conic-0 mask-conic-from-black mask-conic-to-transparent w-32 h-32 bg-blue-600 rounded-full\"&gt;Pie chart effect&lt;/div&gt;\n  &lt;div class=\"mask-linear-45 mask-t-from-20 mask-b-from-20 mask-l-from-10% mask-r-to-90% mask-alpha mask-origin-content p-12 bg-linear-to-r from-indigo-500 via-purple-500 to-pink-500 text-white\"&gt;Complex masked content&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_effects_mask_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/effects.html#export",
    "href": "utilities/effects.html#export",
    "title": "effects",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "effects"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html",
    "href": "utilities/backgrounds.html",
    "title": "backgrounds",
    "section": "",
    "text": "Control how a background image behaves when scrolling:\n\nsource\n\n\n\n BackgroundAttachment (value, names=None, module=None, qualname=None,\n                       type=None, start=1, boundary=None)\n\nBackground attachment utility values\n\n\nExported source\nclass BackgroundAttachment(Enum):\n    \"\"\"Background attachment utility values\"\"\"\n    FIXED = \"fixed\"\n    LOCAL = \"local\"\n    SCROLL = \"scroll\"\n\nbg_attachment = enums_to_simple_factory(\"bg\", [BackgroundAttachment], \"Background attachment utilities for controlling how a background image behaves when scrolling\") # Background attachment factory\n\n\n\nsource\n\n\n\n\n test_backgrounds_attachment_examples ()\n\nTest background attachment utilities.\n\n\nExported source\ndef test_backgrounds_attachment_examples():\n    \"\"\"Test background attachment utilities.\"\"\"\n    assert str(bg_attachment.fixed) == \"bg-fixed\"\n    assert str(bg_attachment.local) == \"bg-local\"\n    assert str(bg_attachment.scroll) == \"bg-scroll\"\n\n# Run the tests\ntest_backgrounds_attachment_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#background-attachment",
    "href": "utilities/backgrounds.html#background-attachment",
    "title": "backgrounds",
    "section": "",
    "text": "Control how a background image behaves when scrolling:\n\nsource\n\n\n\n BackgroundAttachment (value, names=None, module=None, qualname=None,\n                       type=None, start=1, boundary=None)\n\nBackground attachment utility values\n\n\nExported source\nclass BackgroundAttachment(Enum):\n    \"\"\"Background attachment utility values\"\"\"\n    FIXED = \"fixed\"\n    LOCAL = \"local\"\n    SCROLL = \"scroll\"\n\nbg_attachment = enums_to_simple_factory(\"bg\", [BackgroundAttachment], \"Background attachment utilities for controlling how a background image behaves when scrolling\") # Background attachment factory\n\n\n\nsource\n\n\n\n\n test_backgrounds_attachment_examples ()\n\nTest background attachment utilities.\n\n\nExported source\ndef test_backgrounds_attachment_examples():\n    \"\"\"Test background attachment utilities.\"\"\"\n    assert str(bg_attachment.fixed) == \"bg-fixed\"\n    assert str(bg_attachment.local) == \"bg-local\"\n    assert str(bg_attachment.scroll) == \"bg-scroll\"\n\n# Run the tests\ntest_backgrounds_attachment_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#background-clip",
    "href": "utilities/backgrounds.html#background-clip",
    "title": "backgrounds",
    "section": "Background Clip",
    "text": "Background Clip\nControl the bounding box of an element’s background:\n\nsource\n\nBackgroundClip\n\n BackgroundClip (value, names=None, module=None, qualname=None, type=None,\n                 start=1, boundary=None)\n\nBackground clip utility values\n\n\nExported source\nclass BackgroundClip(Enum):\n    \"\"\"Background clip utility values\"\"\"\n    BORDER = \"border\"\n    PADDING = \"padding\"\n    CONTENT = \"content\"\n    TEXT = \"text\"\n\nbg_clip = enums_to_simple_factory(\"bg-clip\", [BackgroundClip], \"Background clip utilities for controlling the bounding box of an element's background\") # Background clip factory\n\n\n\nsource\n\n\ntest_backgrounds_clip_examples\n\n test_backgrounds_clip_examples ()\n\nTest background clip utilities.\n\n\nExported source\ndef test_backgrounds_clip_examples():\n    \"\"\"Test background clip utilities.\"\"\"\n    assert str(bg_clip.border) == \"bg-clip-border\"\n    assert str(bg_clip.padding) == \"bg-clip-padding\"\n    assert str(bg_clip.content) == \"bg-clip-content\"\n    assert str(bg_clip.text) == \"bg-clip-text\"\n\n# Run the tests\ntest_backgrounds_clip_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#background-color",
    "href": "utilities/backgrounds.html#background-color",
    "title": "backgrounds",
    "section": "Background Color",
    "text": "Background Color\nThe most commonly used background utility - sets the background color of an element:\n\n\nExported source\nbg = ColoredFactory(\"bg\", \"Background color utilities for controlling an element's background color\") # The background color factory\n\n\n\nBasic Background Colors\nApply background colors using the standard color palette:\n\nsource\n\n\ntest_backgrounds_color_examples\n\n test_backgrounds_color_examples ()\n\nTest background color utilities with various color values.\n\n\nExported source\ndef test_backgrounds_color_examples():\n    \"\"\"Test background color utilities with various color values.\"\"\"\n    # Test all 22 Tailwind color families\n    assert str(bg.red._500) == \"bg-red-500\"\n    assert str(bg.orange._500) == \"bg-orange-500\"\n    assert str(bg.amber._500) == \"bg-amber-500\"\n    assert str(bg.yellow._500) == \"bg-yellow-500\"\n    assert str(bg.lime._500) == \"bg-lime-500\"\n    assert str(bg.green._500) == \"bg-green-500\"\n    assert str(bg.emerald._500) == \"bg-emerald-500\"\n    assert str(bg.teal._500) == \"bg-teal-500\"\n    assert str(bg.cyan._500) == \"bg-cyan-500\"\n    assert str(bg.sky._500) == \"bg-sky-500\"\n    assert str(bg.blue._500) == \"bg-blue-500\"\n    assert str(bg.indigo._500) == \"bg-indigo-500\"\n    assert str(bg.violet._500) == \"bg-violet-500\"\n    assert str(bg.purple._500) == \"bg-purple-500\"\n    assert str(bg.fuchsia._500) == \"bg-fuchsia-500\"\n    assert str(bg.pink._500) == \"bg-pink-500\"\n    assert str(bg.rose._500) == \"bg-rose-500\"\n    assert str(bg.slate._500) == \"bg-slate-500\"\n    assert str(bg.gray._500) == \"bg-gray-500\"\n    assert str(bg.zinc._500) == \"bg-zinc-500\"\n    assert str(bg.neutral._500) == \"bg-neutral-500\"\n    assert str(bg.stone._500) == \"bg-stone-500\"\n    \n    # Test different shades\n    assert str(bg.blue._300) == \"bg-blue-300\"\n    assert str(bg.green._950) == \"bg-green-950\"\n    \n    # Special colors\n    assert str(bg.transparent) == \"bg-transparent\"\n    assert str(bg.black) == \"bg-black\"\n    assert str(bg.white) == \"bg-white\"\n    assert str(bg.current) == \"bg-current\"\n    assert str(bg.inherit) == \"bg-inherit\"\n\n# Run the tests\ntest_backgrounds_color_examples()\n\n\n\n\nBackground Opacity\nControl the opacity of background colors:\n\nsource\n\n\ntest_backgrounds_opacity_examples\n\n test_backgrounds_opacity_examples ()\n\nTest background colors with opacity modifiers.\n\n\nExported source\ndef test_backgrounds_opacity_examples():\n    \"\"\"Test background colors with opacity modifiers.\"\"\"\n    # Standard opacity values\n    assert str(bg.red._500.opacity(50)) == \"bg-red-500/50\"\n    assert str(bg.blue._300.opacity(75)) == \"bg-blue-300/75\"\n    assert str(bg.black.opacity(10)) == \"bg-black/10\"\n    \n    # Arbitrary opacity values\n    assert str(bg.green._600.opacity(\"[0.87]\")) == \"bg-green-600/[0.87]\"\n    assert str(bg.purple._400.opacity(\"(--my-opacity)\")) == \"bg-purple-400/(--my-opacity)\"\n\n# Run the tests\ntest_backgrounds_opacity_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#background-image",
    "href": "utilities/backgrounds.html#background-image",
    "title": "backgrounds",
    "section": "Background Image",
    "text": "Background Image\nControl an element’s background image:\n\nNo Background Image\nRemove background images:\n\n\nExported source\nbg_none = SingleValueFactory(\"bg-none\", \"Remove background image\") # Remove background image\n\n\n\n\nLinear Gradients\nCreate linear gradient backgrounds:\n\nsource\n\n\nGradientUtility\n\n GradientUtility (gradient_type:str, value:Union[int,str,NoneType]=None,\n                  negative:bool=False)\n\nUtility class for gradient backgrounds with angle support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngradient_type\nstr\n\nType of gradient (linear, radial, conic)\n\n\nvalue\nUnion\nNone\nDirection, angle, or custom value\n\n\nnegative\nbool\nFalse\nWhether to negate the angle\n\n\n\n\n\nGradient Backgrounds\nCreate gradient backgrounds with various types:\n\nsource\n\n\nGradientFactory\n\n GradientFactory (gradient_type:str, doc:Optional[str]=None)\n\nFactory for gradient utilities with angle and direction support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngradient_type\nstr\n\nType of gradient (linear, radial, conic)\n\n\ndoc\nOptional\nNone\nDocumentation\n\n\n\n\n\nExported source\n# Create gradient factories\nbg_linear = GradientFactory(\"linear\", \"Linear gradient utilities for creating gradient backgrounds\")\nbg_radial = GradientFactory(\"radial\", \"Radial gradient utilities for creating circular gradient backgrounds\") \nbg_conic = GradientFactory(\"conic\", \"Conic gradient utilities for creating conical gradient backgrounds\")\n\n\n\n\nGradient Color Stops\nDefine color stops for gradients:\n\nsource\n\n\nGradientStopUtility\n\n GradientStopUtility (stop_type:str, value:Union[str,tuple[Union[cjm_fasth\n                      tml_tailwind.builders.colors.ColorFamily,str],Union[\n                      cjm_fasthtml_tailwind.builders.colors.ColorShade,str\n                      ]],int,NoneType]=None, is_position:bool=False)\n\nUtility class for gradient color stops with percentage support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstop_type\nstr\n\nType of stop (from, via, to)\n\n\nvalue\nUnion\nNone\nColor or percentage\n\n\nis_position\nbool\nFalse\nWhether this is a position value\n\n\n\n\nsource\n\n\nGradientStopFactory\n\n GradientStopFactory (stop_type:str, doc:Optional[str]=None)\n\nEnhanced factory for gradient color stops with percentage support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nstop_type\nstr\n\nType of stop (from, via, to)\n\n\ndoc\nOptional\nNone\nDocumentation\n\n\n\n\n\nExported source\n# Create enhanced gradient stop factories\nfrom_color = GradientStopFactory(\"from\", \"Gradient from color/position utilities for defining the starting color or position of a gradient\")\nvia_color = GradientStopFactory(\"via\", \"Gradient via color/position utilities for defining the middle color or position of a gradient\")\nto_color = GradientStopFactory(\"to\", \"Gradient to color/position utilities for defining the ending color or position of a gradient\")\n\n\n\n\nTest Background Image Utilities\n\nsource\n\n\ntest_backgrounds_gradient_examples\n\n test_backgrounds_gradient_examples ()\n\nTest gradient background utilities.\n\n\nExported source\ndef test_backgrounds_gradient_examples():\n    \"\"\"Test gradient background utilities.\"\"\"\n    # Test bg-none\n    assert str(bg_none) == \"bg-none\"\n    \n    # Test linear gradient directions\n    assert str(bg_linear.to_t) == \"bg-linear-to-t\"\n    assert str(bg_linear.to_tr) == \"bg-linear-to-tr\"\n    assert str(bg_linear.to_r) == \"bg-linear-to-r\"\n    assert str(bg_linear.to_br) == \"bg-linear-to-br\"\n    assert str(bg_linear.to_b) == \"bg-linear-to-b\"\n    assert str(bg_linear.to_bl) == \"bg-linear-to-bl\"\n    assert str(bg_linear.to_l) == \"bg-linear-to-l\"\n    assert str(bg_linear.to_tl) == \"bg-linear-to-tl\"\n    \n    # Test linear gradient angles\n    assert str(bg_linear._45) == \"bg-linear-45\"\n    assert str(bg_linear._90) == \"bg-linear-90\"\n    assert str(bg_linear._180) == \"bg-linear-180\"\n    assert str(bg_linear(45)) == \"bg-linear-45\"\n    assert str(bg_linear(90, negative=True)) == \"-bg-linear-90\"\n    assert str(bg_linear.neg_45) == \"-bg-linear-45\"\n    \n    # Test radial gradient\n    assert str(bg_radial()) == \"bg-radial\"\n    assert str(bg_radial(\"--gradient-shape\")) == \"bg-radial-(--gradient-shape)\"\n    assert str(bg_radial(\"circle at center\")) == \"bg-radial-[circle at center]\"\n    \n    # Test conic gradient\n    assert str(bg_conic._45) == \"bg-conic-45\"\n    assert str(bg_conic(90)) == \"bg-conic-90\"\n    assert str(bg_conic(180, negative=True)) == \"-bg-conic-180\"\n    assert str(bg_conic(\"--conic-angle\")) == \"bg-conic-(--conic-angle)\"\n    assert str(bg_conic(\"from 45deg at center\")) == \"bg-conic-[from 45deg at center]\"\n\n# Run the tests\ntest_backgrounds_gradient_examples()\n\n\n\nsource\n\n\ntest_backgrounds_gradient_stops_examples\n\n test_backgrounds_gradient_stops_examples ()\n\nTest gradient color stop utilities.\n\n\nExported source\ndef test_backgrounds_gradient_stops_examples():\n    \"\"\"Test gradient color stop utilities.\"\"\"\n    # Test from colors\n    assert str(from_color.red._500) == \"from-red-500\"\n    assert str(from_color.blue._300) == \"from-blue-300\"\n    assert str(from_color.transparent) == \"from-transparent\"\n    assert str(from_color.black.opacity(50)) == \"from-black/50\"\n    \n    # Test from percentages\n    assert str(from_color._0) == \"from-0%\"\n    assert str(from_color._50) == \"from-50%\"\n    assert str(from_color._100) == \"from-100%\"\n    assert str(from_color(25)) == \"from-25%\"\n    assert str(from_color(\"33%\")) == \"from-33%\"\n    \n    # Test from custom properties and arbitrary values\n    assert str(from_color(\"--gradient-start\")) == \"from-(--gradient-start)\"\n    assert str(from_color(\"10px\")) == \"from-[10px]\"\n    \n    # Test via colors\n    assert str(via_color.green._400) == \"via-green-400\"\n    assert str(via_color.purple._600) == \"via-purple-600\"\n    assert str(via_color.white) == \"via-white\"\n    assert str(via_color.yellow._200.opacity(75)) == \"via-yellow-200/75\"\n    \n    # Test via percentages\n    assert str(via_color._50) == \"via-50%\"\n    assert str(via_color(75)) == \"via-75%\"\n    \n    # Test to colors\n    assert str(to_color.pink._500) == \"to-pink-500\"\n    assert str(to_color.indigo._700) == \"to-indigo-700\"\n    assert str(to_color.current) == \"to-current\"\n    assert str(to_color.cyan._300.opacity(25)) == \"to-cyan-300/25\"\n    \n    # Test to percentages\n    assert str(to_color._100) == \"to-100%\"\n    assert str(to_color(90)) == \"to-90%\"\n    assert str(to_color(\"--gradient-end\")) == \"to-(--gradient-end)\"\n\n# Run the tests\ntest_backgrounds_gradient_stops_examples()\n\n\n\n\nGradient Examples\nPractical examples of creating gradients:\n\nsource\n\n\ntest_backgrounds_gradient_composition_examples\n\n test_backgrounds_gradient_composition_examples ()\n\nTest composing gradient backgrounds with color stops.\n\n\nExported source\ndef test_backgrounds_gradient_composition_examples():\n    \"\"\"Test composing gradient backgrounds with color stops.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    \n    # Simple two-color gradient\n    gradient1 = Div(\n        \"Gradient Background\",\n        cls=combine_classes(\n            bg_linear.to_r,\n            from_color.blue._500,\n            to_color.purple._600,\n            p(8),\n            text_color.white\n        )\n    )\n    assert \"bg-linear-to-r\" in gradient1.attrs['class']\n    assert \"from-blue-500\" in gradient1.attrs['class']\n    assert \"to-purple-600\" in gradient1.attrs['class']\n    \n    # Three-color gradient with via\n    gradient2 = Div(\n        \"Three Color Gradient\",\n        cls=combine_classes(\n            bg_linear.to_br,\n            from_color.red._400,\n            via_color.yellow._500,\n            to_color.green._600,\n            p(8),\n            text_color.white\n        )\n    )\n    assert \"via-yellow-500\" in gradient2.attrs['class']\n    \n    # Gradient with angle\n    gradient3 = Div(\n        \"Angled Gradient\",\n        cls=combine_classes(\n            bg_linear._45,\n            from_color.indigo._500,\n            to_color.pink._500,\n            p(8)\n        )\n    )\n    assert \"bg-linear-45\" in gradient3.attrs['class']\n    \n    # Radial gradient\n    radial = Div(\n        \"Radial Gradient\",\n        cls=combine_classes(\n            bg_radial(),\n            from_color.indigo._300,\n            to_color.pink._500,\n            p(16)\n        )\n    )\n    assert \"bg-radial\" in radial.attrs['class']\n    \n    # Conic gradient\n    conic = Div(\n        \"Conic Gradient\",\n        cls=combine_classes(\n            bg_conic._180,\n            from_color.red._500,\n            via_color.yellow._500,\n            to_color.blue._500,\n            p(16)\n        )\n    )\n    assert \"bg-conic-180\" in conic.attrs['class']\n    \n    # Gradient with opacity\n    gradient_opacity = Div(\n        \"Semi-transparent gradient\",\n        cls=combine_classes(\n            bg_linear.to_t,\n            from_color.black.opacity(90),\n            to_color.transparent,\n            p(8)\n        )\n    )\n    assert \"from-black/90\" in gradient_opacity.attrs['class']\n    assert \"to-transparent\" in gradient_opacity.attrs['class']\n    \n    # Gradient with position percentages\n    gradient_positions = Div(\n        \"Gradient with positions\",\n        cls=combine_classes(\n            bg_linear.to_r,\n            from_color.blue._500,\n            from_color._10,  # Start at 10%\n            via_color.green._500,\n            via_color._50,   # Middle at 50%\n            to_color.red._500,\n            to_color._90,    # End at 90%\n            p(8)\n        )\n    )\n    assert \"from-10%\" in gradient_positions.attrs['class']\n    assert \"via-50%\" in gradient_positions.attrs['class']\n    assert \"to-90%\" in gradient_positions.attrs['class']\n\n# Run the tests\ntest_backgrounds_gradient_composition_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#background-origin",
    "href": "utilities/backgrounds.html#background-origin",
    "title": "backgrounds",
    "section": "Background Origin",
    "text": "Background Origin\nControl how an element’s background is positioned relative to borders, padding, and content:\n\nsource\n\ntest_backgrounds_origin_examples\n\n test_backgrounds_origin_examples ()\n\nTest background origin utilities.\n\n\nExported source\nbg_origin = SimpleFactory(\n    {\n        \"border\": \"bg-origin-border\",\n        \"padding\": \"bg-origin-padding\",\n        \"content\": \"bg-origin-content\"\n    },\n    \"Background origin utilities for controlling how an element's background is positioned relative to borders, padding, and content\"\n) # Background origin factory\n\n\n\n\nExported source\ndef test_backgrounds_origin_examples():\n    \"\"\"Test background origin utilities.\"\"\"\n    assert str(bg_origin.border) == \"bg-origin-border\"\n    assert str(bg_origin.padding) == \"bg-origin-padding\"\n    assert str(bg_origin.content) == \"bg-origin-content\"\n\n# Run the tests\ntest_backgrounds_origin_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#background-position",
    "href": "utilities/backgrounds.html#background-position",
    "title": "backgrounds",
    "section": "Background Position",
    "text": "Background Position\nControl the position of background images:\n\nsource\n\ntest_backgrounds_position_examples\n\n test_backgrounds_position_examples ()\n\nTest background position utilities.\n\n\nExported source\nbg_position = SimpleFactory(\n    {\n        \"top_left\": \"bg-top-left\",\n        \"top\": \"bg-top\",\n        \"top_right\": \"bg-top-right\",\n        \"left\": \"bg-left\",\n        \"center\": \"bg-center\",\n        \"right\": \"bg-right\",\n        \"bottom_left\": \"bg-bottom-left\",\n        \"bottom\": \"bg-bottom\",\n        \"bottom_right\": \"bg-bottom-right\"\n    },\n    \"Background position utilities for controlling the position of an element's background image\"\n) # Background position factory\n\n\n\n\nExported source\ndef test_backgrounds_position_examples():\n    \"\"\"Test background position utilities.\"\"\"\n    assert str(bg_position.top_left) == \"bg-top-left\"\n    assert str(bg_position.top) == \"bg-top\"\n    assert str(bg_position.top_right) == \"bg-top-right\"\n    assert str(bg_position.center) == \"bg-center\"\n    assert str(bg_position.bottom) == \"bg-bottom\"\n\n# Run the tests\ntest_backgrounds_position_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#background-repeat",
    "href": "utilities/backgrounds.html#background-repeat",
    "title": "backgrounds",
    "section": "Background Repeat",
    "text": "Background Repeat\nControl the repetition of background images:\n\nsource\n\ntest_backgrounds_repeat_examples\n\n test_backgrounds_repeat_examples ()\n\nTest background repeat utilities.\n\n\nExported source\nbg_repeat = SimpleFactory(\n    {\n        \"repeat\": \"bg-repeat\",\n        \"repeat_x\": \"bg-repeat-x\",\n        \"repeat_y\": \"bg-repeat-y\",\n        \"repeat_space\": \"bg-repeat-space\",\n        \"repeat_round\": \"bg-repeat-round\",\n        \"no_repeat\": \"bg-no-repeat\"\n    },\n    \"Background repeat utilities for controlling the repetition of an element's background image\"\n) # Background repeat factory\n\n\n\n\nExported source\ndef test_backgrounds_repeat_examples():\n    \"\"\"Test background repeat utilities.\"\"\"\n    assert str(bg_repeat.repeat) == \"bg-repeat\"\n    assert str(bg_repeat.repeat_x) == \"bg-repeat-x\"\n    assert str(bg_repeat.repeat_y) == \"bg-repeat-y\"\n    assert str(bg_repeat.no_repeat) == \"bg-no-repeat\"\n\n# Run the tests\ntest_backgrounds_repeat_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#background-size",
    "href": "utilities/backgrounds.html#background-size",
    "title": "backgrounds",
    "section": "Background Size",
    "text": "Background Size\nControl the background size of an element’s background image:\n\nsource\n\ntest_backgrounds_size_examples\n\n test_backgrounds_size_examples ()\n\nTest background size utilities.\n\n\nExported source\nbg_size = SimpleFactory(\n    {\n        \"auto\": \"bg-auto\",\n        \"cover\": \"bg-cover\",\n        \"contain\": \"bg-contain\"\n    },\n    \"Background size utilities for controlling the background size of an element's background image\"\n) # Background size factory\n\n\n\n\nExported source\ndef test_backgrounds_size_examples():\n    \"\"\"Test background size utilities.\"\"\"\n    assert str(bg_size.auto) == \"bg-auto\"\n    assert str(bg_size.cover) == \"bg-cover\"\n    assert str(bg_size.contain) == \"bg-contain\"\n\n# Run the tests\ntest_backgrounds_size_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#arbitrary-background-values",
    "href": "utilities/backgrounds.html#arbitrary-background-values",
    "title": "backgrounds",
    "section": "Arbitrary Background Values",
    "text": "Arbitrary Background Values\nTest support for arbitrary background values:\n\nsource\n\ntest_backgrounds_arbitrary_examples\n\n test_backgrounds_arbitrary_examples ()\n\nTest background utilities with arbitrary values.\n\n\nExported source\ndef test_backgrounds_arbitrary_examples():\n    \"\"\"Test background utilities with arbitrary values.\"\"\"\n    # Arbitrary color values\n    assert str(bg(\"#123456\")) == \"bg-[#123456]\"\n    assert str(bg(\"rgb(10, 20, 30)\")) == \"bg-[rgb(10, 20, 30)]\"\n    assert str(bg(\"linear-gradient(to right, red, blue)\")) == \"bg-[linear-gradient(to right, red, blue)]\"\n    \n    # CSS custom properties\n    assert str(bg(\"--custom-bg-color\")) == \"bg-(--custom-bg-color)\"\n    assert str(bg(\"--theme-background\")) == \"bg-(--theme-background)\"\n\n# Run the tests\ntest_backgrounds_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/backgrounds.html#practical-examples",
    "href": "utilities/backgrounds.html#practical-examples",
    "title": "backgrounds",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these background utilities in real FastHTML components:\n\nsource\n\ntest_backgrounds_fasthtml_examples\n\n test_backgrounds_fasthtml_examples ()\n\nTest background utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_backgrounds_fasthtml_examples():\n    \"\"\"Test background utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, H1, P, Section\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    from cjm_fasthtml_tailwind.utilities.layout import position\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Card with colored background\n    card = Div(\n        H1(\"Welcome\", cls=str(text_color.white)),\n        P(\"This is a card with a blue background\"),\n        cls=combine_classes(bg.blue._500, p(6), rounded.lg)\n    )\n    assert \"bg-blue-500\" in card.attrs['class']\n    \n    # Hero section with gradient overlay\n    hero = Section(\n        Div(\n            H1(\"Hero Title\"),\n            cls=combine_classes(bg.black.opacity(50), p(8))\n        ),\n        cls=combine_classes(\n            bg_size.cover,\n            bg_position.center,\n            bg_repeat.no_repeat,\n            position.relative\n        )\n    )\n    assert str(bg.black.opacity(50)) == \"bg-black/50\"\n    assert \"bg-cover\" in hero.attrs['class']\n    assert \"bg-center\" in hero.attrs['class']\n    \n    # Text with gradient background using v4 syntax\n    gradient_text = H1(\n        \"Gradient Text\",\n        cls=combine_classes(\n            bg_clip.text,\n            text_color.transparent,\n            bg_linear.to_r,\n            from_color.blue._500,\n            to_color.red._600,\n            font_size._7xl\n        )\n    )\n    assert \"bg-clip-text\" in gradient_text.attrs['class']\n    assert \"bg-linear-to-r\" in gradient_text.attrs['class']\n    assert \"from-blue-500\" in gradient_text.attrs['class']\n    assert \"to-red-600\" in gradient_text.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        card,\n        hero,\n        gradient_text,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_backgrounds_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"bg-blue-500 p-6 rounded-lg\"&gt;\n    &lt;h1 class=\"text-white\"&gt;Welcome&lt;/h1&gt;\n    &lt;p&gt;This is a card with a blue background&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;section class=\"bg-cover bg-center bg-no-repeat relative\"&gt;\n    &lt;div class=\"bg-black/50 p-8\"&gt;\n      &lt;h1&gt;Hero Title&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/section&gt;\n  &lt;h1 class=\"bg-clip-text text-transparent bg-linear-to-r from-blue-500 to-red-600 text-7xl\"&gt;Gradient Text&lt;/h1&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_backgrounds_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "backgrounds"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html",
    "href": "utilities/flexbox_and_grid.html",
    "title": "flexbox_and_grid",
    "section": "",
    "text": "Essential display utilities for creating flex and grid containers.\n\nsource\n\n\n\n GridDisplayFactory ()\n\nFactory for grid display utilities.\n\nsource\n\n\n\n\n FlexDisplayFactory ()\n\nFactory for flex display utilities.\n\nsource\n\n\n\n\n test_flexbox_and_grid_display_examples ()\n\nTest flex and grid display utilities.\n\n\nExported source\n# Create the display factories\nflex_display = FlexDisplayFactory() # The flex display factory\ngrid_display = GridDisplayFactory() # The grid display factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_display_examples(\n):\n    \"\"\"Test flex and grid display utilities.\"\"\"\n    # Test flex display utilities\n    assert str(flex_display) == \"flex\"\n    assert flex_display.inline == \"inline-flex\"\n    \n    # Test grid display utilities\n    assert str(grid_display) == \"grid\"\n    assert grid_display.inline == \"inline-grid\"\n    \n    # Test with modifiers\n    assert str(flex_display.hover) == \"hover:flex\"\n    assert str(flex_display.md) == \"md:flex\"\n    assert str(grid_display.lg) == \"lg:grid\"\n\n# Run the tests\ntest_flexbox_and_grid_display_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#display-utilities-for-flexbox-and-grid",
    "href": "utilities/flexbox_and_grid.html#display-utilities-for-flexbox-and-grid",
    "title": "flexbox_and_grid",
    "section": "",
    "text": "Essential display utilities for creating flex and grid containers.\n\nsource\n\n\n\n GridDisplayFactory ()\n\nFactory for grid display utilities.\n\nsource\n\n\n\n\n FlexDisplayFactory ()\n\nFactory for flex display utilities.\n\nsource\n\n\n\n\n test_flexbox_and_grid_display_examples ()\n\nTest flex and grid display utilities.\n\n\nExported source\n# Create the display factories\nflex_display = FlexDisplayFactory() # The flex display factory\ngrid_display = GridDisplayFactory() # The grid display factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_display_examples(\n):\n    \"\"\"Test flex and grid display utilities.\"\"\"\n    # Test flex display utilities\n    assert str(flex_display) == \"flex\"\n    assert flex_display.inline == \"inline-flex\"\n    \n    # Test grid display utilities\n    assert str(grid_display) == \"grid\"\n    assert grid_display.inline == \"inline-grid\"\n    \n    # Test with modifiers\n    assert str(flex_display.hover) == \"hover:flex\"\n    assert str(flex_display.md) == \"md:flex\"\n    assert str(grid_display.lg) == \"lg:grid\"\n\n# Run the tests\ntest_flexbox_and_grid_display_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#flex-basis-utilities",
    "href": "utilities/flexbox_and_grid.html#flex-basis-utilities",
    "title": "flexbox_and_grid",
    "section": "Flex Basis Utilities",
    "text": "Flex Basis Utilities\nControl the initial size of flex items before they grow or shrink.\n\nsource\n\ntest_flexbox_and_grid_basis_examples\n\n test_flexbox_and_grid_basis_examples ()\n\nTest flex basis utilities with various scale values.\n\n\nExported source\nFLEX_BASIS_CONFIG = ScaleConfig( # Create configuration for flex basis - similar to width/height but with container scales\n    numeric=True,\n    decimals=True,\n    fractions=True,\n    named=CONTAINER_SCALES,  # Use container scales (3xs through 7xl)\n    special={\n        \"auto\": \"auto\",\n        \"full\": \"full\"\n    },\n    negative=False\n)\n\n# Create flex basis factory\nbasis = ScaledFactory(\"basis\", FLEX_BASIS_CONFIG, \"Flex basis utilities for controlling the initial size of flex items\") # The flex basis factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_basis_examples(\n):\n    \"\"\"Test flex basis utilities with various scale values.\"\"\"\n    # Test flex basis utilities\n    assert str(basis(0)) == \"basis-0\"\n    assert str(basis(4)) == \"basis-4\"\n    assert str(basis(64)) == \"basis-64\"\n    assert str(basis(\"1/2\")) == \"basis-1/2\"\n    assert str(basis(\"2/3\")) == \"basis-2/3\"\n    assert str(basis.auto) == \"basis-auto\"\n    assert str(basis.full) == \"basis-full\"\n    \n    # Named container sizes\n    assert str(basis.xs) == \"basis-xs\"\n    assert str(basis.sm) == \"basis-sm\"\n    assert str(basis.md) == \"basis-md\"\n    assert str(basis.lg) == \"basis-lg\"\n    assert str(basis._2xl) == \"basis-2xl\"\n    \n    # Arbitrary values\n    assert str(basis(\"200px\")) == \"basis-[200px]\"\n    assert str(basis(\"--custom-basis\")) == \"basis-(--custom-basis)\"\n\n# Run the tests\ntest_flexbox_and_grid_basis_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#flex-direction-utilities",
    "href": "utilities/flexbox_and_grid.html#flex-direction-utilities",
    "title": "flexbox_and_grid",
    "section": "Flex Direction Utilities",
    "text": "Flex Direction Utilities\nControl the direction of flex items in a flex container.\n\nsource\n\ntest_flexbox_and_grid_direction_examples\n\n test_flexbox_and_grid_direction_examples ()\n\nTest flex direction utilities.\n\n\nExported source\nFLEX_DIRECTION_VALUES = { # Flex direction utilities\n    \"row\": \"flex-row\",\n    \"row-reverse\": \"flex-row-reverse\",\n    \"col\": \"flex-col\",\n    \"col-reverse\": \"flex-col-reverse\"\n}\n\n# Create flex direction factory\nflex_direction = SimpleFactory(FLEX_DIRECTION_VALUES, \"Flex direction utilities for controlling the direction of flex items\") # The flex direction factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_direction_examples(\n):\n    \"\"\"Test flex direction utilities.\"\"\"\n    # Test flex direction utilities\n    assert str(flex_direction.row) == \"flex-row\"\n    assert str(flex_direction.row_reverse) == \"flex-row-reverse\"\n    assert str(flex_direction.col) == \"flex-col\"\n    assert str(flex_direction.col_reverse) == \"flex-col-reverse\"\n\n# Run the tests\ntest_flexbox_and_grid_direction_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#flex-wrap-utilities",
    "href": "utilities/flexbox_and_grid.html#flex-wrap-utilities",
    "title": "flexbox_and_grid",
    "section": "Flex Wrap Utilities",
    "text": "Flex Wrap Utilities\nControl how flex items wrap.\n\nsource\n\ntest_flexbox_and_grid_wrap_examples\n\n test_flexbox_and_grid_wrap_examples ()\n\nTest flex wrap utilities.\n\n\nExported source\nFLEX_WRAP_VALUES = { # Flex wrap utilities\n    \"nowrap\": \"flex-nowrap\",\n    \"wrap\": \"flex-wrap\",\n    \"wrap-reverse\": \"flex-wrap-reverse\"\n}\n\n# Create flex wrap factory\nflex_wrap = SimpleFactory(FLEX_WRAP_VALUES, \"Flex wrap utilities for controlling how flex items wrap\") # The flex wrap factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_wrap_examples(\n):\n    \"\"\"Test flex wrap utilities.\"\"\"\n    # Test flex wrap utilities\n    assert str(flex_wrap.nowrap) == \"flex-nowrap\"\n    assert str(flex_wrap.wrap) == \"flex-wrap\"\n    assert str(flex_wrap.wrap_reverse) == \"flex-wrap-reverse\"\n\n# Run the tests\ntest_flexbox_and_grid_wrap_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#flex-utilities",
    "href": "utilities/flexbox_and_grid.html#flex-utilities",
    "title": "flexbox_and_grid",
    "section": "Flex Utilities",
    "text": "Flex Utilities\nControl how flex items both grow and shrink.\n\nsource\n\ntest_flexbox_and_grid_flex_examples\n\n test_flexbox_and_grid_flex_examples ()\n\nTest flex utilities for combined grow/shrink properties.\n\n\nExported source\nFLEX_CONFIG = ScaleConfig( # Flex configuration - supports numeric values and special presets\n    numeric=True,  # Support flex-1, flex-2, etc.\n    decimals=False,\n    fractions=True,  # Support flex-1/2, etc.\n    named=None,\n    special={\n        \"auto\": \"auto\",      # flex: 1 1 auto\n        \"initial\": \"initial\", # flex: 0 1 auto\n        \"none\": \"none\"       # flex: none\n    },\n    negative=False\n)\n\n# Create flex factory\nflex = ScaledFactory(\"flex\", FLEX_CONFIG, \"Flex utilities for controlling how flex items both grow and shrink\") # The flex factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_flex_examples(\n):\n    \"\"\"Test flex utilities for combined grow/shrink properties.\"\"\"\n    # Test flex utilities\n    assert str(flex(1)) == \"flex-1\"\n    assert str(flex(2)) == \"flex-2\"\n    assert str(flex(\"1/2\")) == \"flex-1/2\"\n    assert str(flex.auto) == \"flex-auto\"\n    assert str(flex.initial) == \"flex-initial\"\n    assert str(flex.none) == \"flex-none\"\n    \n    # Arbitrary values\n    assert str(flex(\"2 2 0%\")) == \"flex-[2 2 0%]\"\n\n# Run the tests\ntest_flexbox_and_grid_flex_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#flex-grow-utilities",
    "href": "utilities/flexbox_and_grid.html#flex-grow-utilities",
    "title": "flexbox_and_grid",
    "section": "Flex Grow Utilities",
    "text": "Flex Grow Utilities\nControl how flex items grow.\n\nsource\n\nGrowFactory\n\n GrowFactory ()\n\nSpecial factory for grow that defaults to grow-1 when called without args.\n\nsource\n\n\ntest_flexbox_and_grid_grow_examples\n\n test_flexbox_and_grid_grow_examples ()\n\nTest flex grow utilities.\n\n\nExported source\n# Create flex grow factory\ngrow = GrowFactory() # The flex grow factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_grow_examples(\n):\n    \"\"\"Test flex grow utilities.\"\"\"\n    # Test flex grow utilities\n    assert str(grow()) == \"grow-1\" # which becomes grow-1\n    assert str(grow(0)) == \"grow-0\"\n    assert str(grow(1)) == \"grow-1\"\n    assert str(grow(2)) == \"grow-2\"\n    \n    # Arbitrary values\n    assert str(grow(\"3\")) == \"grow-3\"\n\n# Run the tests\ntest_flexbox_and_grid_grow_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#flex-shrink-utilities",
    "href": "utilities/flexbox_and_grid.html#flex-shrink-utilities",
    "title": "flexbox_and_grid",
    "section": "Flex Shrink Utilities",
    "text": "Flex Shrink Utilities\nControl how flex items shrink.\n\nsource\n\nShrinkFactory\n\n ShrinkFactory ()\n\nSpecial factory for shrink that defaults to shrink-1 when called without args.\n\nsource\n\n\ntest_flexbox_and_grid_shrink_examples\n\n test_flexbox_and_grid_shrink_examples ()\n\nTest flex shrink utilities.\n\n\nExported source\n# Create flex shrink factory\nshrink = ShrinkFactory() # The flex shrink factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_shrink_examples(\n):\n    \"\"\"Test flex shrink utilities.\"\"\"\n    # Test flex shrink utilities\n    assert str(shrink()) == \"shrink-1\" # which becomes shrink-1\n    assert str(shrink(0)) == \"shrink-0\"\n    assert str(shrink(1)) == \"shrink-1\"\n    assert str(shrink(2)) == \"shrink-2\"\n    \n    # Arbitrary values\n    assert str(shrink(\"3\")) == \"shrink-3\"\n\n# Run the tests\ntest_flexbox_and_grid_shrink_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#order-utilities",
    "href": "utilities/flexbox_and_grid.html#order-utilities",
    "title": "flexbox_and_grid",
    "section": "Order Utilities",
    "text": "Order Utilities\nControl the order of flex and grid items.\n\nsource\n\ntest_flexbox_and_grid_order_examples\n\n test_flexbox_and_grid_order_examples ()\n\nTest order utilities for flex and grid items.\n\n\nExported source\nORDER_CONFIG = ScaleConfig( # Order configuration - supports numeric values including negative\n    numeric=True,  # Support order-1, order-2, etc.\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"first\": \"first\",  # order: calc(-infinity)\n        \"last\": \"last\",    # order: calc(infinity)\n        \"none\": \"none\"     # order: 0\n    },\n    negative=True  # Support negative order values\n)\n\n# Create order factory\norder = ScaledFactory(\"order\", ORDER_CONFIG, \"Order utilities for controlling the order of flex and grid items\") # The order factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_order_examples(\n):\n    \"\"\"Test order utilities for flex and grid items.\"\"\"\n    # Test order utilities\n    assert str(order(1)) == \"order-1\"\n    assert str(order(2)) == \"order-2\"\n    assert str(order(12)) == \"order-12\"\n    assert str(order.first) == \"order-first\"\n    assert str(order.last) == \"order-last\"\n    assert str(order.none) == \"order-none\"\n    \n    # Negative values\n    assert str(order.negative(1)) == \"-order-1\"\n    assert str(order.negative(2)) == \"-order-2\"\n    \n    # Arbitrary values\n    assert str(order(\"999\")) == \"order-[999]\"\n\n# Run the tests\ntest_flexbox_and_grid_order_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#grid-template-columns-utilities",
    "href": "utilities/flexbox_and_grid.html#grid-template-columns-utilities",
    "title": "flexbox_and_grid",
    "section": "Grid Template Columns Utilities",
    "text": "Grid Template Columns Utilities\nSpecify the columns in a grid layout.\n\nsource\n\ntest_flexbox_and_grid_template_columns_examples\n\n test_flexbox_and_grid_template_columns_examples ()\n\nTest grid template columns utilities.\n\n\nExported source\nGRID_COLS_CONFIG = ScaleConfig( # Grid template columns configuration\n    numeric=True,  # Support grid-cols-1 through grid-cols-12\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"none\": \"none\",        # grid-template-columns: none\n        \"subgrid\": \"subgrid\"   # grid-template-columns: subgrid\n    },\n    negative=False\n)\n\n# Create grid columns factory\ngrid_cols = ScaledFactory(\"grid-cols\", GRID_COLS_CONFIG, \"Grid template columns utilities for specifying the columns in a grid layout\") # The grid columns factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_template_columns_examples(\n):\n    \"\"\"Test grid template columns utilities.\"\"\"\n    # Test grid template columns\n    assert str(grid_cols(1)) == \"grid-cols-1\"\n    assert str(grid_cols(2)) == \"grid-cols-2\"\n    assert str(grid_cols(3)) == \"grid-cols-3\"\n    assert str(grid_cols(12)) == \"grid-cols-12\"\n    assert str(grid_cols.none) == \"grid-cols-none\"\n    assert str(grid_cols.subgrid) == \"grid-cols-subgrid\"\n    \n    # Arbitrary values\n    assert str(grid_cols(\"200px 1fr 2fr\")) == \"grid-cols-[200px 1fr 2fr]\"\n\n# Run the tests\ntest_flexbox_and_grid_template_columns_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#grid-template-rows-utilities",
    "href": "utilities/flexbox_and_grid.html#grid-template-rows-utilities",
    "title": "flexbox_and_grid",
    "section": "Grid Template Rows Utilities",
    "text": "Grid Template Rows Utilities\nSpecify the rows in a grid layout.\n\nsource\n\ntest_flexbox_and_grid_template_rows_examples\n\n test_flexbox_and_grid_template_rows_examples ()\n\nTest grid template rows utilities.\n\n\nExported source\nGRID_ROWS_CONFIG = ScaleConfig( # Grid template rows configuration (same as columns)\n    numeric=True,  # Support grid-rows-1 through grid-rows-12\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"none\": \"none\",        # grid-template-rows: none\n        \"subgrid\": \"subgrid\"   # grid-template-rows: subgrid\n    },\n    negative=False\n)\n\n# Create grid rows factory\ngrid_rows = ScaledFactory(\"grid-rows\", GRID_ROWS_CONFIG, \"Grid template rows utilities for specifying the rows in a grid layout\") # The grid rows factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_template_rows_examples(\n):\n    \"\"\"Test grid template rows utilities.\"\"\"\n    # Test grid template rows\n    assert str(grid_rows(1)) == \"grid-rows-1\"\n    assert str(grid_rows(2)) == \"grid-rows-2\"\n    assert str(grid_rows(3)) == \"grid-rows-3\"\n    assert str(grid_rows(6)) == \"grid-rows-6\"\n    assert str(grid_rows.none) == \"grid-rows-none\"\n    assert str(grid_rows.subgrid) == \"grid-rows-subgrid\"\n    \n    # Arbitrary values\n    assert str(grid_rows(\"200px auto 1fr\")) == \"grid-rows-[200px auto 1fr]\"\n\n# Run the tests\ntest_flexbox_and_grid_template_rows_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#grid-column-utilities",
    "href": "utilities/flexbox_and_grid.html#grid-column-utilities",
    "title": "flexbox_and_grid",
    "section": "Grid Column Utilities",
    "text": "Grid Column Utilities\nControl how elements are sized and placed across grid columns.\n\nsource\n\nColFactory\n\n ColFactory ()\n\nSpecial factory for grid-column shorthand.\n\n\nExported source\nCOL_SPAN_CONFIG = ScaleConfig( # Grid column span configuration\n    numeric=True,  # Support col-span-1 through col-span-12\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"auto\": \"auto\",  # grid-column: auto\n        \"full\": \"full\"   # grid-column: 1 / -1\n    },\n    negative=False\n)\n\nCOL_START_END_CONFIG = ScaleConfig( # Grid column start/end configuration\n    numeric=True,  # Support col-start-1, col-end-13, etc.\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"auto\": \"auto\"\n    },\n    negative=True  # Support negative values like -col-start-1\n)\n\n# Create grid column factories\ncol_span = ScaledFactory(\"col-span\", COL_SPAN_CONFIG, \"Column span utilities for controlling how many columns an element spans\") # Column span factory\ncol_start = ScaledFactory(\"col-start\", COL_START_END_CONFIG, \"Column start utilities for controlling where an element starts\") # Column start factory\ncol_end = ScaledFactory(\"col-end\", COL_START_END_CONFIG, \"Column end utilities for controlling where an element ends\") # Column end factory\n\n\n\nsource\n\n\ntest_flexbox_and_grid_column_examples\n\n test_flexbox_and_grid_column_examples ()\n\nTest grid column utilities including span, start, and end.\n\n\nExported source\ncol = ColFactory() # The grid column factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_column_examples(\n):\n    \"\"\"Test grid column utilities including span, start, and end.\"\"\"\n    # Test grid column utilities\n    assert str(col_span(1)) == \"col-span-1\"\n    assert str(col_span(2)) == \"col-span-2\"\n    assert str(col_span(12)) == \"col-span-12\"\n    assert str(col_span.auto) == \"col-span-auto\"\n    assert str(col_span.full) == \"col-span-full\"\n    \n    # Column start/end\n    assert str(col_start(1)) == \"col-start-1\"\n    assert str(col_start(2)) == \"col-start-2\"\n    assert str(col_start.auto) == \"col-start-auto\"\n    assert str(col_end(13)) == \"col-end-13\"\n    assert str(col_end.auto) == \"col-end-auto\"\n    \n    # Negative values\n    assert str(col_start.negative(1)) == \"-col-start-1\"\n    assert str(col_end.negative(1)) == \"-col-end-1\"\n    \n    # Column shorthand\n    assert col.auto == \"col-auto\"\n    assert str(col(\"1 / 3\")) == \"col-[1 / 3]\"\n\n# Run the tests\ntest_flexbox_and_grid_column_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#grid-row-utilities",
    "href": "utilities/flexbox_and_grid.html#grid-row-utilities",
    "title": "flexbox_and_grid",
    "section": "Grid Row Utilities",
    "text": "Grid Row Utilities\nControl how elements are sized and placed across grid rows.\n\nsource\n\nRowFactory\n\n RowFactory ()\n\nSpecial factory for grid-row shorthand.\n\n\nExported source\nROW_SPAN_CONFIG = ScaleConfig( # Grid row span configuration (same as column)\n    numeric=True,  # Support row-span-1 through row-span-12\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"auto\": \"auto\",  # grid-row: auto\n        \"full\": \"full\"   # grid-row: 1 / -1\n    },\n    negative=False\n)\n\nROW_START_END_CONFIG = ScaleConfig( # Grid row start/end configuration (same as column)\n    numeric=True,  # Support row-start-1, row-end-13, etc.\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"auto\": \"auto\"\n    },\n    negative=True  # Support negative values\n)\n\n# Create grid row factories\nrow_span = ScaledFactory(\"row-span\", ROW_SPAN_CONFIG, \"Row span utilities for controlling how many rows an element spans\") # Row span factory\nrow_start = ScaledFactory(\"row-start\", ROW_START_END_CONFIG, \"Row start utilities for controlling where an element starts\") # Row start factory\nrow_end = ScaledFactory(\"row-end\", ROW_START_END_CONFIG, \"Row end utilities for controlling where an element ends\") # Row end factory\n\n\n\nsource\n\n\ntest_flexbox_and_grid_row_examples\n\n test_flexbox_and_grid_row_examples ()\n\nTest grid row utilities including span, start, and end.\n\n\nExported source\nrow = RowFactory() # The grid row factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_row_examples(\n):\n    \"\"\"Test grid row utilities including span, start, and end.\"\"\"\n    # Test grid row utilities\n    assert str(row_span(1)) == \"row-span-1\"\n    assert str(row_span(2)) == \"row-span-2\"\n    assert str(row_span(6)) == \"row-span-6\"\n    assert str(row_span.auto) == \"row-span-auto\"\n    assert str(row_span.full) == \"row-span-full\"\n    \n    # Row start/end\n    assert str(row_start(1)) == \"row-start-1\"\n    assert str(row_start(2)) == \"row-start-2\"\n    assert str(row_start.auto) == \"row-start-auto\"\n    assert str(row_end(7)) == \"row-end-7\"\n    assert str(row_end.auto) == \"row-end-auto\"\n    \n    # Negative values\n    assert str(row_start.negative(1)) == \"-row-start-1\"\n    assert str(row_end.negative(1)) == \"-row-end-1\"\n    \n    # Row shorthand\n    assert row.auto == \"row-auto\"\n    assert str(row(\"2 / 5\")) == \"row-[2 / 5]\"\n\n# Run the tests\ntest_flexbox_and_grid_row_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#grid-auto-flow-utilities",
    "href": "utilities/flexbox_and_grid.html#grid-auto-flow-utilities",
    "title": "flexbox_and_grid",
    "section": "Grid Auto Flow Utilities",
    "text": "Grid Auto Flow Utilities\nControl how elements in a grid are auto-placed.\n\nsource\n\ntest_flexbox_and_grid_flow_examples\n\n test_flexbox_and_grid_flow_examples ()\n\nTest grid auto flow utilities.\n\n\nExported source\nGRID_FLOW_VALUES = { # Grid auto flow utilities\n    \"row\": \"grid-flow-row\",\n    \"col\": \"grid-flow-col\",\n    \"dense\": \"grid-flow-dense\",\n    \"row-dense\": \"grid-flow-row-dense\",\n    \"col-dense\": \"grid-flow-col-dense\"\n}\n\n# Create grid flow factory\ngrid_flow = SimpleFactory(GRID_FLOW_VALUES, \"Grid auto flow utilities for controlling how elements in a grid are auto-placed\") # The grid flow factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_flow_examples(\n):\n    \"\"\"Test grid auto flow utilities.\"\"\"\n    # Test grid auto flow utilities\n    assert str(grid_flow.row) == \"grid-flow-row\"\n    assert str(grid_flow.col) == \"grid-flow-col\"\n    assert str(grid_flow.dense) == \"grid-flow-dense\"\n    assert str(grid_flow.row_dense) == \"grid-flow-row-dense\"\n    assert str(grid_flow.col_dense) == \"grid-flow-col-dense\"\n\n# Run the tests\ntest_flexbox_and_grid_flow_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#grid-auto-columnsrows-utilities",
    "href": "utilities/flexbox_and_grid.html#grid-auto-columnsrows-utilities",
    "title": "flexbox_and_grid",
    "section": "Grid Auto Columns/Rows Utilities",
    "text": "Grid Auto Columns/Rows Utilities\nControl the size of implicitly-created grid columns and rows.\n\nsource\n\nAutoColsFactory\n\n AutoColsFactory ()\n\nFactory for auto-cols with custom value support.\n\nsource\n\n\nAutoRowsFactory\n\n AutoRowsFactory ()\n\nFactory for auto-rows with custom value support.\n\nsource\n\n\ntest_flexbox_and_grid_auto_cols_rows_examples\n\n test_flexbox_and_grid_auto_cols_rows_examples ()\n\nTest grid auto columns and rows utilities.\n\n\nExported source\n# Create the factories\nauto_cols = AutoColsFactory() # The auto columns factory\nauto_rows = AutoRowsFactory() # The auto rows factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_auto_cols_rows_examples(\n):\n    \"\"\"Test grid auto columns and rows utilities.\"\"\"\n    # Test grid auto columns/rows\n    assert str(auto_cols.auto) == \"auto-cols-auto\"\n    assert str(auto_cols.min) == \"auto-cols-min\"\n    assert str(auto_cols.max) == \"auto-cols-max\"\n    assert str(auto_cols.fr) == \"auto-cols-fr\"\n    assert str(auto_cols(\"200px\")) == \"auto-cols-[200px]\"\n    assert str(auto_cols(\"--size\")) == \"auto-cols-(--size)\"\n    \n    assert str(auto_rows.auto) == \"auto-rows-auto\"\n    assert str(auto_rows.min) == \"auto-rows-min\"\n    assert str(auto_rows.max) == \"auto-rows-max\"\n    assert str(auto_rows.fr) == \"auto-rows-fr\"\n    assert str(auto_rows(\"minmax(0, 1fr)\")) == \"auto-rows-[minmax(0, 1fr)]\"\n\n# Run the tests\ntest_flexbox_and_grid_auto_cols_rows_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#gap-utilities",
    "href": "utilities/flexbox_and_grid.html#gap-utilities",
    "title": "flexbox_and_grid",
    "section": "Gap Utilities",
    "text": "Gap Utilities\nControl gutters between grid and flexbox items.\n\nsource\n\nGapFactory\n\n GapFactory ()\n\nSpecial factory for gap utilities that use hyphenated directions.\n\nsource\n\n\ntest_flexbox_and_grid_gap_examples\n\n test_flexbox_and_grid_gap_examples ()\n\nTest gap utilities for flexbox and grid containers.\n\n\nExported source\ngap = GapFactory() # The gap factory\n\n# Note: gap.x creates gap-x-* classes (column-gap)\n# Note: gap.y creates gap-y-* classes (row-gap)\n\n\n\n\nExported source\ndef test_flexbox_and_grid_gap_examples(\n):\n    \"\"\"Test gap utilities for flexbox and grid containers.\"\"\"\n    # Test gap utilities\n    assert str(gap(0)) == \"gap-0\"\n    assert str(gap(4)) == \"gap-4\"\n    assert str(gap(8)) == \"gap-8\"\n    assert str(gap.px) == \"gap-px\"\n    \n    # Directional gaps\n    assert str(gap.x(4)) == \"gap-x-4\"\n    assert str(gap.y(2)) == \"gap-y-2\"\n    \n    # Arbitrary values\n    assert str(gap(\"20px\")) == \"gap-[20px]\"\n    assert str(gap(\"--spacing\")) == \"gap-(--spacing)\"\n\n# Run the tests\ntest_flexbox_and_grid_gap_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#justify-content-utilities",
    "href": "utilities/flexbox_and_grid.html#justify-content-utilities",
    "title": "flexbox_and_grid",
    "section": "Justify Content Utilities",
    "text": "Justify Content Utilities\nControl how flex and grid items are positioned along a container’s main axis.\n\n\nExported source\nJUSTIFY_CONTENT_VALUES = { # Justify content values\n    \"start\": \"justify-start\",\n    \"end\": \"justify-end\",\n    \"end-safe\": \"justify-end-safe\",\n    \"center\": \"justify-center\",\n    \"center-safe\": \"justify-center-safe\",\n    \"between\": \"justify-between\",\n    \"around\": \"justify-around\",\n    \"evenly\": \"justify-evenly\",\n    \"stretch\": \"justify-stretch\",\n    \"baseline\": \"justify-baseline\",\n    \"normal\": \"justify-normal\"\n}\n\n# Create justify content factory\njustify = SimpleFactory(JUSTIFY_CONTENT_VALUES, \"Justify content utilities for positioning flex/grid items along container's main axis\") # The justify content factory",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#justify-items-utilities",
    "href": "utilities/flexbox_and_grid.html#justify-items-utilities",
    "title": "flexbox_and_grid",
    "section": "Justify Items Utilities",
    "text": "Justify Items Utilities\nControl how grid items are aligned along their inline axis.\n\n\nExported source\nJUSTIFY_ITEMS_VALUES = { # Justify items values\n    \"start\": \"justify-items-start\",\n    \"end\": \"justify-items-end\",\n    \"end-safe\": \"justify-items-end-safe\",\n    \"center\": \"justify-items-center\",\n    \"center-safe\": \"justify-items-center-safe\",\n    \"stretch\": \"justify-items-stretch\",\n    \"normal\": \"justify-items-normal\"\n}\n\n# Create justify items factory\njustify_items = SimpleFactory(JUSTIFY_ITEMS_VALUES, \"Justify items utilities for aligning grid items along their inline axis\") # The justify items factory",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#justify-self-utilities",
    "href": "utilities/flexbox_and_grid.html#justify-self-utilities",
    "title": "flexbox_and_grid",
    "section": "Justify Self Utilities",
    "text": "Justify Self Utilities\nControl how an individual grid item is aligned along its inline axis.\n\nsource\n\ntest_flexbox_and_grid_justify_examples\n\n test_flexbox_and_grid_justify_examples ()\n\nTest justify utilities for flex and grid containers.\n\n\nExported source\nJUSTIFY_SELF_VALUES = { # Justify self values\n    \"auto\": \"justify-self-auto\",\n    \"start\": \"justify-self-start\",\n    \"center\": \"justify-self-center\",\n    \"center-safe\": \"justify-self-center-safe\",\n    \"end\": \"justify-self-end\",\n    \"end-safe\": \"justify-self-end-safe\",\n    \"stretch\": \"justify-self-stretch\"\n}\n\n# Create justify self factory\njustify_self = SimpleFactory(JUSTIFY_SELF_VALUES, \"Justify self utilities for aligning individual grid items along their inline axis\") # The justify self factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_justify_examples(\n):\n    \"\"\"Test justify utilities for flex and grid containers.\"\"\"\n    # Test justify utilities\n    assert str(justify.start) == \"justify-start\"\n    assert str(justify.center) == \"justify-center\"\n    assert str(justify.between) == \"justify-between\"\n    assert str(justify.evenly) == \"justify-evenly\"\n    \n    assert str(justify_items.center) == \"justify-items-center\"\n    assert str(justify_items.stretch) == \"justify-items-stretch\"\n    \n    assert str(justify_self.auto) == \"justify-self-auto\"\n    assert str(justify_self.end) == \"justify-self-end\"\n\n# Run the tests\ntest_flexbox_and_grid_justify_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#align-content-utilities",
    "href": "utilities/flexbox_and_grid.html#align-content-utilities",
    "title": "flexbox_and_grid",
    "section": "Align Content Utilities",
    "text": "Align Content Utilities\nControl how rows are positioned in multi-row flex and grid containers.\n\n\nExported source\nALIGN_CONTENT_VALUES = { # Align content values\n    \"normal\": \"content-normal\",\n    \"center\": \"content-center\",\n    \"start\": \"content-start\",\n    \"end\": \"content-end\",\n    \"between\": \"content-between\",\n    \"around\": \"content-around\",\n    \"evenly\": \"content-evenly\",\n    \"baseline\": \"content-baseline\",\n    \"stretch\": \"content-stretch\"\n}\n\n# Create align content factory\ncontent = SimpleFactory(ALIGN_CONTENT_VALUES, \"Align content utilities for positioning rows in multi-row flex/grid containers\") # The align content factory",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#align-items-utilities",
    "href": "utilities/flexbox_and_grid.html#align-items-utilities",
    "title": "flexbox_and_grid",
    "section": "Align Items Utilities",
    "text": "Align Items Utilities\nControl how flex and grid items are positioned along a container’s cross axis.\n\n\nExported source\nALIGN_ITEMS_VALUES = { # Align items values\n    \"start\": \"items-start\",\n    \"end\": \"items-end\",\n    \"end-safe\": \"items-end-safe\",\n    \"center\": \"items-center\",\n    \"center-safe\": \"items-center-safe\",\n    \"baseline\": \"items-baseline\",\n    \"baseline-last\": \"items-baseline-last\",\n    \"stretch\": \"items-stretch\"\n}\n\n# Create align items factory\nitems = SimpleFactory(ALIGN_ITEMS_VALUES, \"Align items utilities for positioning flex/grid items along container's cross axis\") # The align items factory",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#align-self-utilities",
    "href": "utilities/flexbox_and_grid.html#align-self-utilities",
    "title": "flexbox_and_grid",
    "section": "Align Self Utilities",
    "text": "Align Self Utilities\nControl how an individual flex or grid item is positioned along its container’s cross axis.\n\nsource\n\ntest_flexbox_and_grid_align_examples\n\n test_flexbox_and_grid_align_examples ()\n\nTest align utilities for flex and grid containers.\n\n\nExported source\nALIGN_SELF_VALUES = { # Align self values\n    \"auto\": \"self-auto\",\n    \"start\": \"self-start\",\n    \"end\": \"self-end\",\n    \"end-safe\": \"self-end-safe\",\n    \"center\": \"self-center\",\n    \"center-safe\": \"self-center-safe\",\n    \"stretch\": \"self-stretch\",\n    \"baseline\": \"self-baseline\",\n    \"baseline-last\": \"self-baseline-last\"\n}\n\n# Create align self factory\nself_align = SimpleFactory(ALIGN_SELF_VALUES, \"Align self utilities for positioning individual flex/grid items along container's cross axis\") # The align self factory (renamed to avoid conflict with Python's self)\n\n\n\n\nExported source\ndef test_flexbox_and_grid_align_examples(\n):\n    \"\"\"Test align utilities for flex and grid containers.\"\"\"\n    # Test align utilities\n    assert str(content.center) == \"content-center\"\n    assert str(content.between) == \"content-between\"\n    assert str(content.stretch) == \"content-stretch\"\n    \n    assert str(items.center) == \"items-center\"\n    assert str(items.start) == \"items-start\"\n    assert str(items.baseline) == \"items-baseline\"\n    \n    assert str(self_align.auto) == \"self-auto\"\n    assert str(self_align.center) == \"self-center\"\n    assert str(self_align.stretch) == \"self-stretch\"\n\n# Run the tests\ntest_flexbox_and_grid_align_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#place-content-utilities",
    "href": "utilities/flexbox_and_grid.html#place-content-utilities",
    "title": "flexbox_and_grid",
    "section": "Place Content Utilities",
    "text": "Place Content Utilities\nControl how content is justified and aligned at the same time.\n\n\nExported source\nPLACE_CONTENT_VALUES = { # Place content values\n    \"center\": \"place-content-center\",\n    \"center-safe\": \"place-content-center-safe\",\n    \"start\": \"place-content-start\",\n    \"end\": \"place-content-end\",\n    \"end-safe\": \"place-content-end-safe\",\n    \"between\": \"place-content-between\",\n    \"around\": \"place-content-around\",\n    \"evenly\": \"place-content-evenly\",\n    \"baseline\": \"place-content-baseline\",\n    \"stretch\": \"place-content-stretch\"\n}\n\n# Create place content factory\nplace_content = SimpleFactory(PLACE_CONTENT_VALUES, \"Place content utilities for aligning content both horizontally and vertically\") # The place content factory",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#place-items-utilities",
    "href": "utilities/flexbox_and_grid.html#place-items-utilities",
    "title": "flexbox_and_grid",
    "section": "Place Items Utilities",
    "text": "Place Items Utilities\nControl how items are justified and aligned at the same time.\n\n\nExported source\nPLACE_ITEMS_VALUES = { # Place items values\n    \"start\": \"place-items-start\",\n    \"end\": \"place-items-end\",\n    \"end-safe\": \"place-items-end-safe\",\n    \"center\": \"place-items-center\",\n    \"center-safe\": \"place-items-center-safe\",\n    \"baseline\": \"place-items-baseline\",\n    \"stretch\": \"place-items-stretch\"\n}\n\n# Create place items factory\nplace_items = SimpleFactory(PLACE_ITEMS_VALUES, \"Place items utilities for aligning items both horizontally and vertically\") # The place items factory",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#place-self-utilities",
    "href": "utilities/flexbox_and_grid.html#place-self-utilities",
    "title": "flexbox_and_grid",
    "section": "Place Self Utilities",
    "text": "Place Self Utilities\nControl how an individual item is justified and aligned at the same time.\n\nsource\n\ntest_flexbox_and_grid_place_examples\n\n test_flexbox_and_grid_place_examples ()\n\nTest place utilities for grid containers.\n\n\nExported source\nPLACE_SELF_VALUES = { # Place self values\n    \"auto\": \"place-self-auto\",\n    \"start\": \"place-self-start\",\n    \"end\": \"place-self-end\",\n    \"end-safe\": \"place-self-end-safe\",\n    \"center\": \"place-self-center\",\n    \"center-safe\": \"place-self-center-safe\",\n    \"stretch\": \"place-self-stretch\"\n}\n\n# Create place self factory\nplace_self = SimpleFactory(PLACE_SELF_VALUES, \"Place self utilities for aligning individual items both horizontally and vertically\") # The place self factory\n\n\n\n\nExported source\ndef test_flexbox_and_grid_place_examples(\n):\n    \"\"\"Test place utilities for grid containers.\"\"\"\n    # Test place utilities\n    assert str(place_content.center) == \"place-content-center\"\n    assert str(place_content.between) == \"place-content-between\"\n    \n    assert str(place_items.center) == \"place-items-center\"\n    assert str(place_items.stretch) == \"place-items-stretch\"\n    \n    assert str(place_self.auto) == \"place-self-auto\"\n    assert str(place_self.center) == \"place-self-center\"\n\n# Run the tests\ntest_flexbox_and_grid_place_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#practical-examples",
    "href": "utilities/flexbox_and_grid.html#practical-examples",
    "title": "flexbox_and_grid",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these flexbox and grid utilities in real FastHTML components:\n\nsource\n\ntest_flexbox_and_grid_fasthtml_examples\n\n test_flexbox_and_grid_fasthtml_examples ()\n\nTest flexbox and grid utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_flexbox_and_grid_fasthtml_examples(\n):\n    \"\"\"Test flexbox and grid utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Header, Nav, Main, Article, Aside, Footer, Img, Button, H1, H2, P\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.typography import font_weight, font_size, text_color, text_align\n    from cjm_fasthtml_tailwind.utilities.sizing import h, min_h\n    from cjm_fasthtml_tailwind.utilities.spacing import p, m\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    \n    # Flexbox centered navigation\n    nav = Nav(\n        Div(\"Logo\", cls=str(font_weight.bold)),\n        Div(\n            \"Home\", \"About\", \"Contact\",\n            cls=combine_classes(flex_display, gap(4))\n        ),\n        Button(\"Sign In\"),\n        cls=combine_classes(\n            flex_display, \n            justify.between, \n            items.center, \n            p.x(6), \n            p.y(4)\n        )\n    )\n    assert nav.attrs['class'] == \"flex justify-between items-center px-6 py-4\"\n    \n    # Grid layout for cards\n    card_grid = Div(\n        *[Div(f\"Card {i}\", cls=combine_classes(p(4), bg.gray._100, rounded.full)) for i in range(6)],\n        cls=combine_classes(\n            grid_display,\n            grid_cols(1),     # 1 column on mobile\n            grid_cols(2).md, # 2 columns on medium screens\n            grid_cols(3).lg, # 3 columns on large screens\n            gap(4)\n        )\n    )\n    assert card_grid.attrs['class'] == \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"\n    \n    # Flexbox vertical centering\n    hero = Div(\n        H1(\"Welcome\", cls=combine_classes(font_size._4xl, font_weight.bold)),\n        P(\"Build amazing things\"),\n        Button(\"Get Started\", cls=str(m.t(4))),\n        cls=combine_classes(\n            flex_display,\n            flex_direction.col,\n            justify.center,\n            items.center,\n            min_h.screen,\n            text_align.center\n        )\n    )\n    assert hero.attrs['class'] == \"flex flex-col justify-center items-center min-h-screen text-center\"\n    \n    # Complex grid layout with spanning\n    dashboard = Div(\n        # Header spans full width\n        Header(\"Dashboard\", cls=combine_classes(col_span.full, p(4), bg.blue._500, text_color.white)),\n        \n        # Sidebar\n        Aside(\"Sidebar\", cls=combine_classes(row_span(2), p(4), bg.gray._200)),\n        \n        # Main content\n        Main(\"Main Content\", cls=combine_classes(col_span(2), p(4))),\n        \n        # Stats cards\n        Div(\"Stat 1\", cls=combine_classes(p(4), bg.green._100)),\n        Div(\"Stat 2\", cls=combine_classes(p(4), bg.yellow._100)),\n        \n        cls=combine_classes(\n            grid_display,\n            grid_cols(3),\n            grid_rows(3),\n            gap(4),\n            h.screen\n        )\n    )\n    assert dashboard.attrs['class'] == \"grid grid-cols-3 grid-rows-3 gap-4 h-screen\"\n    \n    # Flexbox with growing/shrinking items\n    toolbar = Div(\n        Button(\"Back\", cls=str(shrink(0))),  # Don't shrink\n        Div(\"Search...\", cls=combine_classes(grow(), p.x(4), bg.gray._100, rounded.full)),  # Take available space\n        Button(\"Settings\", cls=str(shrink(0))),  # Don't shrink\n        cls=combine_classes(flex_display, gap(2), items.center, p(2))\n    )\n    assert toolbar.attrs['class'] == \"flex gap-2 items-center p-2\"\n    assert toolbar.children[1].attrs['class'] == \"grow-1 px-4 bg-gray-100 rounded-full\"\n    \n    # Return all examples in a grid layout\n    return Div(\n        nav,\n        card_grid,\n        hero,\n        dashboard,\n        toolbar,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_flexbox_and_grid_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;nav class=\"flex justify-between items-center px-6 py-4\"&gt;\n    &lt;div class=\"font-bold\"&gt;Logo&lt;/div&gt;\n    &lt;div class=\"flex gap-4\"&gt;\nHomeAboutContact    &lt;/div&gt;\n&lt;button&gt;Sign In&lt;/button&gt;  &lt;/nav&gt;\n  &lt;div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"&gt;\n    &lt;div class=\"p-4 bg-gray-100 rounded-full\"&gt;Card 0&lt;/div&gt;\n    &lt;div class=\"p-4 bg-gray-100 rounded-full\"&gt;Card 1&lt;/div&gt;\n    &lt;div class=\"p-4 bg-gray-100 rounded-full\"&gt;Card 2&lt;/div&gt;\n    &lt;div class=\"p-4 bg-gray-100 rounded-full\"&gt;Card 3&lt;/div&gt;\n    &lt;div class=\"p-4 bg-gray-100 rounded-full\"&gt;Card 4&lt;/div&gt;\n    &lt;div class=\"p-4 bg-gray-100 rounded-full\"&gt;Card 5&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"flex flex-col justify-center items-center min-h-screen text-center\"&gt;\n    &lt;h1 class=\"text-4xl font-bold\"&gt;Welcome&lt;/h1&gt;\n    &lt;p&gt;Build amazing things&lt;/p&gt;\n&lt;button class=\"mt-4\"&gt;Get Started&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"grid grid-cols-3 grid-rows-3 gap-4 h-screen\"&gt;\n    &lt;header class=\"col-span-full p-4 bg-blue-500 text-white\"&gt;Dashboard&lt;/header&gt;\n    &lt;aside class=\"row-span-2 p-4 bg-gray-200\"&gt;Sidebar&lt;/aside&gt;\n&lt;main class=\"col-span-2 p-4\"&gt;Main Content&lt;/main&gt;    &lt;div class=\"p-4 bg-green-100\"&gt;Stat 1&lt;/div&gt;\n    &lt;div class=\"p-4 bg-yellow-100\"&gt;Stat 2&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"flex gap-2 items-center p-2\"&gt;\n&lt;button class=\"shrink-0\"&gt;Back&lt;/button&gt;    &lt;div class=\"grow-1 px-4 bg-gray-100 rounded-full\"&gt;Search...&lt;/div&gt;\n&lt;button class=\"shrink-0\"&gt;Settings&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_flexbox_and_grid_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#helper-functions",
    "href": "utilities/flexbox_and_grid.html#helper-functions",
    "title": "flexbox_and_grid",
    "section": "Helper Functions",
    "text": "Helper Functions\nConvenient functions for common flexbox and grid patterns:\n\nsource\n\nflex_center\n\n flex_center ()\n\nCreate classes for a flex container that centers its content.\n\nsource\n\n\nflex_between\n\n flex_between ()\n\nCreate classes for a flex container with space between items.\n\nsource\n\n\nflex_col_center\n\n flex_col_center ()\n\nCreate classes for a vertical flex container that centers its content.\n\nsource\n\n\ngrid_center\n\n grid_center ()\n\nCreate classes for a grid container that centers its content.\n\nsource\n\n\nresponsive_grid\n\n responsive_grid (mobile:int=1, tablet:int=2, desktop:int=3,\n                  gap_size:Union[int,float,str]=4)\n\nCreate responsive grid classes with customizable breakpoints.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmobile\nint\n1\nNumber of columns on mobile devices\n\n\ntablet\nint\n2\nNumber of columns on tablet devices\n\n\ndesktop\nint\n3\nNumber of columns on desktop devices\n\n\ngap_size\nUnion\n4\nGap size between grid items\n\n\nReturns\nstr\n\nCombined CSS classes for responsive grid\n\n\n\n\nsource\n\n\ntest_flexbox_and_grid_helper_examples\n\n test_flexbox_and_grid_helper_examples ()\n\nTest helper functions for common flexbox and grid patterns.\n\n\nExported source\ndef test_flexbox_and_grid_helper_examples(\n):\n    \"\"\"Test helper functions for common flexbox and grid patterns.\"\"\"\n    # Test helper functions\n    assert flex_center() == \"flex justify-center items-center\"\n    assert flex_between() == \"flex justify-between items-center\"\n    assert flex_col_center() == \"flex flex-col justify-center items-center\"\n    assert grid_center() == \"grid place-items-center\"\n    assert responsive_grid() == \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"\n    assert responsive_grid(1, 3, 4, 6) == \"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6\" # Custom responsive grid\n\n# Run the tests\ntest_flexbox_and_grid_helper_examples()",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "utilities/flexbox_and_grid.html#export",
    "href": "utilities/flexbox_and_grid.html#export",
    "title": "flexbox_and_grid",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "flexbox_and_grid"
    ]
  },
  {
    "objectID": "cli/dynamic_examples.html",
    "href": "cli/dynamic_examples.html",
    "title": "Dynamic Example Helpers",
    "section": "",
    "text": "source",
    "crumbs": [
      "cli",
      "Dynamic Example Helpers"
    ]
  },
  {
    "objectID": "cli/dynamic_examples.html#export",
    "href": "cli/dynamic_examples.html#export",
    "title": "Dynamic Example Helpers",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "Dynamic Example Helpers"
    ]
  },
  {
    "objectID": "cli/imports.html",
    "href": "cli/imports.html",
    "title": "imports",
    "section": "",
    "text": "source",
    "crumbs": [
      "cli",
      "imports"
    ]
  },
  {
    "objectID": "cli/imports.html#export",
    "href": "cli/imports.html#export",
    "title": "imports",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "imports"
    ]
  },
  {
    "objectID": "cli/search.html",
    "href": "cli/search.html",
    "title": "Search Functions",
    "section": "",
    "text": "source",
    "crumbs": [
      "cli",
      "Search Functions"
    ]
  },
  {
    "objectID": "cli/search.html#export",
    "href": "cli/search.html#export",
    "title": "Search Functions",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "Search Functions"
    ]
  },
  {
    "objectID": "cli/display.html",
    "href": "cli/display.html",
    "title": "Display Functions",
    "section": "",
    "text": "source",
    "crumbs": [
      "cli",
      "Display Functions"
    ]
  },
  {
    "objectID": "cli/display.html#export",
    "href": "cli/display.html#export",
    "title": "Display Functions",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "Display Functions"
    ]
  },
  {
    "objectID": "cli/cli_config.html",
    "href": "cli/cli_config.html",
    "title": "CLI Configuration",
    "section": "",
    "text": "Define the configuration structure for library-specific CLI tools:\n\nsource\n\n\n\n LibraryConfig (package_name:str, cli_command:str, display_name:str,\n                module_discovery_paths:List[str], core_package:str,\n                core_utilities:List[Tuple[str,str]],\n                base_imports:List[str]=&lt;factory&gt;,\n                css_class_prefix:Optional[str]=None,\n                test_pattern_prefix:str='test_',\n                test_pattern_suffix:str='_examples',\n                helper_test_suffix:str='helper_examples')\n\nConfiguration for a specific library’s CLI tool.",
    "crumbs": [
      "cli",
      "CLI Configuration"
    ]
  },
  {
    "objectID": "cli/cli_config.html#configuration-class",
    "href": "cli/cli_config.html#configuration-class",
    "title": "CLI Configuration",
    "section": "",
    "text": "Define the configuration structure for library-specific CLI tools:\n\nsource\n\n\n\n LibraryConfig (package_name:str, cli_command:str, display_name:str,\n                module_discovery_paths:List[str], core_package:str,\n                core_utilities:List[Tuple[str,str]],\n                base_imports:List[str]=&lt;factory&gt;,\n                css_class_prefix:Optional[str]=None,\n                test_pattern_prefix:str='test_',\n                test_pattern_suffix:str='_examples',\n                helper_test_suffix:str='helper_examples')\n\nConfiguration for a specific library’s CLI tool.",
    "crumbs": [
      "cli",
      "CLI Configuration"
    ]
  },
  {
    "objectID": "cli/cli_config.html#predefined-configurations",
    "href": "cli/cli_config.html#predefined-configurations",
    "title": "CLI Configuration",
    "section": "Predefined Configurations",
    "text": "Predefined Configurations\nDefine configurations for specific libraries:\n\nsource\n\nget_tailwind_config\n\n get_tailwind_config ()\n\nGet configuration for cjm-fasthtml-tailwind library.",
    "crumbs": [
      "cli",
      "CLI Configuration"
    ]
  },
  {
    "objectID": "cli/cli_config.html#configuration-management",
    "href": "cli/cli_config.html#configuration-management",
    "title": "CLI Configuration",
    "section": "Configuration Management",
    "text": "Configuration Management\nFunctions to manage the active configuration:\n\nsource\n\nget_active_config\n\n get_active_config ()\n\nGet the active library configuration. If no configuration is set, returns the Tailwind config.\n\nsource\n\n\nset_active_config\n\n set_active_config (config:__main__.LibraryConfig)\n\nSet the active library configuration.\n\n\n\n\nType\nDetails\n\n\n\n\nconfig\nLibraryConfig\nThe library configuration to set as active\n\n\n\n\nsource\n\n\nreset_config\n\n reset_config ()\n\nReset the active configuration to force re-detection.",
    "crumbs": [
      "cli",
      "CLI Configuration"
    ]
  },
  {
    "objectID": "cli/cli_config.html#configuration-factory",
    "href": "cli/cli_config.html#configuration-factory",
    "title": "CLI Configuration",
    "section": "Configuration Factory",
    "text": "Configuration Factory\nFactory function to get configuration by name:\n\nsource\n\nget_config_by_name\n\n get_config_by_name (name:str)\n\nGet a library configuration by name.\n\n\n\n\nType\nDetails\n\n\n\n\nname\nstr\nLibrary name (‘tailwind’)\n\n\nReturns\nOptional\nLibraryConfig or None if not found",
    "crumbs": [
      "cli",
      "CLI Configuration"
    ]
  },
  {
    "objectID": "cli/cli_config.html#configuration-utilities",
    "href": "cli/cli_config.html#configuration-utilities",
    "title": "CLI Configuration",
    "section": "Configuration Utilities",
    "text": "Configuration Utilities\nHelper functions for working with configurations:\n\nsource\n\nlist_available_configs\n\n list_available_configs ()\n\nList all available library configurations.\n\nsource\n\n\nget_config_info\n\n get_config_info (config:__main__.LibraryConfig)\n\nGet information about a configuration.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nconfig\nLibraryConfig\nThe library configuration to get information about\n\n\nReturns\nDict\nDictionary with configuration details",
    "crumbs": [
      "cli",
      "CLI Configuration"
    ]
  },
  {
    "objectID": "cli/cli_config.html#export",
    "href": "cli/cli_config.html#export",
    "title": "CLI Configuration",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "CLI Configuration"
    ]
  },
  {
    "objectID": "cli/test_code.html",
    "href": "cli/test_code.html",
    "title": "Test Code Functionality",
    "section": "",
    "text": "source",
    "crumbs": [
      "cli",
      "Test Code Functionality"
    ]
  },
  {
    "objectID": "cli/test_code.html#export",
    "href": "cli/test_code.html#export",
    "title": "Test Code Functionality",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "Test Code Functionality"
    ]
  },
  {
    "objectID": "builders/colors.html",
    "href": "builders/colors.html",
    "title": "colors",
    "section": "",
    "text": "Define enums for the 22 Tailwind color families and 11 shade values:\n\nsource\n\n\n\n ColorFamily (value, names=None, module=None, qualname=None, type=None,\n              start=1, boundary=None)\n\nTailwind CSS color families.\n\nsource\n\n\n\n\n ColorShade (value, names=None, module=None, qualname=None, type=None,\n             start=1, boundary=None)\n\nTailwind CSS color shade values.",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#color-enums",
    "href": "builders/colors.html#color-enums",
    "title": "colors",
    "section": "",
    "text": "Define enums for the 22 Tailwind color families and 11 shade values:\n\nsource\n\n\n\n ColorFamily (value, names=None, module=None, qualname=None, type=None,\n              start=1, boundary=None)\n\nTailwind CSS color families.\n\nsource\n\n\n\n\n ColorShade (value, names=None, module=None, qualname=None, type=None,\n             start=1, boundary=None)\n\nTailwind CSS color shade values.",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#special-color-values",
    "href": "builders/colors.html#special-color-values",
    "title": "colors",
    "section": "Special Color Values",
    "text": "Special Color Values\nDefine special color values that are available in addition to the color families:",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#color-value-types",
    "href": "builders/colors.html#color-value-types",
    "title": "colors",
    "section": "Color Value Types",
    "text": "Color Value Types\nDefine types for color values:",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#color-validation",
    "href": "builders/colors.html#color-validation",
    "title": "colors",
    "section": "Color Validation",
    "text": "Color Validation\nFunctions to validate and parse color values:\n\nsource\n\nis_valid_color_family\n\n is_valid_color_family (value:str)\n\nCheck if a value is a valid Tailwind color family.\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nstr\nThe value to check\n\n\nReturns\nbool\nTrue if value is a valid color family\n\n\n\n\nsource\n\n\nis_valid_shade\n\n is_valid_shade (value:str)\n\nCheck if a value is a valid Tailwind shade.\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nstr\nThe value to check\n\n\nReturns\nbool\nTrue if value is a valid shade\n\n\n\n\nsource\n\n\nparse_color_spec\n\n parse_color_spec (value:Union[str,tuple[Union[__main__.ColorFamily,str],U\n                   nion[__main__.ColorShade,str]]])\n\n*Parse a color specification into family and shade.\nExamples: - “red-500” -&gt; (“red”, “500”) - (“red”, “500”) -&gt; (“red”, “500”) - “transparent” -&gt; (“transparent”, None)*\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nUnion\nThe color specification to parse\n\n\nReturns\ntuple\nTuple of (color_family, shade) or (special_color, None)",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#colored-utility-class",
    "href": "builders/colors.html#colored-utility-class",
    "title": "colors",
    "section": "Colored Utility Class",
    "text": "Colored Utility Class\nA utility class that supports Tailwind colors with opacity:\n\nsource\n\nColoredUtility\n\n ColoredUtility (prefix:str, color:Union[str,tuple[Union[__main__.ColorFam\n                 ily,str],Union[__main__.ColorShade,str]],NoneType]=None,\n                 opacity:Union[int,str,NoneType]=None)\n\nUtility class with color and opacity support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nThe utility prefix (e.g., ‘bg’, ‘text’, ‘border’)\n\n\ncolor\nUnion\nNone\nThe color value\n\n\nopacity\nUnion\nNone\nOptional opacity value (0-100 or arbitrary)",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#colored-factory",
    "href": "builders/colors.html#colored-factory",
    "title": "colors",
    "section": "Colored Factory",
    "text": "Colored Factory\nFactory for creating color-based utilities with convenient API:\n\nsource\n\nColoredFactory\n\n ColoredFactory (prefix:str, doc:Optional[str]=None)\n\nFactory for creating color-based utilities.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nThe utility prefix (e.g., ‘bg’, ‘text’, ‘border’)\n\n\ndoc\nOptional\nNone\nOptional documentation string",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#color-family-proxy",
    "href": "builders/colors.html#color-family-proxy",
    "title": "colors",
    "section": "Color Family Proxy",
    "text": "Color Family Proxy\nA proxy class to handle color family attribute access (e.g., bg.red.500):\n\nsource\n\nColorFamilyProxy\n\n ColorFamilyProxy (prefix:str, color_family:str)\n\nProxy for accessing color shades via dot notation.\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix\n\n\ncolor_family\nstr\nThe color family name",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#examples",
    "href": "builders/colors.html#examples",
    "title": "colors",
    "section": "Examples",
    "text": "Examples\nTest the color system with various use cases:\n\n# Test basic color usage\nbg = ColoredFactory(\"bg\", \"Background color utilities\")\nprint(bg.red._500)\n\n# Test standard color-shade combinations\nassert str(bg.red._500) == \"bg-red-500\"\nassert str(bg.blue._300) == \"bg-blue-300\"\nassert str(bg.green._950) == \"bg-green-950\"\n\nbg-red-500\n\n\n\n# Test color family proxy access\nassert str(bg.red._500) == \"bg-red-500\"\nassert str(bg.blue._300) == \"bg-blue-300\"\nassert str(bg.slate._950) == \"bg-slate-950\"\n\n# Test with ColorShade enum\nassert str(bg.red(ColorShade.SHADE_500)) == \"bg-red-500\"\n\n\n# Test special colors\nassert str(bg.transparent) == \"bg-transparent\"\nassert str(bg.black) == \"bg-black\"\nassert str(bg.white) == \"bg-white\"\nassert str(bg.current) == \"bg-current\"\nassert str(bg.inherit) == \"bg-inherit\"\n\n\n# Test opacity modifiers\nassert str(bg.red._500.opacity(50)) == \"bg-red-500/50\"\nassert str(bg.blue._300.opacity(75)) == \"bg-blue-300/75\"\nassert str(bg.black.opacity(10)) == \"bg-black/10\"\n\n# Test opacity with arbitrary values\nassert str(bg.red._500.opacity(\"[0.87]\")) == \"bg-red-500/[0.87]\"\n\n\n# Test arbitrary color values\nassert str(bg(\"#ff0000\")) == \"bg-[#ff0000]\"\nassert str(bg(\"rgb(255, 0, 0)\")) == \"bg-[rgb(255, 0, 0)]\"\nassert str(bg(\"hsl(0, 100%, 50%)\")) == \"bg-[hsl(0, 100%, 50%)]\"\n\n\n# Test CSS custom properties\nassert str(bg(\"--custom-bg\")) == \"bg-(--custom-bg)\"\nassert str(bg(\"--theme-primary\")) == \"bg-(--theme-primary)\"\n\n# Test with opacity\nassert str(bg(\"--custom-bg\", opacity=50)) == \"bg-(--custom-bg)/50\"\n\n\n# Test factory call syntax\nassert str(bg(\"red-500\")) == \"bg-red-500\"\nassert str(bg(\"red-500\", opacity=75)) == \"bg-red-500/75\"\nassert str(bg((ColorFamily.BLUE, ColorShade.SHADE_300))) == \"bg-blue-300\"\nassert str(bg((ColorFamily.GREEN, \"500\"))) == \"bg-green-500\"",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#test-functions",
    "href": "builders/colors.html#test-functions",
    "title": "colors",
    "section": "Test Functions",
    "text": "Test Functions\nComprehensive test functions following the project’s naming convention:\n\nsource\n\ntest_colors_enum_examples\n\n test_colors_enum_examples ()\n\nTest color family and shade enums.\n\nsource\n\n\ntest_colors_validation_examples\n\n test_colors_validation_examples ()\n\nTest color validation functions.\n\nsource\n\n\ntest_colors_factory_examples\n\n test_colors_factory_examples ()\n\nTest ColoredFactory with various color specifications.\n\nsource\n\n\ntest_colors_opacity_examples\n\n test_colors_opacity_examples ()\n\nTest opacity modifiers with color utilities.\n\nsource\n\n\ntest_colors_arbitrary_examples\n\n test_colors_arbitrary_examples ()\n\nTest arbitrary color values and custom properties.\n\nsource\n\n\ntest_colors_proxy_examples\n\n test_colors_proxy_examples ()\n\nTest ColorFamilyProxy for dot notation access.",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#practical-examples",
    "href": "builders/colors.html#practical-examples",
    "title": "colors",
    "section": "Practical Examples",
    "text": "Practical Examples\nTest with multiple utility prefixes to show the color system is reusable:\n\nsource\n\ntest_colors_multiple_utilities_examples\n\n test_colors_multiple_utilities_examples ()\n\nTest color system with multiple utility types.\n\nsource\n\n\ntest_colors_practical_usage_examples\n\n test_colors_practical_usage_examples ()\n\nTest practical usage patterns with FastHTML components.\n\nsource\n\n\ntest_colors_modifier_examples\n\n test_colors_modifier_examples ()\n\nTest color utilities with modifiers for conditional styling.",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#helper-functions",
    "href": "builders/colors.html#helper-functions",
    "title": "colors",
    "section": "Helper Functions",
    "text": "Helper Functions\nUtility functions for working with colors:\n\nsource\n\nget_all_color_families\n\n get_all_color_families ()\n\nGet list of all Tailwind color family names.\n\nsource\n\n\nget_all_shades\n\n get_all_shades ()\n\nGet list of all Tailwind shade values.\n\nsource\n\n\nget_all_color_specs\n\n get_all_color_specs ()\n\nGet list of all valid color-shade combinations.\n\n# Test helper functions\nfamilies = get_all_color_families()\nassert len(families) == 22\nassert \"red\" in families\nassert \"blue\" in families\nassert \"slate\" in families\n\nshades = get_all_shades()\nassert len(shades) == 11\nassert \"50\" in shades\nassert \"500\" in shades\nassert \"950\" in shades\n\nspecs = get_all_color_specs()\nassert len(specs) == 22 * 11  # 242 combinations\nassert \"red-500\" in specs\nassert \"blue-300\" in specs\nassert \"slate-950\" in specs\n\nprint(\"✅ All color helper functions work correctly!\")\n\n✅ All color helper functions work correctly!",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#documentation-test",
    "href": "builders/colors.html#documentation-test",
    "title": "colors",
    "section": "Documentation Test",
    "text": "Documentation Test\nTest that the factory provides proper documentation:\n\nsource\n\ntest_colors_factory_documentation\n\n test_colors_factory_documentation ()\n\nTest that color factories have proper documentation.",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/scales.html",
    "href": "builders/scales.html",
    "title": "scales",
    "section": "",
    "text": "Define the standard numeric scales used by Tailwind CSS:\n\nsource\n\n\n\n generate_fractions ()\n\nGenerate all valid Tailwind fractions.",
    "crumbs": [
      "builders",
      "scales"
    ]
  },
  {
    "objectID": "builders/scales.html#numeric-scale-definitions",
    "href": "builders/scales.html#numeric-scale-definitions",
    "title": "scales",
    "section": "",
    "text": "Define the standard numeric scales used by Tailwind CSS:\n\nsource\n\n\n\n generate_fractions ()\n\nGenerate all valid Tailwind fractions.",
    "crumbs": [
      "builders",
      "scales"
    ]
  },
  {
    "objectID": "builders/scales.html#scale-builders",
    "href": "builders/scales.html#scale-builders",
    "title": "scales",
    "section": "Scale Builders",
    "text": "Scale Builders\nBuilders for creating utilities with different scale types:\n\nsource\n\nScaleConfig\n\n ScaleConfig (numeric:bool=True, decimals:bool=False,\n              fractions:bool=False, named:Optional[List[cjm_fasthtml_tailw\n              ind.core.base.NamedScale]]=None,\n              special:Optional[Dict[str,str]]=None, negative:bool=False)\n\nConfiguration for a scale builder.\n\nsource\n\n\nScaledUtility\n\n ScaledUtility (prefix:str, config:__main__.ScaleConfig,\n                negative:bool=False)\n\nUtility class with scale support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nThe utility prefix (e.g., ‘w’, ‘h’, ‘p’)\n\n\nconfig\nScaleConfig\n\nConfiguration defining valid scales and values\n\n\nnegative\nbool\nFalse\nWhether this is a negative variant",
    "crumbs": [
      "builders",
      "scales"
    ]
  },
  {
    "objectID": "builders/scales.html#scale-factory",
    "href": "builders/scales.html#scale-factory",
    "title": "scales",
    "section": "Scale Factory",
    "text": "Scale Factory\nEnhanced factory that supports all scale types:\n\nsource\n\nScaledFactory\n\n ScaledFactory (prefix:Optional[str]=None,\n                config:Optional[__main__.ScaleConfig]=None,\n                doc:Optional[str]=None)\n\nFactory for creating scaled utilities with enhanced attribute access.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nOptional\nNone\nThe utility prefix (e.g., ‘w’, ‘h’, ‘p’)\n\n\nconfig\nOptional\nNone\nConfiguration defining valid scales and values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\nsource\n\n\nNegativeFactory\n\n NegativeFactory (prefix:str, config:__main__.ScaleConfig)\n\nFactory for creating negative variants.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix (e.g., ‘m’, ‘inset’)\n\n\nconfig\nScaleConfig\nConfiguration defining valid scales and values",
    "crumbs": [
      "builders",
      "scales"
    ]
  },
  {
    "objectID": "builders/scales.html#directional-scale-factory",
    "href": "builders/scales.html#directional-scale-factory",
    "title": "scales",
    "section": "Directional Scale Factory",
    "text": "Directional Scale Factory\nFactory for utilities with directional variants:\n\nsource\n\nDirectionalScaledUtility\n\n DirectionalScaledUtility (prefix:str, direction:Optional[str],\n                           config:__main__.ScaleConfig,\n                           negative:bool=False)\n\nDirectional utility with scale support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nThe base utility prefix (e.g., ‘p’ for padding)\n\n\ndirection\nOptional\n\nThe direction suffix (‘t’, ‘r’, ‘b’, ‘l’, ‘x’, ‘y’)\n\n\nconfig\nScaleConfig\n\nConfiguration defining valid scales and values\n\n\nnegative\nbool\nFalse\nWhether this is a negative variant\n\n\n\n\nsource\n\n\nDirectionalScaledFactory\n\n DirectionalScaledFactory (prefix:str, config:__main__.ScaleConfig,\n                           doc:Optional[str]=None)\n\nFactory for creating directional scaled utilities.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nThe base utility prefix (e.g., ‘p’ for padding, ‘m’ for margin)\n\n\nconfig\nScaleConfig\n\nConfiguration defining valid scales and values\n\n\ndoc\nOptional\nNone\nOptional documentation string",
    "crumbs": [
      "builders",
      "scales"
    ]
  },
  {
    "objectID": "builders/scales.html#pre-configured-scale-configs",
    "href": "builders/scales.html#pre-configured-scale-configs",
    "title": "scales",
    "section": "Pre-configured Scale Configs",
    "text": "Pre-configured Scale Configs\nCommon scale configurations for different utility types:",
    "crumbs": [
      "builders",
      "scales"
    ]
  },
  {
    "objectID": "builders/scales.html#examples",
    "href": "builders/scales.html#examples",
    "title": "scales",
    "section": "Examples",
    "text": "Examples\nTest the scale builders with various configurations:\n\n# Test basic numeric scales\nw = ScaledFactory(\"w\", SIZE_CONFIG)\nassert str(w(4)) == \"w-4\"\nassert str(w(2.5)) == \"w-2.5\"\nassert str(w(0)) == \"w-0\"\n\n\n# Test fraction support\nassert str(w(\"1/2\")) == \"w-1/2\"\nassert str(w(\"3/4\")) == \"w-3/4\"\nassert str(w(\"2/3\")) == \"w-2/3\"\n\n\n# Test named scales\nassert str(w.xs) == \"w-xs\"\nassert str(w.sm) == \"w-sm\"\nassert str(w.lg) == \"w-lg\"\nassert str(w._2xl) == \"w-2xl\"  # Python identifiers can't start with numbers\n\n\n# Test ScaledFactory tab-completion for special values and named scales\nw = ScaledFactory(\"w\", SIZE_CONFIG)\n\n# Test special values have properties for tab-completion\nassert hasattr(w, 'auto')\nassert hasattr(w, 'px')\nassert hasattr(w, 'full')\nassert hasattr(w, 'screen')\nassert hasattr(w, 'min')\nassert hasattr(w, 'max')\n\n# Verify these are properties\nassert isinstance(type(w).auto, property)\nassert isinstance(type(w).full, property)\nassert isinstance(type(w).screen, property)\n\n# Test named scales have properties for tab-completion  \nassert hasattr(w, '_3xs')\nassert hasattr(w, '_2xs')\nassert hasattr(w, 'xs')\nassert hasattr(w, 'sm')\nassert hasattr(w, 'md')\nassert hasattr(w, 'lg')\nassert hasattr(w, 'xl')\nassert hasattr(w, '_2xl')\nassert hasattr(w, '_7xl')\n\n# Verify named scales are properties\nassert isinstance(type(w).xs, property)\nassert isinstance(type(w).lg, property)\nassert isinstance(type(w)._2xl, property)\n\n# Test that they work correctly\nassert str(w.auto) == \"w-auto\"\nassert str(w.full) == \"w-full\"\nassert str(w.xs) == \"w-xs\"\nassert str(w._2xl) == \"w-2xl\"\n\n# Test negative factory tab-completion\nm = DirectionalScaledFactory(\"m\", SPACING_CONFIG)\nassert hasattr(m.negative, 'px')\nassert isinstance(type(m.negative).px, property)\nassert str(m.negative.px) == \"-m-px\"\n\nprint(\"✅ ScaledFactory tab-completion tests passed!\")\n\n✅ ScaledFactory tab-completion tests passed!\n\n\n\n# Test special values\nassert str(w.auto) == \"w-auto\"\nassert str(w.full) == \"w-full\"\nassert str(w.screen) == \"w-screen\"\nassert str(w.px) == \"w-px\"\n\n\n# Test arbitrary values\nassert str(w(\"10px\")) == \"w-[10px]\"\nassert str(w(\"2.5rem\")) == \"w-[2.5rem]\"\nassert str(w(\"calc(100% - 20px)\")) == \"w-[calc(100% - 20px)]\"\n\n\n# Test custom properties\nassert str(w(\"--custom-width\")) == \"w-(--custom-width)\"\n\n\nTest Directional Scales\n\n# Test directional factory\np = DirectionalScaledFactory(\"p\", SPACING_CONFIG)\n\n# Test all directions\nassert str(p(4)) == \"p-4\"\nassert str(p.t(4)) == \"pt-4\"\nassert str(p.r(4)) == \"pr-4\"\nassert str(p.b(4)) == \"pb-4\"\nassert str(p.l(4)) == \"pl-4\"\nassert str(p.x(4)) == \"px-4\"\nassert str(p.y(4)) == \"py-4\"\n\n\n# Test directional with special values\nassert str(p.x.auto) == \"px-auto\"\nassert str(p.y(0)) == \"py-0\"\n\n\n\nTest Negative Values\n\n# Test margin with negative values\nm = DirectionalScaledFactory(\"m\", SPACING_CONFIG)\n\n# Test negative numeric values\nassert str(m(4, negative=True)) == \"-m-4\"\nassert str(m.negative(4)) == \"-m-4\"\nassert str(m.t.negative(2)) == \"-mt-2\"\nassert str(m.x.negative(8)) == \"-mx-8\"\n\n\n# Test negative special values\nassert str(m.negative.px) == \"-m-px\"\nassert str(m.x.negative.px) == \"-mx-px\"\n\n\n\nTest Inset with Negative Values\n\n# Test inset (top/right/bottom/left)\ninset = DirectionalScaledFactory(\"inset\", INSET_CONFIG)\n\n# Regular values\nassert str(inset(4)) == \"inset-4\"\nassert str(inset(\"1/2\")) == \"inset-1/2\"\nassert str(inset.auto) == \"inset-auto\"\nassert str(inset.full) == \"inset-full\"\n\n# Negative values\nassert str(inset.negative(4)) == \"-inset-4\"\nassert str(inset.negative(\"1/2\")) == \"-inset-1/2\"\nassert str(inset.negative.full) == \"-inset-full\"\n\n\n\nTest All Fractions\n\n# Show all generated fractions\nprint(\"Generated fractions:\")\nprint(FRACTIONS)\n\nGenerated fractions:\n['1/12', '2/12', '1/6', '1/5', '1/4', '3/12', '4/12', '1/3', '2/6', '2/5', '5/12', '6/12', '1/2', '3/6', '2/4', '7/12', '3/5', '2/3', '8/12', '4/6', '9/12', '3/4', '4/5', '5/6', '10/12', '11/12']\n\n\n\n# Test fraction edge cases\nh = ScaledFactory(\"h\", SIZE_CONFIG)\nassert str(h(\"1/2\")) == \"h-1/2\"\nassert str(h(\"1/3\")) == \"h-1/3\"\nassert str(h(\"2/3\")) == \"h-2/3\"\nassert str(h(\"1/4\")) == \"h-1/4\"\nassert str(h(\"3/4\")) == \"h-3/4\"\nassert str(h(\"1/6\")) == \"h-1/6\"\nassert str(h(\"5/6\")) == \"h-5/6\"\n\n\n\nTest Class Combination\n\n# Test combining multiple utilities\nfrom cjm_fasthtml_tailwind.core.base import combine_classes\nw = ScaledFactory(\"w\", SIZE_CONFIG)\nh = ScaledFactory(\"h\", SIZE_CONFIG)\np = DirectionalScaledFactory(\"p\", SPACING_CONFIG)\nm = DirectionalScaledFactory(\"m\", SPACING_CONFIG)\n\n# Create various utilities\nw_util = w(32)\nh_util = h.full\np_util = p.x(4)\nm_util = m.y.auto\n\n# Combine them\nclasses = combine_classes(w_util, h_util, p_util, m_util, \"flex\", \"items-center\")\nassert classes == \"w-32 h-full px-4 my-auto flex items-center\"",
    "crumbs": [
      "builders",
      "scales"
    ]
  },
  {
    "objectID": "builders/scales.html#helper-functions",
    "href": "builders/scales.html#helper-functions",
    "title": "scales",
    "section": "Helper Functions",
    "text": "Helper Functions\nUtility functions for working with scales:\n\nsource\n\nlist_scale_values\n\n list_scale_values (config:__main__.ScaleConfig)\n\nList all possible values for a scale configuration.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nconfig\nScaleConfig\nThe scale configuration to extract values from\n\n\nReturns\nDict\nDictionary mapping scale types to their values\n\n\n\n\n# Test listing scale values\nsize_values = list_scale_values(SIZE_CONFIG)\nprint(f\"Size scale has {len(size_values['numeric'])} numeric values\")\nprint(f\"Size scale has {len(size_values['fractions'])} fraction values\")\nprint(f\"Named sizes: {size_values['named'][:5]}...\")  # First 5\nprint(f\"Special sizes: {size_values['special']}\")\n\nSize scale has 97 numeric values\nSize scale has 26 fraction values\nNamed sizes: ['3xs', '2xs', 'xs', 'sm', 'md']...\nSpecial sizes: ['auto', 'px', 'full', 'screen', 'svw', 'svh', 'lvw', 'lvh', 'dvw', 'dvh', 'min', 'max', 'fit', 'lh']",
    "crumbs": [
      "builders",
      "scales"
    ]
  },
  {
    "objectID": "builders/scales.html#simple-factory",
    "href": "builders/scales.html#simple-factory",
    "title": "scales",
    "section": "Simple Factory",
    "text": "Simple Factory\nA factory for utilities that use simple string values with dot notation access:\n\nsource\n\nSimpleFactory\n\n SimpleFactory (values_dict:Optional[Dict[str,str]]=None,\n                doc:Optional[str]=None)\n\nFactory for utilities that are simple string values with modifier support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n# Test SimpleFactory with modifier support\ntest_values = {\n    \"auto\": \"auto-value\",\n    \"none\": \"none-value\",\n    \"multi-word\": \"multi-word-value\"\n}\n\nfactory = SimpleFactory(test_values)\n\n# Test basic access (now returns utilities)\nassert str(factory.auto) == \"auto-value\"\nassert str(factory.none) == \"none-value\"\nassert str(factory.multi_word) == \"multi-word-value\"\n\n# Test with modifiers\nassert str(factory.auto.hover) == \"hover:auto-value\"\nassert str(factory.none.md) == \"md:none-value\"\nassert str(factory.multi_word.dark) == \"dark:multi-word-value\"\n\n# Test chained modifiers\nassert str(factory.auto.hover.lg) == \"lg:hover:auto-value\"\nassert str(factory.none.dark.focus) == \"focus:dark:none-value\"\n\n# Test that cached instances work correctly\nauto1 = factory.auto\nauto2 = factory.auto\nassert auto1 is auto2  # Should be the same cached instance\n\n# Test tab-completion attributes are present\nassert hasattr(factory, 'auto')\nassert hasattr(factory, 'none')\nassert hasattr(factory, 'multi_word')\n\n# Verify these are properties\nassert isinstance(type(factory).auto, property)\nassert isinstance(type(factory).none, property)\nassert isinstance(type(factory).multi_word, property)\n\nprint(\"✅ SimpleFactory with modifiers and tab-completion tests passed!\")\n\n✅ SimpleFactory with modifiers and tab-completion tests passed!\n\n\n\n# Test SimpleFactory subclasses with tab-completion support\nclass TestSubFactory(SimpleFactory):\n    \"\"\"Test subclass of SimpleFactory.\"\"\"\n    \n    def __init__(self):\n        test_values = {\n            \"option1\": \"test-option1\",\n            \"option2\": \"test-option2\",\n            \"multi-word\": \"test-multi-word\"\n        }\n        super().__init__(test_values, \"Test subclass factory\")\n\n# Create instance and test\nsub_factory = TestSubFactory()\n\n# Test basic access\nassert str(sub_factory.option1) == \"test-option1\"\nassert str(sub_factory.option2) == \"test-option2\"\nassert str(sub_factory.multi_word) == \"test-multi-word\"\n\n# Test tab-completion attributes are present\nassert hasattr(sub_factory, 'option1')\nassert hasattr(sub_factory, 'option2')\nassert hasattr(sub_factory, 'multi_word')\n\n# Verify these are properties\nassert isinstance(type(sub_factory).option1, property)\nassert isinstance(type(sub_factory).option2, property)\nassert isinstance(type(sub_factory).multi_word, property)\n\n# Test with modifiers\nassert str(sub_factory.option1.hover) == \"hover:test-option1\"\nassert str(sub_factory.option2.md) == \"md:test-option2\"\n\nprint(\"✅ SimpleFactory subclass with tab-completion tests passed!\")\n\n✅ SimpleFactory subclass with tab-completion tests passed!\n\n\n\nsource\n\n\nenums_to_simple_factory\n\n enums_to_simple_factory (prefix:str, src_enums:List[enum.Enum],\n                          doc:Optional[str]=None)\n\nCreate a SimpleFactory using a string prefix and the values from a list of enums\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nThe factory prefix\n\n\nsrc_enums\nList\n\nThe source enums\n\n\ndoc\nOptional\nNone\nThe factory docstring.\n\n\nReturns\nSimpleFactory\n\nThe resulting simple factory",
    "crumbs": [
      "builders",
      "scales"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html",
    "href": "cli/pattern_scanner.html",
    "title": "pattern_scanner",
    "section": "",
    "text": "Define data structures for pattern scanning:\n\nsource\n\n\n\n ClsPattern (line_number:int, full_expression:str, css_classes:List[str],\n             context:str, uses_combine_classes:bool)\n\nRepresents a cls= pattern found in code.",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#data-structures",
    "href": "cli/pattern_scanner.html#data-structures",
    "title": "pattern_scanner",
    "section": "",
    "text": "Define data structures for pattern scanning:\n\nsource\n\n\n\n ClsPattern (line_number:int, full_expression:str, css_classes:List[str],\n             context:str, uses_combine_classes:bool)\n\nRepresents a cls= pattern found in code.",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#ast-pattern-finder",
    "href": "cli/pattern_scanner.html#ast-pattern-finder",
    "title": "pattern_scanner",
    "section": "AST Pattern Finder",
    "text": "AST Pattern Finder\nUse Python’s AST to find cls= patterns in code:\n\nsource\n\nClsPatternVisitor\n\n ClsPatternVisitor (source_lines:List[str])\n\nAST visitor to find cls= patterns in Python code.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsource_lines\nList\nSource code lines for extracting context around patterns",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#pattern-scanning-functions",
    "href": "cli/pattern_scanner.html#pattern-scanning-functions",
    "title": "pattern_scanner",
    "section": "Pattern Scanning Functions",
    "text": "Pattern Scanning Functions\nMain functions to scan code for patterns:\n\nsource\n\nscan_python_code\n\n scan_python_code (code:str)\n\nScan Python code for cls= patterns.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncode\nstr\nPython source code as a string\n\n\nReturns\nList\nList of ClsPattern objects found in the code",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#enhanced-css-class-extraction",
    "href": "cli/pattern_scanner.html#enhanced-css-class-extraction",
    "title": "pattern_scanner",
    "section": "Enhanced CSS Class Extraction",
    "text": "Enhanced CSS Class Extraction\nMore sophisticated extraction handling different patterns:\n\nsource\n\nextract_css_classes_from_node\n\n extract_css_classes_from_node (node:ast.AST)\n\nRecursively extract CSS classes from an AST node. Handles various patterns including combine_classes calls.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nnode\nAST\nAST node to extract CSS classes from\n\n\nReturns\nList\nList of CSS class strings found in the node",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#testing-pattern-extraction",
    "href": "cli/pattern_scanner.html#testing-pattern-extraction",
    "title": "pattern_scanner",
    "section": "Testing Pattern Extraction",
    "text": "Testing Pattern Extraction\nLet’s test with the example code from your description:\n\n# Test with your example code\ntest_code = '''\nfrom fasthtml.common import Div, Header, Nav, Main, Article, Aside, Footer, Img, Button, H1, H2, P\n\n# Flexbox centered navigation\nnav = Nav(\n    Div(\"Logo\", cls=\"font-bold\"),\n    Div(\n        \"Home\", \"About\", \"Contact\",\n        cls=combine_classes(\"flex\", gap(4))\n    ),\n    Button(\"Sign In\"),\n    cls=combine_classes(\n        \"flex\", \n        justify.between, \n        items.center, \n        \"px-6\", \n        \"py-4\", \"items-center\"\n    )\n)\n'''\n\n# Scan the code\npatterns = scan_python_code(test_code)\n\n# Display results\nprint(f\"Found {len(patterns)} cls= patterns:\\n\")\nfor i, pattern in enumerate(patterns, 1):\n    print(f\"Pattern {i}:\")\n    print(f\"  Line: {pattern.line_number}\")\n    print(f\"  Expression: {pattern.full_expression}\")\n    print(f\"  Uses combine_classes: {pattern.uses_combine_classes}\")\n    print(f\"  CSS Classes: {pattern.css_classes}\")\n    print(f\"  Context: {pattern.context}\")\n    print()\n\nFound 3 cls= patterns:\n\nPattern 1:\n  Line: 12\n  Expression: combine_classes('flex', justify.between, items.center, 'px-6', 'py-4', 'items-center')\n  Uses combine_classes: True\n  CSS Classes: ['flex', 'px-6', 'py-4', 'items-center']\n  Context: cls=combine_classes(\n\nPattern 2:\n  Line: 6\n  Expression: 'font-bold'\n  Uses combine_classes: False\n  CSS Classes: ['font-bold']\n  Context: Div(\"Logo\", cls=\"font-bold\"),\n\nPattern 3:\n  Line: 9\n  Expression: combine_classes('flex', gap(4))\n  Uses combine_classes: True\n  CSS Classes: ['flex']\n  Context: cls=combine_classes(\"flex\", gap(4))\n\n\n\n\n# Test with various patterns\ntest_cases = '''\n# Simple string\ndiv1 = Div(cls=\"flex items-center justify-between\")\n\n# Multiple classes in one string\ndiv2 = Div(cls=\"bg-blue-500 text-white px-4 py-2 rounded-lg\")\n\n# String concatenation\ndiv3 = Div(cls=\"flex \" + \"items-center\")\n\n# Empty cls\ndiv4 = Div(cls=\"\")\n\n# combine_classes with mixed content\ndiv5 = Div(cls=combine_classes(\n    \"absolute\",\n    \"top-0\",\n    p(4),  # This is already using the library\n    \"bg-white\"\n))\n'''\n\npatterns = scan_python_code(test_cases)\nprint(f\"Found {len(patterns)} patterns in test cases:\\n\")\n\nfor i, pattern in enumerate(patterns, 1):\n    print(f\"Pattern {i}: Line {pattern.line_number}\")\n    print(f\"  CSS Classes: {pattern.css_classes}\")\n    print(f\"  Expression: {pattern.full_expression}\")\n    print()\n\nFound 5 patterns in test cases:\n\nPattern 1: Line 3\n  CSS Classes: ['flex', 'items-center', 'justify-between']\n  Expression: 'flex items-center justify-between'\n\nPattern 2: Line 6\n  CSS Classes: ['bg-blue-500', 'text-white', 'px-4', 'py-2', 'rounded-lg']\n  Expression: 'bg-blue-500 text-white px-4 py-2 rounded-lg'\n\nPattern 3: Line 9\n  CSS Classes: ['flex', 'items-center']\n  Expression: 'flex ' + 'items-center'\n\nPattern 4: Line 12\n  CSS Classes: []\n  Expression: ''\n\nPattern 5: Line 15\n  CSS Classes: ['absolute', 'top-0', 'bg-white']\n  Expression: combine_classes('absolute', 'top-0', p(4), 'bg-white')",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#display-utilities",
    "href": "cli/pattern_scanner.html#display-utilities",
    "title": "pattern_scanner",
    "section": "Display Utilities",
    "text": "Display Utilities\nFunctions to display scan results:\n\nsource\n\ndisplay_patterns\n\n display_patterns (patterns:List[__main__.ClsPattern],\n                   show_context:bool=True)\n\nDisplay found patterns in a formatted way.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npatterns\nList\n\nList of ClsPattern objects to display\n\n\nshow_context\nbool\nTrue\nWhether to show the code context\n\n\n\n\nsource\n\n\nget_unique_css_classes\n\n get_unique_css_classes (patterns:List[__main__.ClsPattern])\n\nExtract all unique CSS classes from a list of patterns.\n\n\n\n\nType\nDetails\n\n\n\n\npatterns\nList\nList of ClsPattern objects\n\n\nReturns\nSet\nSet of unique CSS class strings\n\n\n\n\n# Test the display function with the original example\npatterns = scan_python_code(test_code)\ndisplay_patterns(patterns)\n\nFound 3 cls= patterns:\n\nPattern 1 (Line 12):\n  Context: cls=combine_classes(\n  Expression: combine_classes('flex', justify.between, items.center, 'px-6', 'py-4', 'items-center')\n  ✓ Uses combine_classes\n  CSS Classes (4):\n    - flex\n    - px-6\n    - py-4\n    - items-center\n\nPattern 2 (Line 6):\n  Context: Div(\"Logo\", cls=\"font-bold\"),\n  Expression: 'font-bold'\n  CSS Classes (1):\n    - font-bold\n\nPattern 3 (Line 9):\n  Context: cls=combine_classes(\"flex\", gap(4))\n  Expression: combine_classes('flex', gap(4))\n  ✓ Uses combine_classes\n  CSS Classes (1):\n    - flex\n\n\n\n\n# Test extracting unique classes\nall_patterns = scan_python_code(test_code) + scan_python_code(test_cases)\nunique_classes = get_unique_css_classes(all_patterns)\n\nprint(f\"Total unique CSS classes found: {len(unique_classes)}\")\nprint(\"\\nUnique classes:\")\nunique_classes\n\nTotal unique CSS classes found: 14\n\nUnique classes:\n\n\n{'absolute',\n 'bg-blue-500',\n 'bg-white',\n 'flex',\n 'font-bold',\n 'items-center',\n 'justify-between',\n 'px-4',\n 'px-6',\n 'py-2',\n 'py-4',\n 'rounded-lg',\n 'text-white',\n 'top-0'}",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#assertion-pattern-extraction",
    "href": "cli/pattern_scanner.html#assertion-pattern-extraction",
    "title": "pattern_scanner",
    "section": "Assertion Pattern Extraction",
    "text": "Assertion Pattern Extraction\nExtract patterns from test assertion statements:\n\nsource\n\nAssertionPattern\n\n AssertionPattern (css_class:str, factory_expression:str, module_name:str,\n                   example_name:str)\n\nRepresents a pattern extracted from a test assertion.\n\nsource\n\n\nget_available_css_classes\n\n get_available_css_classes\n                            (assertion_patterns:List[__main__.AssertionPat\n                            tern])\n\nExtract all unique CSS classes from assertion patterns. This handles multi-class assertion strings by splitting them.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nassertion_patterns\nList\nList of assertion patterns from test examples\n\n\nReturns\nSet\nSet of unique CSS class strings available in the library\n\n\n\n\nsource\n\n\nextract_assertion_patterns\n\n extract_assertion_patterns (source_code:str, module_name:str,\n                             example_name:str)\n\nExtract assertion patterns from test example source code.\n\n\n\n\nType\nDetails\n\n\n\n\nsource_code\nstr\nSource code of the test function\n\n\nmodule_name\nstr\nName of the module containing the test\n\n\nexample_name\nstr\nName of the test function\n\n\nReturns\nList\nList of AssertionPattern objects\n\n\n\n\nsource\n\n\ncollect_all_assertion_patterns\n\n collect_all_assertion_patterns ()\n\nCollect assertion patterns from all test examples in the library.\n\nassertion_patterns = collect_all_assertion_patterns()\nassertion_classes = get_available_css_classes(assertion_patterns)\nlist(assertion_classes)[:20]\n\n['snap-mandatory',\n 'break-normal',\n '-hue-rotate-60',\n 'shadow-zinc-500',\n 'select-all',\n 'transition-none',\n '-mask-linear-180',\n 'inset-ring-green-500',\n 'opacity-95',\n 'col-span-full',\n 'text-6xl',\n 'decoration-yellow-500',\n 'inset-ring-green-950',\n 'drop-shadow-black',\n 'row-start-2',\n 'fill-white',\n 'align-top',\n 'rounded-s-lg',\n '-mask-linear-45',\n 'p-0']",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#pattern-matching",
    "href": "cli/pattern_scanner.html#pattern-matching",
    "title": "pattern_scanner",
    "section": "Pattern Matching",
    "text": "Pattern Matching\nFunctions to match extracted CSS classes against available library classes:\n\nsource\n\nCSSClassMatch\n\n CSSClassMatch (css_class:str, match_type:__main__.MatchType,\n                matched_pattern:Optional[str]=None,\n                similar_classes:List[str]=None,\n                suggested_replacement:Optional[str]=None)\n\nRepresents a match result for a CSS class.\n\nsource\n\n\nMatchType\n\n MatchType (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\nType of match found for a CSS class.\n\nsource\n\n\ntokenize_css_class\n\n tokenize_css_class (css_class:str)\n\nTokenize a CSS class by splitting on hyphens. Handles modifiers (hover:, focus:, etc.) separately.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncss_class\nstr\nCSS class string (e.g., “bg-blue-500” or “hover:text-white”)\n\n\nReturns\nList\nList of tokens (e.g., [“bg”, “blue”, “500”] or [“hover:text”, “white”])\n\n\n\n\nsource\n\n\nfind_pattern_matches\n\n find_pattern_matches (css_class:str, available_classes:Set[str])\n\nFind pattern matches for a CSS class by progressively reducing tokens.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncss_class\nstr\nCSS class to match (e.g., “px-8” or “hover:text-white”)\n\n\navailable_classes\nSet\nSet of available CSS classes from the library\n\n\nReturns\nTuple\nTuple of (matched_pattern, similar_classes) - matched_pattern: Pattern prefix that matches (e.g., “px” for “px-8”) - similar_classes: List of similar classes with the same pattern\n\n\n\n\nsource\n\n\nmatch_css_class\n\n match_css_class (css_class:str, available_classes:Set[str])\n\nMatch a CSS class against available library classes.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncss_class\nstr\nCSS class to match\n\n\navailable_classes\nSet\nSet of available CSS classes from the library\n\n\nReturns\nCSSClassMatch\nCSSClassMatch object with match details\n\n\n\n\nsource\n\n\nmatch_css_classes\n\n match_css_classes (css_classes:List[str], available_classes:Set[str])\n\nMatch multiple CSS classes against available library classes.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncss_classes\nList\nList of CSS classes to match\n\n\navailable_classes\nSet\nSet of available CSS classes from the library\n\n\nReturns\nDict\nDictionary mapping CSS classes to their match results\n\n\n\n\nsource\n\n\ndisplay_match_results\n\n display_match_results (matches:Dict[str,__main__.CSSClassMatch])\n\nDisplay match results in a formatted way.\n\n\n\n\nType\nDetails\n\n\n\n\nmatches\nDict\nDictionary of CSS classes to their match results\n\n\n\n\nsource\n\n\nanalyze_code_patterns\n\n analyze_code_patterns (code:str)\n\nAnalyze Python code for replaceable CSS patterns.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncode\nstr\nPython source code to analyze\n\n\nReturns\nDict\nDictionary with analysis results including patterns found and suggestions\n\n\n\n\nsource\n\n\ndisplay_code_analysis\n\n display_code_analysis (code:str)\n\nAnalyze and display replaceable patterns in Python code.\n\n\n\n\nType\nDetails\n\n\n\n\ncode\nstr\nPython source code to analyze",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#migration-suggestions",
    "href": "cli/pattern_scanner.html#migration-suggestions",
    "title": "pattern_scanner",
    "section": "Migration Suggestions",
    "text": "Migration Suggestions\nFunctions to provide migration suggestions based on test examples:\n\nsource\n\nfind_assertion_for_class\n\n find_assertion_for_class (css_class:str,\n                           assertion_patterns:List[__main__.AssertionPatte\n                           rn])\n\nFind the assertion pattern that demonstrates how to use a specific CSS class. Prioritizes exact single-class matches over multi-class assertions.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncss_class\nstr\nThe CSS class to find (e.g., “px-6”)\n\n\nassertion_patterns\nList\nList of all assertion patterns from tests\n\n\nReturns\nOptional\nAssertionPattern if found, None otherwise\n\n\n\n\nsource\n\n\nfind_pattern_examples\n\n find_pattern_examples (pattern_prefix:str,\n                        assertion_patterns:List[__main__.AssertionPattern]\n                        )\n\nFind assertion examples that match a pattern prefix.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npattern_prefix\nstr\nPattern prefix to match (e.g., “px” for px-* pattern)\n\n\nassertion_patterns\nList\nList of all assertion patterns from tests\n\n\nReturns\nList\nList of AssertionPattern objects that match the pattern\n\n\n\n\nsource\n\n\nget_migration_suggestions\n\n get_migration_suggestions (matches:Dict[str,__main__.CSSClassMatch],\n                            assertion_patterns:List[__main__.AssertionPatt\n                            ern], config:Optional[cjm_fasthtml_tailwind.cl\n                            i.cli_config.LibraryConfig]=None)\n\nGenerate migration suggestions for matched CSS classes.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmatches\nDict\n\nDictionary of CSS class matches\n\n\nassertion_patterns\nList\n\nList of all assertion patterns from tests\n\n\nconfig\nOptional\nNone\nOptional configuration\n\n\nReturns\nDict\n\nDictionary mapping CSS classes to their migration suggestions\n\n\n\n\nsource\n\n\ndisplay_migration_suggestions\n\n display_migration_suggestions (code:str)\n\nAnalyze code and display migration suggestions.\n\n\n\n\nType\nDetails\n\n\n\n\ncode\nstr\nPython source code to analyze\n\n\n\n\nsource\n\n\nanalyze_and_suggest\n\n analyze_and_suggest (code:str)\n\nPerform complete analysis of code with migration suggestions.\n\n\n\n\nType\nDetails\n\n\n\n\ncode\nstr\nPython source code to analyze",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#testing-pattern-matching",
    "href": "cli/pattern_scanner.html#testing-pattern-matching",
    "title": "pattern_scanner",
    "section": "Testing Pattern Matching",
    "text": "Testing Pattern Matching\nTest the matching logic with various CSS classes:\n\n# Test updated tokenization\nprint(\"Testing updated tokenization:\")\ntest_classes = [\n    \"flex\", \n    \"px-6\", \n    \"bg-blue-500\", \n    \"-mt-4\", \n    \"hover:text-white\",\n    \"lg:grid-cols-4\",\n    \"focus:ring-2\",\n    \"hover:bg-blue-600\"\n]\nfor cls in test_classes:\n    tokens = tokenize_css_class(cls)\n    print(f\"  {cls:&lt;20} → {tokens}\")\n\nTesting updated tokenization:\n  flex                 → ['flex']\n  px-6                 → ['px', '6']\n  bg-blue-500          → ['bg', 'blue', '500']\n  -mt-4                → ['-mt', '4']\n  hover:text-white     → ['hover:', 'text', 'white']\n  lg:grid-cols-4       → ['lg:', 'grid', 'cols', '4']\n  focus:ring-2         → ['focus:', 'ring', '2']\n  hover:bg-blue-600    → ['hover:', 'bg', 'blue', '600']\n\n\n\n# Get available classes from assertions\nassertion_patterns = collect_all_assertion_patterns()\navailable_classes = get_available_css_classes(assertion_patterns)\n\n# Test with the example from the original test code\ntest_css_classes = [\"flex\", \"font-bold\", \"items-center\", \"px-6\", \"py-4\"]\n\nprint(\"\\nTesting CSS class matching:\")\nprint(\"=\" * 60)\n\nfor css_class in test_css_classes:\n    match_result = match_css_class(css_class, available_classes)\n    \n    print(f\"\\nClass: '{css_class}'\")\n    print(f\"  Match Type: {match_result.match_type.value}\")\n    \n    if match_result.match_type == MatchType.EXACT:\n        print(f\"  ✓ Exact match found\")\n    elif match_result.match_type == MatchType.PATTERN:\n        print(f\"  ~ Pattern match: '{match_result.matched_pattern}-*'\")\n        print(f\"  Similar classes: {match_result.similar_classes[:3]}...\")\n    else:\n        print(f\"  ✗ No match found\")\n\n\nTesting CSS class matching:\n============================================================\n\nClass: 'flex'\n  Match Type: exact\n  ✓ Exact match found\n\nClass: 'font-bold'\n  Match Type: exact\n  ✓ Exact match found\n\nClass: 'items-center'\n  Match Type: exact\n  ✓ Exact match found\n\nClass: 'px-6'\n  Match Type: exact\n  ✓ Exact match found\n\nClass: 'py-4'\n  Match Type: exact\n  ✓ Exact match found\n\n\n\n# Test with more diverse CSS classes\nprint(\"\\nTesting with additional CSS classes:\")\nprint(\"=\" * 60)\n\nadditional_test_classes = [\n    # Should be exact matches\n    \"block\", \"absolute\", \"flex\",\n    # Should be pattern matches\n    \"px-8\", \"py-12\", \"mt-16\", \"gap-10\", \n    # Should be no match\n    \"font-bold\", \"text-blue-600\", \"hover:bg-gray-100\",\n    # Edge cases\n    \"-mx-4\", \"w-1/3\", \"lg:grid-cols-4\"\n]\n\nfor css_class in additional_test_classes:\n    match_result = match_css_class(css_class, available_classes)\n    \n    status = \"✓\" if match_result.match_type == MatchType.EXACT else \\\n             \"~\" if match_result.match_type == MatchType.PATTERN else \"✗\"\n    \n    print(f\"{status} {css_class:&lt;20} → {match_result.match_type.value:&lt;10}\", end=\"\")\n    \n    if match_result.matched_pattern:\n        print(f\" (pattern: {match_result.matched_pattern})\")\n    else:\n        print()\n\n\nTesting with additional CSS classes:\n============================================================\n✓ block                → exact     \n✓ absolute             → exact     \n✓ flex                 → exact     \n✓ px-8                 → exact     \n~ py-12                → pattern    (pattern: py)\n~ mt-16                → pattern    (pattern: mt)\n~ gap-10               → pattern    (pattern: gap)\n✓ font-bold            → exact     \n~ text-blue-600        → pattern    (pattern: text-blue)\n✗ hover:bg-gray-100    → no_match  \n~ -mx-4                → pattern    (pattern: -mx)\n~ w-1/3                → pattern    (pattern: w)\n✓ lg:grid-cols-4       → exact     \n\n\n\n# Test batch matching with the original example\nprint(\"\\nBatch matching for original example:\")\nprint(\"=\" * 60)\n\n# Extract unique CSS classes from the test code\npatterns = scan_python_code(test_code)\nunique_classes_in_code = get_unique_css_classes(patterns)\n\n# Match all classes\nmatches = match_css_classes(list(unique_classes_in_code), available_classes)\n\n# Display results\ndisplay_match_results(matches)\n\n\nBatch matching for original example:\n============================================================\nCSS Class Analysis Results:\n============================================================\n\n✓ Exact Matches (5):\n  - flex\n  - font-bold\n  - items-center\n  - px-6\n  - py-4\n\nSummary: 5/5 classes are potentially replaceable\n\n\n\n# Test complete code analysis\nprint(\"Complete Code Analysis:\")\nprint()\ndisplay_code_analysis(test_code)\n\nComplete Code Analysis:\n\nCode Analysis Report\n============================================================\nTotal cls= patterns found: 3\nUnique CSS classes: 5\n\nReplaceable Classes: 5/5\n  - Exact matches: 5\n  - Pattern matches: 0\n  - No matches: 0\n\nCSS Class Analysis Results:\n============================================================\n\n✓ Exact Matches (5):\n  - flex\n  - font-bold\n  - items-center\n  - px-6\n  - py-4\n\nSummary: 5/5 classes are potentially replaceable\n\nPatterns by Line:\n------------------------------------------------------------\nLine 12: ✓ combine_classes('flex', justify.between, items.center, 'px-6', 'py-4', 'items-center')\n         ↳ Already uses combine_classes\nLine 6: ✓ 'font-bold'\nLine 9: ✓ combine_classes('flex', gap(4))\n         ↳ Already uses combine_classes\n\n\n\n# Test with a more complex example\ncomplex_example = '''\nfrom fasthtml.common import Div, Button, Section\n\n# Hero section with various utilities\nhero = Section(\n    Div(\n        \"Welcome to our site\",\n        cls=\"text-6xl font-bold text-gray-900 mb-4\"\n    ),\n    Div(\n        \"Build amazing things with FastHTML\",\n        cls=\"text-xl text-gray-600 mb-8\"\n    ),\n    Button(\n        \"Get Started\",\n        cls=\"px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n    ),\n    cls=\"flex flex-col items-center justify-center min-h-screen px-4\"\n)\n'''\n\nprint(\"\\n\\nComplex Example Analysis:\")\nprint()\ndisplay_code_analysis(complex_example)\n\n\n\nComplex Example Analysis:\n\nCode Analysis Report\n============================================================\nTotal cls= patterns found: 4\nUnique CSS classes: 19\n\nReplaceable Classes: 18/19\n  - Exact matches: 12\n  - Pattern matches: 6\n  - No matches: 1\n\nCSS Class Analysis Results:\n============================================================\n\n✓ Exact Matches (12):\n  - flex\n  - flex-col\n  - font-bold\n  - items-center\n  - justify-center\n  - mb-4\n  - min-h-screen\n  - px-8\n  - rounded-lg\n  - text-6xl\n  - text-white\n  - text-xl\n\n~ Pattern Matches (6):\n  - bg-blue-600 → matches pattern 'bg-blue-*'\n    Examples: bg-blue-300, bg-blue-300/75, bg-blue-500\n  - mb-8 → matches pattern 'mb-*'\n    Examples: mb-4\n  - px-4 → matches pattern 'px-*'\n    Examples: px-6, px-8\n  - py-3 → matches pattern 'py-*'\n    Examples: py-4, py-8\n  - text-gray-600 → matches pattern 'text-gray-*'\n    Examples: text-gray-500\n  - text-gray-900 → matches pattern 'text-gray-*'\n    Examples: text-gray-500\n\n✗ No Matches (1):\n  - hover:bg-blue-700\n\nSummary: 18/19 classes are potentially replaceable\n\nPatterns by Line:\n------------------------------------------------------------\nLine 18: ✓ 'flex flex-col items-center justify-center min-h-screen px-4'\nLine 8: ✓ 'text-6xl font-bold text-gray-900 mb-4'\nLine 12: ✓ 'text-xl text-gray-600 mb-8'\nLine 16: ✓ 'px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700'\n\n\n\n# Test migration suggestions with original example\nprint(\"Migration Suggestions for Original Example:\")\nprint()\ndisplay_migration_suggestions(test_code)\n\nMigration Suggestions for Original Example:\n\nMigration Suggestions\n============================================================\n\n✓ flex:\n  → View example: cjm-tailwind-explore example flexbox_and_grid display\n\n✓ font-bold:\n  → View example: cjm-tailwind-explore example typography font_weight\n\n✓ items-center:\n  → View example: cjm-tailwind-explore example flexbox_and_grid align\n\n✓ px-6:\n  → View example: cjm-tailwind-explore example spacing helper\n  → View helper: cjm-tailwind-explore helper spacing pad\n\n✓ py-4:\n  → View example: cjm-tailwind-explore example spacing helper\n  → View helper: cjm-tailwind-explore helper spacing pad\n\n\n\n\n# Test with complex example\nprint(\"\\n\\nMigration Suggestions for Complex Example:\")\nprint()\ndisplay_migration_suggestions(complex_example)\n\n\n\nMigration Suggestions for Complex Example:\n\nMigration Suggestions\n============================================================\n\n~ bg-blue-600:\n  → Pattern example 1: cjm-tailwind-explore example backgrounds color\n  → Pattern example 2: cjm-tailwind-explore example backgrounds opacity\n\n✓ flex:\n  → View example: cjm-tailwind-explore example flexbox_and_grid display\n\n✓ flex-col:\n  → View example: cjm-tailwind-explore example flexbox_and_grid direction\n\n✓ font-bold:\n  → View example: cjm-tailwind-explore example typography font_weight\n\n✓ items-center:\n  → View example: cjm-tailwind-explore example flexbox_and_grid align\n\n✓ justify-center:\n  → View example: cjm-tailwind-explore example flexbox_and_grid justify\n\n✓ mb-4:\n  → View example: cjm-tailwind-explore example spacing margin_directional\n\n~ mb-8:\n  → Pattern example 1: cjm-tailwind-explore example spacing margin_directional\n\n✓ min-h-screen:\n  → View example: cjm-tailwind-explore example sizing min_height\n\n~ px-4:\n  → Pattern example 1: cjm-tailwind-explore example spacing directional\n  → Pattern example 2: cjm-tailwind-explore example spacing helper\n\n✓ px-8:\n  → View example: cjm-tailwind-explore example spacing directional\n\n~ py-3:\n  → Pattern example 1: cjm-tailwind-explore example spacing directional\n  → Pattern example 2: cjm-tailwind-explore example spacing helper\n\n✓ rounded-lg:\n  → View example: cjm-tailwind-explore example borders radius\n\n✓ text-6xl:\n  → View example: cjm-tailwind-explore example typography font_size\n\n~ text-gray-600:\n  → Pattern example 1: cjm-tailwind-explore example typography text_color\n\n~ text-gray-900:\n  → Pattern example 1: cjm-tailwind-explore example typography text_color\n\n✓ text-white:\n  → View example: cjm-tailwind-explore example typography text_color\n\n✓ text-xl:\n  → View example: cjm-tailwind-explore example typography font_size\n\n\n\n\n# Test analysis and migration suggestions with original example\nprint(\"Analysis & Migration Suggestions for Original Example:\")\nprint()\nanalyze_and_suggest(test_code)\n\nAnalysis & Migration Suggestions for Original Example:\n\nCode Analysis Report\n============================================================\nTotal cls= patterns found: 3\nUnique CSS classes: 5\n\nReplaceable Classes: 5/5\n  - Exact matches: 5\n  - Pattern matches: 0\n  - No matches: 0\n\nCSS Class Analysis Results:\n============================================================\n\n✓ Exact Matches (5):\n  - flex\n  - font-bold\n  - items-center\n  - px-6\n  - py-4\n\nSummary: 5/5 classes are potentially replaceable\n\nPatterns by Line:\n------------------------------------------------------------\nLine 12: ✓ combine_classes('flex', justify.between, items.center, 'px-6', 'py-4', 'items-center')\n         ↳ Already uses combine_classes\nLine 6: ✓ 'font-bold'\nLine 9: ✓ combine_classes('flex', gap(4))\n         ↳ Already uses combine_classes\n\n\nMigration Suggestions\n============================================================\n\n✓ flex:\n  → View example: cjm-tailwind-explore example flexbox_and_grid display\n\n✓ font-bold:\n  → View example: cjm-tailwind-explore example typography font_weight\n\n✓ items-center:\n  → View example: cjm-tailwind-explore example flexbox_and_grid align\n\n✓ px-6:\n  → View example: cjm-tailwind-explore example spacing helper\n  → View helper: cjm-tailwind-explore helper spacing pad\n\n✓ py-4:\n  → View example: cjm-tailwind-explore example spacing helper\n  → View helper: cjm-tailwind-explore helper spacing pad",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#file-input-support",
    "href": "cli/pattern_scanner.html#file-input-support",
    "title": "pattern_scanner",
    "section": "File Input Support",
    "text": "File Input Support\nFunctions to scan Python files and Jupyter notebooks:\n\nsource\n\nscan_python_file\n\n scan_python_file (file_path:str)\n\nScan a Python file for cls= patterns.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfile_path\nstr\nPath to the Python file\n\n\nReturns\nList\nList of ClsPattern objects found in the file\n\n\n\n\nsource\n\n\nscan_jupyter_notebook\n\n scan_jupyter_notebook (notebook_path:str)\n\nScan a Jupyter notebook for cls= patterns.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nnotebook_path\nstr\nPath to the Jupyter notebook (.ipynb)\n\n\nReturns\nList\nList of ClsPattern objects found in the notebook\n\n\n\n\nsource\n\n\ndetect_input_type\n\n detect_input_type (input_source:str)\n\nDetect the type of input based on the source string.\n\n\n\n\nType\nDetails\n\n\n\n\ninput_source\nstr\nCode string or file path\n\n\nReturns\nInputType\nInputType enum value\n\n\n\n\nsource\n\n\nInputType\n\n InputType (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\nType of input being scanned.\n\nsource\n\n\nscan_input\n\n scan_input (input_source:str,\n             input_type:Optional[__main__.InputType]=None)\n\nScan various input types for cls= patterns.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninput_source\nstr\n\nCode string, Python file path, or notebook path\n\n\ninput_type\nOptional\nNone\nOptional explicit input type. If None, will auto-detect.\n\n\nReturns\nList\n\nList of ClsPattern objects found\n\n\n\n\nsource\n\n\nanalyze_input\n\n analyze_input (input_source:str,\n                input_type:Optional[__main__.InputType]=None)\n\nAnalyze any input type for replaceable CSS patterns.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninput_source\nstr\n\nCode string, Python file path, or notebook path\n\n\ninput_type\nOptional\nNone\nOptional explicit input type. If None, will auto-detect.\n\n\nReturns\nDict\n\nDictionary with analysis results\n\n\n\n\nsource\n\n\ndisplay_input_analysis\n\n display_input_analysis (input_source:str,\n                         input_type:Optional[__main__.InputType]=None)\n\nAnalyze and display replaceable patterns from any input type.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninput_source\nstr\n\nCode string, Python file path, or notebook path\n\n\ninput_type\nOptional\nNone\nOptional explicit input type. If None, will auto-detect.\n\n\n\n\nsource\n\n\nanalyze_and_suggest_input\n\n analyze_and_suggest_input (input_source:str,\n                            input_type:Optional[__main__.InputType]=None)\n\nPerform complete analysis with migration suggestions for any input type.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninput_source\nstr\n\nCode string, Python file path, or notebook path\n\n\ninput_type\nOptional\nNone\nOptional explicit input type. If None, will auto-detect.",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#testing-file-input-support",
    "href": "cli/pattern_scanner.html#testing-file-input-support",
    "title": "pattern_scanner",
    "section": "Testing File Input Support",
    "text": "Testing File Input Support\nTest the unified interface with different input types:\n\n# Test auto-detection of input types\ntest_inputs = [\n    'print(\"hello\")',  # Code string\n    'example.py',      # Python file\n    'notebook.ipynb',  # Jupyter notebook\n    '/path/to/file.py',  # Full path\n    'Some(\"code\", cls=\"flex\")'  # Code with cls\n]\n\nprint(\"Testing input type detection:\")\nfor inp in test_inputs:\n    detected = detect_input_type(inp)\n    print(f\"  '{inp}' → {detected.value}\")\n\nTesting input type detection:\n  'print(\"hello\")' → code\n  'example.py' → python_file\n  'notebook.ipynb' → notebook\n  '/path/to/file.py' → python_file\n  'Some(\"code\", cls=\"flex\")' → code\n\n\n\n# Test unified scanning interface with code string\nprint(\"Testing unified scan_input with code string:\")\nprint(\"=\" * 60)\n\ntest_code_unified = '''\nfrom fasthtml.common import Div, Card\n\ncard = Card(\n    Div(\"Title\", cls=\"text-2xl font-semibold mb-4\"),\n    Div(\"Content\", cls=\"text-gray-700\"),\n    cls=\"p-6 bg-white rounded-lg shadow-md\"\n)\n'''\n\npatterns = scan_input(test_code_unified)\nprint(f\"Found {len(patterns)} patterns\")\nfor pattern in patterns:\n    print(f\"  Line {pattern.line_number}: {pattern.css_classes}\")\n\nTesting unified scan_input with code string:\n============================================================\nFound 3 patterns\n  Line 7: ['p-6', 'bg-white', 'rounded-lg', 'shadow-md']\n  Line 5: ['text-2xl', 'font-semibold', 'mb-4']\n  Line 6: ['text-gray-700']\n\n\n\n# Create a temporary Python file for testing\nimport tempfile\n\ntest_py_content = '''\nfrom fasthtml.common import *\n\ndef create_navbar():\n    return Nav(\n        Div(\"Logo\", cls=\"font-bold text-xl\"),\n        Ul(\n            Li(\"Home\", cls=\"px-4 py-2\"),\n            Li(\"About\", cls=\"px-4 py-2\"),\n            Li(\"Contact\", cls=\"px-4 py-2\"),\n            cls=\"flex gap-4\"\n        ),\n        cls=\"flex justify-between items-center p-4 bg-gray-100\"\n    )\n'''\n\n# Write to temporary file\nwith tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:\n    f.write(test_py_content)\n    temp_py_file = f.name\n\nprint(f\"Testing Python file scanning:\")\nprint(f\"Temporary file: {temp_py_file}\")\nprint(\"=\" * 60)\n\n# Scan the Python file\npatterns = scan_input(temp_py_file)\nprint(f\"Found {len(patterns)} patterns\")\nfor pattern in patterns:\n    print(f\"  Line {pattern.line_number}: {pattern.css_classes}\")\n\n# Clean up\nimport os\nos.unlink(temp_py_file)\n\nTesting Python file scanning:\nTemporary file: /tmp/tmp2m24gcg3.py\n============================================================\nFound 6 patterns\n  Line 13: ['flex', 'justify-between', 'items-center', 'p-4', 'bg-gray-100']\n  Line 6: ['font-bold', 'text-xl']\n  Line 11: ['flex', 'gap-4']\n  Line 8: ['px-4', 'py-2']\n  Line 9: ['px-4', 'py-2']\n  Line 10: ['px-4', 'py-2']\n\n\n\n# Test complete analysis with code string\nprint(\"\\nTesting complete analysis with display_input_analysis:\")\nprint()\ndisplay_input_analysis(test_code)\n\n\nTesting complete analysis with display_input_analysis:\n\nPattern Analysis Report\n============================================================\nInput Type: code\nSource: \nfrom fasthtml.common import Div, Header, Nav, Mai...\nTotal cls= patterns found: 3\nUnique CSS classes: 5\n\nReplaceable Classes: 5/5\n  - Exact matches: 5\n  - Pattern matches: 0\n  - No matches: 0\n\nCSS Class Analysis Results:\n============================================================\n\n✓ Exact Matches (5):\n  - flex\n  - font-bold\n  - items-center\n  - px-6\n  - py-4\n\nSummary: 5/5 classes are potentially replaceable\n\nPatterns by Location:\n------------------------------------------------------------\nLine 12: ✓ combine_classes('flex', justify.between, items.center, 'px-6', 'py-4', 'items-center')\n         ↳ Already uses combine_classes\nLine 6: ✓ 'font-bold'\nLine 9: ✓ combine_classes('flex', gap(4))\n         ↳ Already uses combine_classes\n\n\n\n# Test with suggestions\nprint(\"\\nTesting analysis with suggestions:\")\nprint()\nanalyze_and_suggest_input(test_code_unified)\n\n\nTesting analysis with suggestions:\n\nPattern Analysis Report\n============================================================\nInput Type: code\nSource: \nfrom fasthtml.common import Div, Card\n\ncard = Car...\nTotal cls= patterns found: 3\nUnique CSS classes: 8\n\nReplaceable Classes: 8/8\n  - Exact matches: 6\n  - Pattern matches: 2\n  - No matches: 0\n\nCSS Class Analysis Results:\n============================================================\n\n✓ Exact Matches (6):\n  - bg-white\n  - font-semibold\n  - mb-4\n  - rounded-lg\n  - shadow-md\n  - text-2xl\n\n~ Pattern Matches (2):\n  - p-6 → matches pattern 'p-*'\n    Examples: p-0, p-2.5, p-4\n  - text-gray-700 → matches pattern 'text-gray-*'\n    Examples: text-gray-500\n\nSummary: 8/8 classes are potentially replaceable\n\nPatterns by Location:\n------------------------------------------------------------\nLine 7: ✓ 'p-6 bg-white rounded-lg shadow-md'\nLine 5: ✓ 'text-2xl font-semibold mb-4'\nLine 6: ✓ 'text-gray-700'\n\n\nMigration Suggestions\n============================================================\n\n✓ bg-white:\n  → View example: cjm-tailwind-explore example backgrounds color\n\n✓ font-semibold:\n  → View example: cjm-tailwind-explore example typography font_weight\n\n✓ mb-4:\n  → View example: cjm-tailwind-explore example spacing margin_directional\n\n~ p-6:\n  → Pattern example 1: cjm-tailwind-explore example spacing basic\n  → Pattern example 2: cjm-tailwind-explore example spacing helper\n\n✓ rounded-lg:\n  → View example: cjm-tailwind-explore example borders radius\n\n✓ shadow-md:\n  → View example: cjm-tailwind-explore example effects shadow_size\n\n✓ text-2xl:\n  → View example: cjm-tailwind-explore example typography font_size\n\n~ text-gray-700:\n  → Pattern example 1: cjm-tailwind-explore example typography text_color",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/pattern_scanner.html#export",
    "href": "cli/pattern_scanner.html#export",
    "title": "pattern_scanner",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "pattern_scanner"
    ]
  },
  {
    "objectID": "cli/factory_extraction.html",
    "href": "cli/factory_extraction.html",
    "title": "Factory Extraction",
    "section": "",
    "text": "source",
    "crumbs": [
      "cli",
      "Factory Extraction"
    ]
  },
  {
    "objectID": "cli/factory_extraction.html#export",
    "href": "cli/factory_extraction.html#export",
    "title": "Factory Extraction",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "Factory Extraction"
    ]
  },
  {
    "objectID": "cli/core_utils_discovery.html",
    "href": "cli/core_utils_discovery.html",
    "title": "Core Utilities Discovery",
    "section": "",
    "text": "source",
    "crumbs": [
      "cli",
      "Core Utilities Discovery"
    ]
  },
  {
    "objectID": "cli/core_utils_discovery.html#export",
    "href": "cli/core_utils_discovery.html#export",
    "title": "Core Utilities Discovery",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "Core Utilities Discovery"
    ]
  },
  {
    "objectID": "cli/explorer.html",
    "href": "cli/explorer.html",
    "title": "explorer",
    "section": "",
    "text": "Helper functions to set up argument parsers for each command:\n\nsource\n\n\n\n add_modules_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘modules’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘modules’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘modules’ command\n\n\n\n\nsource\n\n\n\n\n add_factories_parser (subparsers:argparse._SubParsersAction,\n                       config:Optional[cjm_fasthtml_tailwind.cli.cli_confi\n                       g.LibraryConfig]=None)\n\nAdd the ‘factories’ command parser.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\n\nSubparsers object to add the ‘factories’ command to\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nArgument parser for the ‘factories’ command\n\n\n\n\nsource\n\n\n\n\n add_factory_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘factory’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘factory’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘factory’ command\n\n\n\n\nsource\n\n\n\n\n add_examples_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘examples’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘examples’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘examples’ command\n\n\n\n\nsource\n\n\n\n\n add_example_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘example’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘example’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘example’ command\n\n\n\n\nsource\n\n\n\n\n add_helpers_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘helpers’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘helpers’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘helpers’ command\n\n\n\n\nsource\n\n\n\n\n add_helper_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘helper’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘helper’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘helper’ command\n\n\n\n\nsource\n\n\n\n\n add_search_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘search’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘search’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘search’ command\n\n\n\n\nsource\n\n\n\n\n add_test_code_parser (subparsers:argparse._SubParsersAction,\n                       config:Optional[cjm_fasthtml_tailwind.cli.cli_confi\n                       g.LibraryConfig]=None)\n\nAdd the ‘test-code’ command parser.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\n\nSubparsers object to add the ‘test-code’ command to\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nArgument parser for the ‘test-code’ command\n\n\n\n\nsource\n\n\n\n\n add_core_utils_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘core-utils’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘core-utils’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘core-utils’ command\n\n\n\n\nsource\n\n\n\n\n add_core_util_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘core-util’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘core-util’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘core-util’ command\n\n\n\n\nsource\n\n\n\n\n add_imports_parser (subparsers:argparse._SubParsersAction,\n                     config:Optional[cjm_fasthtml_tailwind.cli.cli_config.\n                     LibraryConfig]=None)\n\nAdd the ‘imports’ command parser.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\n\nSubparsers object to add the ‘imports’ command to\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nArgument parser for the ‘imports’ command",
    "crumbs": [
      "cli",
      "explorer"
    ]
  },
  {
    "objectID": "cli/explorer.html#parser-setup-functions",
    "href": "cli/explorer.html#parser-setup-functions",
    "title": "explorer",
    "section": "",
    "text": "Helper functions to set up argument parsers for each command:\n\nsource\n\n\n\n add_modules_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘modules’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘modules’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘modules’ command\n\n\n\n\nsource\n\n\n\n\n add_factories_parser (subparsers:argparse._SubParsersAction,\n                       config:Optional[cjm_fasthtml_tailwind.cli.cli_confi\n                       g.LibraryConfig]=None)\n\nAdd the ‘factories’ command parser.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\n\nSubparsers object to add the ‘factories’ command to\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nArgument parser for the ‘factories’ command\n\n\n\n\nsource\n\n\n\n\n add_factory_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘factory’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘factory’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘factory’ command\n\n\n\n\nsource\n\n\n\n\n add_examples_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘examples’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘examples’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘examples’ command\n\n\n\n\nsource\n\n\n\n\n add_example_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘example’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘example’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘example’ command\n\n\n\n\nsource\n\n\n\n\n add_helpers_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘helpers’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘helpers’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘helpers’ command\n\n\n\n\nsource\n\n\n\n\n add_helper_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘helper’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘helper’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘helper’ command\n\n\n\n\nsource\n\n\n\n\n add_search_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘search’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘search’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘search’ command\n\n\n\n\nsource\n\n\n\n\n add_test_code_parser (subparsers:argparse._SubParsersAction,\n                       config:Optional[cjm_fasthtml_tailwind.cli.cli_confi\n                       g.LibraryConfig]=None)\n\nAdd the ‘test-code’ command parser.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\n\nSubparsers object to add the ‘test-code’ command to\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nArgument parser for the ‘test-code’ command\n\n\n\n\nsource\n\n\n\n\n add_core_utils_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘core-utils’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘core-utils’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘core-utils’ command\n\n\n\n\nsource\n\n\n\n\n add_core_util_parser (subparsers:argparse._SubParsersAction)\n\nAdd the ‘core-util’ command parser.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\nSubparsers object to add the ‘core-util’ command to\n\n\nReturns\nArgumentParser\nArgument parser for the ‘core-util’ command\n\n\n\n\nsource\n\n\n\n\n add_imports_parser (subparsers:argparse._SubParsersAction,\n                     config:Optional[cjm_fasthtml_tailwind.cli.cli_config.\n                     LibraryConfig]=None)\n\nAdd the ‘imports’ command parser.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\n\nSubparsers object to add the ‘imports’ command to\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nArgument parser for the ‘imports’ command",
    "crumbs": [
      "cli",
      "explorer"
    ]
  },
  {
    "objectID": "cli/explorer.html#command-dispatcher",
    "href": "cli/explorer.html#command-dispatcher",
    "title": "explorer",
    "section": "Command Dispatcher",
    "text": "Command Dispatcher\nFunction to handle command execution:\n\nsource\n\nadd_scan_parser\n\n add_scan_parser (subparsers:argparse._SubParsersAction,\n                  config:Optional[cjm_fasthtml_tailwind.cli.cli_config.Lib\n                  raryConfig]=None)\n\nAdd the ‘scan’ command parser.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsubparsers\n_SubParsersAction\n\nSubparsers object to add the ‘scan’ command to\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nArgument parser for the ‘scan’ command\n\n\n\n\nsource\n\n\ndispatch_command\n\n dispatch_command (args:argparse.Namespace)\n\nDispatch the parsed arguments to the appropriate handler.\n\n\n\n\nType\nDetails\n\n\n\n\nargs\nNamespace\nParsed command-line arguments\n\n\n\n\nsource\n\n\nhandle_search_command\n\n handle_search_command (args:argparse.Namespace)\n\nHandle the search command.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nargs\nNamespace\nParsed command-line arguments for the search command\n\n\n\n\nsource\n\n\nhandle_test_code_command\n\n handle_test_code_command (args:argparse.Namespace,\n                           config:Optional[cjm_fasthtml_tailwind.cli.cli_c\n                           onfig.LibraryConfig]=None)\n\nHandle the test-code command.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nargs\nNamespace\n\nParsed command-line arguments for the test-code command\n\n\nconfig\nOptional\nNone\nOptional configuration to use",
    "crumbs": [
      "cli",
      "explorer"
    ]
  },
  {
    "objectID": "cli/explorer.html#main-parser-setup",
    "href": "cli/explorer.html#main-parser-setup",
    "title": "explorer",
    "section": "Main Parser Setup",
    "text": "Main Parser Setup\nFunction to set up the main argument parser:\n\nsource\n\nhandle_scan_command\n\n handle_scan_command (args:argparse.Namespace)\n\nHandle the scan command.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nargs\nNamespace\nParsed command-line arguments for the scan command\n\n\n\n\nsource\n\n\ncreate_help_description\n\n create_help_description (config:Optional[cjm_fasthtml_tailwind.cli.cli_co\n                          nfig.LibraryConfig]=None)\n\nCreate a comprehensive description for the CLI tool’s help message\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nstr\n\nComprehensive description string for the CLI tool’s help message\n\n\n\n\nsource\n\n\ncreate_example_usage_flow\n\n create_example_usage_flow (config:Optional[cjm_fasthtml_tailwind.cli.cli_\n                            config.LibraryConfig]=None)\n\nCreate an example usage flow\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nstr\n\nFormatted example usage flow string with aligned comments\n\n\n\n\nsource\n\n\ncreate_help_epilogue\n\n create_help_epilogue (config:Optional[cjm_fasthtml_tailwind.cli.cli_confi\n                       g.LibraryConfig]=None)\n\nCreate a comprehensive epilogue for the CLI tool’s help message\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nstr\n\nComprehensive epilogue string for the CLI tool’s help message\n\n\n\n\nsource\n\n\nsetup_argument_parser\n\n setup_argument_parser (config:Optional[cjm_fasthtml_tailwind.cli.cli_conf\n                        ig.LibraryConfig]=None)\n\nSet up the main argument parser with all subcommands.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nConfigured argument parser with all subcommands",
    "crumbs": [
      "cli",
      "explorer"
    ]
  },
  {
    "objectID": "cli/explorer.html#cli-entry-point",
    "href": "cli/explorer.html#cli-entry-point",
    "title": "explorer",
    "section": "CLI Entry Point",
    "text": "CLI Entry Point\nMain function for the console script:\n\nsource\n\nmain\n\n main ()\n\nCLI entry point for exploring cjm-fasthtml-tailwind utilities.",
    "crumbs": [
      "cli",
      "explorer"
    ]
  },
  {
    "objectID": "cli/explorer.html#export",
    "href": "cli/explorer.html#export",
    "title": "explorer",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "explorer"
    ]
  },
  {
    "objectID": "cli/utils.html",
    "href": "cli/utils.html",
    "title": "utils",
    "section": "",
    "text": "Common data structures used across CLI tools:\n\nsource\n\n\n\n SearchResult (content_type:str, module_name:str, item_name:str,\n               match_context:str, match_location:str, score:float=1.0)\n\nRepresents a single search result.",
    "crumbs": [
      "cli",
      "utils"
    ]
  },
  {
    "objectID": "cli/utils.html#data-structures",
    "href": "cli/utils.html#data-structures",
    "title": "utils",
    "section": "",
    "text": "Common data structures used across CLI tools:\n\nsource\n\n\n\n SearchResult (content_type:str, module_name:str, item_name:str,\n               match_context:str, match_location:str, score:float=1.0)\n\nRepresents a single search result.",
    "crumbs": [
      "cli",
      "utils"
    ]
  },
  {
    "objectID": "cli/utils.html#display-helper-functions",
    "href": "cli/utils.html#display-helper-functions",
    "title": "utils",
    "section": "Display Helper Functions",
    "text": "Display Helper Functions\nCommon helper functions for formatting display output:\n\nsource\n\nprint_header\n\n print_header (title:str, width:int=60)\n\nPrint a formatted header with title and separator.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntitle\nstr\n\nHeader title to display\n\n\nwidth\nint\n60\nWidth of separator line in characters\n\n\nReturns\nNone\n\nNo return value\n\n\n\n\nsource\n\n\nprint_not_found\n\n print_not_found (item_type:str, item_name:str,\n                  module_name:Optional[str]=None, config:Optional[cjm_fast\n                  html_tailwind.cli.cli_config.LibraryConfig]=None)\n\nPrint a standardized not found message.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nitem_type\nstr\n\nType of item that wasn’t found (e.g., ‘factory’, ‘example’)\n\n\nitem_name\nstr\n\nName of the item that wasn’t found\n\n\nmodule_name\nOptional\nNone\nOptional module name where search was performed\n\n\nconfig\nOptional\nNone\nOptional configuration\n\n\nReturns\nNone\n\nNo return value\n\n\n\n\nsource\n\n\nprint_total\n\n print_total (item_type:str, count:int, across_modules:bool=False)\n\nPrint a standardized total count message.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nitem_type\nstr\n\nType of items being counted (e.g., ‘factories’, ‘examples’)\n\n\ncount\nint\n\nNumber of items found\n\n\nacross_modules\nbool\nFalse\nWhether count spans multiple modules\n\n\nReturns\nNone\n\nNo return value\n\n\n\n\nsource\n\n\nprint_helpful_instructions\n\n print_helpful_instructions (instructions:List[Tuple[str,Optional[str]]])\n\nPrint helpful instructions section.\n\n\n\n\nType\nDetails\n\n\n\n\ninstructions\nList\nList of (description, example) tuples\n\n\n\n\nsource\n\n\ndisplay_items_generic\n\n display_items_generic (items:Union[Dict,List], title:str,\n                        item_formatter:Callable[[Any],str], item_type:str,\n                        instructions:Optional[List[Tuple[str,Optional[str]\n                        ]]]=None, not_found_message:Optional[str]=None)\n\nGeneric function to display a collection of items with consistent formatting.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nitems\nUnion\n\nItems to display (dict of lists or list)\n\n\ntitle\nstr\n\nTitle for the display\n\n\nitem_formatter\nCallable\n\nFunction to format each item\n\n\nitem_type\nstr\n\nType of items for the total message\n\n\ninstructions\nOptional\nNone\nHelp instructions\n\n\nnot_found_message\nOptional\nNone\nCustom not found message",
    "crumbs": [
      "cli",
      "utils"
    ]
  },
  {
    "objectID": "cli/utils.html#search-helper-functions",
    "href": "cli/utils.html#search-helper-functions",
    "title": "utils",
    "section": "Search Helper Functions",
    "text": "Search Helper Functions\nHelper functions for search operations:\n\nsource\n\nhandle_module_not_found\n\n handle_module_not_found (item_type:str, module_name:str,\n                          config:Optional[cjm_fasthtml_tailwind.cli.cli_co\n                          nfig.LibraryConfig]=None)\n\nPrint standardized error message for module not found.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nitem_type\nstr\n\nType of items not found (e.g., ‘factories’, ‘examples’)\n\n\nmodule_name\nstr\n\nName of the module that wasn’t found\n\n\nconfig\nOptional\nNone\nOptional configuration\n\n\n\n\nsource\n\n\nsimple_item_formatter\n\n simple_item_formatter (name_field:str, doc_field:str)\n\nCreate a simple formatter for items with name and documentation fields.\n\n\n\n\nType\nDetails\n\n\n\n\nname_field\nstr\nName of the field containing the item name\n\n\ndoc_field\nstr\nName of the field containing the documentation\n\n\nReturns\nCallable\nFormatter function\n\n\n\n\nsource\n\n\nindented_item_formatter\n\n indented_item_formatter (prefix:str='  ')\n\nCreate a formatter that indents items with a prefix.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nIndentation prefix\n\n\nReturns\nCallable\n\nReturns a formatter factory\n\n\n\n\nsource\n\n\nextract_match_context\n\n extract_match_context (text:str, query:str, case_sensitive:bool=False,\n                        context_size:int=30)\n\nExtract context around a match in text.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntext\nstr\n\nText to extract context from\n\n\nquery\nstr\n\nQuery string to find\n\n\ncase_sensitive\nbool\nFalse\nWhether to perform case-sensitive search\n\n\ncontext_size\nint\n30\nNumber of characters to show before and after match\n\n\nReturns\nstr\n\nContext string with match highlighted\n\n\n\n\nsource\n\n\nextract_source_line_context\n\n extract_source_line_context (source:str, query:str,\n                              case_sensitive:bool=False)\n\nExtract line context for a match in source code.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsource\nstr\n\nSource code to search\n\n\nquery\nstr\n\nQuery string to find\n\n\ncase_sensitive\nbool\nFalse\nWhether to perform case-sensitive search\n\n\nReturns\nstr\n\nLine context showing where match was found\n\n\n\n\nsource\n\n\ncreate_search_result\n\n create_search_result (content_type:str, module_name:str, item_name:str,\n                       match_context:str, match_location:str)\n\nCreate a SearchResult with standard fields.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncontent_type\nstr\nType of content (‘factory’, ‘example’, ‘helper’, ‘module’)\n\n\nmodule_name\nstr\nModule where match was found\n\n\nitem_name\nstr\nName of the item that matched\n\n\nmatch_context\nstr\nContext showing the match\n\n\nmatch_location\nstr\nWhere in the item the match was found (‘name’, ‘doc’, ‘source’)\n\n\nReturns\nSearchResult\nSearchResult instance with provided fields\n\n\n\n\nsource\n\n\nsearch_in_text\n\n search_in_text (query:str, text:str, case_sensitive:bool=False)\n\nCheck if query exists in text.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nquery\nstr\n\nSearch query\n\n\ntext\nstr\n\nText to search in\n\n\ncase_sensitive\nbool\nFalse\nWhether to perform case-sensitive search\n\n\nReturns\nbool\n\nTrue if match found\n\n\n\n\nsource\n\n\nsearch_in_name_and_text\n\n search_in_name_and_text (query:str, item_name:str, text:str,\n                          content_type:str, module_name:str,\n                          text_location:str, case_sensitive:bool=False)\n\nSearch in both name and text fields, returning search results.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nquery\nstr\n\nSearch query to find\n\n\nitem_name\nstr\n\nItem name to search in\n\n\ntext\nstr\n\nText (documentation, docstring) to search in\n\n\ncontent_type\nstr\n\nType of content being searched\n\n\nmodule_name\nstr\n\nModule containing the item\n\n\ntext_location\nstr\n\nDescription of text field (e.g., ‘documentation’, ‘docstring’)\n\n\ncase_sensitive\nbool\nFalse\nWhether to perform case-sensitive search\n\n\nReturns\nList\n\nList of search results for matches found\n\n\n\n\nsource\n\n\ncheck_factory_usage_patterns\n\n check_factory_usage_patterns (factory_name:str)\n\nGet regex patterns to match common factory usage patterns.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfactory_name\nstr\nName of factory to create patterns for\n\n\nReturns\nList\nList of regex patterns matching factory usage",
    "crumbs": [
      "cli",
      "utils"
    ]
  },
  {
    "objectID": "cli/utils.html#enhanced-search-functions",
    "href": "cli/utils.html#enhanced-search-functions",
    "title": "utils",
    "section": "Enhanced Search Functions",
    "text": "Enhanced Search Functions\nAdvanced search helper functions:\n\nsource\n\nsearch_in_fields\n\n search_in_fields (item:Any, query:str,\n                   fields:Dict[str,Callable[[Any],str]], content_type:str,\n                   module_name:str, item_name:str,\n                   case_sensitive:bool=False)\n\nSearch for query in multiple fields of an item.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nitem\nAny\n\nThe item to search in\n\n\nquery\nstr\n\nSearch query\n\n\nfields\nDict\n\nfield_name -&gt; getter function\n\n\ncontent_type\nstr\n\nType of content being searched\n\n\nmodule_name\nstr\n\nModule containing the item\n\n\nitem_name\nstr\n\nName of the item\n\n\ncase_sensitive\nbool\nFalse\nWhether to perform case-sensitive search\n\n\nReturns\nList\n\nList of search results\n\n\n\n\nsource\n\n\nsearch_in_source_code\n\n search_in_source_code (source:str, query:str, content_type:str,\n                        module_name:str, item_name:str,\n                        case_sensitive:bool=False)\n\nSearch in source code and return result with line context.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsource\nstr\n\nSource code to search in\n\n\nquery\nstr\n\nSearch query\n\n\ncontent_type\nstr\n\nType of content being searched\n\n\nmodule_name\nstr\n\nModule containing the source\n\n\nitem_name\nstr\n\nName of the item\n\n\ncase_sensitive\nbool\nFalse\nWhether to perform case-sensitive search\n\n\nReturns\nOptional\n\nSearch result or None\n\n\n\n\nsource\n\n\nfind_variable_usages\n\n find_variable_usages (func_src:str, var_name:str)\n\nFind variable usages by parsing function into an AST.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfunc_src\nstr\nSource code to search\n\n\nvar_name\nstr\nVariable name to find\n\n\nReturns\nList\nList of (line_number, column, context_type) tuples\n\n\n\n\nsource\n\n\nfind_usage_in_items\n\n find_usage_in_items (target_name:str, items:Dict[str,List[Any]],\n                      source_getter:Callable[[Any],str], item_type:str)\n\nFind items that use a specific target (factory/helper).\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntarget_name\nstr\nName of the target (factory/helper) to find usage for\n\n\nitems\nDict\nDictionary of module_name -&gt; list of items\n\n\nsource_getter\nCallable\nFunction to get source code from item\n\n\nitem_type\nstr\nType of items being searched (for display)\n\n\nReturns\nList\nList of (module_name, item) tuples",
    "crumbs": [
      "cli",
      "utils"
    ]
  },
  {
    "objectID": "cli/utils.html#module-discovery-helpers",
    "href": "cli/utils.html#module-discovery-helpers",
    "title": "utils",
    "section": "Module Discovery Helpers",
    "text": "Module Discovery Helpers\nHelper functions for module discovery and iteration:",
    "crumbs": [
      "cli",
      "utils"
    ]
  },
  {
    "objectID": "cli/utils.html#command-generation-helpers",
    "href": "cli/utils.html#command-generation-helpers",
    "title": "utils",
    "section": "Command Generation Helpers",
    "text": "Command Generation Helpers\nHelper functions for generating CLI commands:\n\nsource\n\nget_view_command\n\n get_view_command (content_type:str, module_name:str, item_name:str,\n                   config:Optional[cjm_fasthtml_tailwind.cli.cli_config.Li\n                   braryConfig]=None)\n\nGet the CLI command to view a specific item.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncontent_type\nstr\n\nType of content (‘factory’, ‘example’, ‘helper’, ‘module’)\n\n\nmodule_name\nstr\n\nModule name\n\n\nitem_name\nstr\n\nItem name (or feature name for examples)\n\n\nconfig\nOptional\nNone\nOptional configuration\n\n\nReturns\nstr\n\nCLI command to view the item\n\n\n\n\nsource\n\n\nformat_usage_examples\n\n format_usage_examples (usage_items:List[Tuple[str,Any]],\n                        item_name_getter:Callable[[Any],str],\n                        item_type:str, view_command_type:str)\n\nFormat usage examples for display.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nusage_items\nList\nList of (module_name, item) tuples\n\n\nitem_name_getter\nCallable\nFunction to get item name\n\n\nitem_type\nstr\nType of items (‘examples’ or ‘helpers’)\n\n\nview_command_type\nstr\nType for get_view_command (‘example’ or ‘helper’)\n\n\nReturns\nList\nList of formatted strings\n\n\n\n\nsource\n\n\ndiscover_utility_modules\n\n discover_utility_modules (config:Optional[cjm_fasthtml_tailwind.cli.cli_c\n                           onfig.LibraryConfig]=None,\n                           include_submodules:bool=True)\n\nDiscover all utility modules based on configuration, including submodules.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig\nOptional\nNone\nOptional configuration, uses active if not provided\n\n\ninclude_submodules\nbool\nTrue\nWhether to include submodules\n\n\nReturns\nList\n\nList of (module_name, module) tuples\n\n\n\n\nsource\n\n\niterate_all_modules_with_items\n\n iterate_all_modules_with_items\n                                 (extractor_func:Callable[[Any,str],List[A\n                                 ny]], module_filter:Optional[str]=None, c\n                                 onfig:Optional[cjm_fasthtml_tailwind.cli.\n                                 cli_config.LibraryConfig]=None)\n\nGeneric iterator for extracting items from all modules.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nextractor_func\nCallable\n\nFunction to extract items from a module\n\n\nmodule_filter\nOptional\nNone\nOptional specific module to filter for\n\n\nconfig\nOptional\nNone\nOptional configuration\n\n\nReturns\nDict\n\nDictionary mapping module names to their items\n\n\n\n\nsource\n\n\nextract_helper_names_from_test\n\n extract_helper_names_from_test (source:str)\n\nExtract helper function names from test source code.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nSource code of the test__helper_examples function\n\n\nReturns\nList\nList of helper function names\n\n\n\n\nsource\n\n\nload_code_from_file\n\n load_code_from_file (filepath:str)\n\nLoad code from a file.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfilepath\nstr\nPath to file to load\n\n\nReturns\nOptional\nFile contents as string, or None if error\n\n\n\n\nsource\n\n\nlist_utility_modules\n\n list_utility_modules (config:Optional[cjm_fasthtml_tailwind.cli.cli_confi\n                       g.LibraryConfig]=None)\n\nList all available utility modules with their docstrings.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig\nOptional\nNone\nOptional configuration\n\n\nReturns\nDict\n\nDictionary mapping module names to their docstrings",
    "crumbs": [
      "cli",
      "utils"
    ]
  },
  {
    "objectID": "cli/utils.html#export",
    "href": "cli/utils.html#export",
    "title": "utils",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "utils"
    ]
  },
  {
    "objectID": "cli/example_discovery.html",
    "href": "cli/example_discovery.html",
    "title": "Example Discovery",
    "section": "",
    "text": "source",
    "crumbs": [
      "cli",
      "Example Discovery"
    ]
  },
  {
    "objectID": "cli/example_discovery.html#export",
    "href": "cli/example_discovery.html#export",
    "title": "Example Discovery",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "Example Discovery"
    ]
  },
  {
    "objectID": "cli/helper_discovery.html",
    "href": "cli/helper_discovery.html",
    "title": "Helper Function Discovery",
    "section": "",
    "text": "source",
    "crumbs": [
      "cli",
      "Helper Function Discovery"
    ]
  },
  {
    "objectID": "cli/helper_discovery.html#export",
    "href": "cli/helper_discovery.html#export",
    "title": "Helper Function Discovery",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "Helper Function Discovery"
    ]
  },
  {
    "objectID": "utilities/spacing.html",
    "href": "utilities/spacing.html",
    "title": "spacing",
    "section": "",
    "text": "Tailwind CSS provides comprehensive padding utilities that can be applied to all sides or specific sides of an element.\n\n\nExported source\np = DirectionalScaledFactory(\"p\", SPACING_CONFIG, \"Padding utilities for controlling element padding\") # The padding factory\n\n# Additional directional padding utilities for logical properties\nps = ScaledFactory(\"ps\", SPACING_CONFIG, \"Padding inline-start utilities (logical property)\")  # padding-inline-start\npe = ScaledFactory(\"pe\", SPACING_CONFIG, \"Padding inline-end utilities (logical property)\")  # padding-inline-end\n\n\n\n\nApply padding to all sides of an element:\n\nsource\n\n\n\n\n test_spacing_basic_examples ()\n\nTest basic padding utilities with various scale values.\n\n\nExported source\ndef test_spacing_basic_examples(\n):\n    \"\"\"Test basic padding utilities with various scale values.\"\"\"\n    # Numeric scales\n    assert str(p(0)) == \"p-0\"\n    assert str(p(4)) == \"p-4\"\n    assert str(p(8)) == \"p-8\"\n    assert str(p(2.5)) == \"p-2.5\"\n    \n    # Special values\n    assert str(p.px) == \"p-px\"\n    assert str(p.auto) == \"p-auto\"\n\n# Run the tests\ntest_spacing_basic_examples()\n\n\n\n\n\nApply padding to specific sides:\n\nsource\n\n\n\n\n test_spacing_directional_examples ()\n\nTest directional padding utilities.\n\n\nExported source\ndef test_spacing_directional_examples(\n):\n    \"\"\"Test directional padding utilities.\"\"\"\n    # Individual sides\n    assert str(p.t(4)) == \"pt-4\" # (top)\n    assert str(p.r(4)) == \"pr-4\" # (right)\n    assert str(p.b(4)) == \"pb-4\" # (bottom)\n    assert str(p.l(4)) == \"pl-4\" # (left)\n    \n    # Horizontal and vertical\n    assert str(p.x(8)) == \"px-8\" # (left and right)\n    assert str(p.y(8)) == \"py-8\" # (top and bottom)\n\n# Run the tests\ntest_spacing_directional_examples()\n\n\n\n\n\nUse custom values when needed:\n\nsource\n\n\n\n\n test_spacing_arbitrary_examples ()\n\nTest padding utilities with arbitrary and custom values.\n\n\nExported source\ndef test_spacing_arbitrary_examples(\n):\n    \"\"\"Test padding utilities with arbitrary and custom values.\"\"\"\n    # Arbitrary values\n    assert str(p(\"10px\")) == \"p-[10px]\"\n    assert str(p(\"2.5rem\")) == \"p-[2.5rem]\"\n    assert str(p.x(\"calc(50% - 1rem)\")) == \"px-[calc(50% - 1rem)]\"\n    \n    # Custom properties\n    assert str(p(\"--spacing-lg\")) == \"p-(--spacing-lg)\"\n    assert str(p.y(\"--spacing-vertical\")) == \"py-(--spacing-vertical)\"\n\n# Run the tests\ntest_spacing_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "spacing"
    ]
  },
  {
    "objectID": "utilities/spacing.html#padding-utilities",
    "href": "utilities/spacing.html#padding-utilities",
    "title": "spacing",
    "section": "",
    "text": "Tailwind CSS provides comprehensive padding utilities that can be applied to all sides or specific sides of an element.\n\n\nExported source\np = DirectionalScaledFactory(\"p\", SPACING_CONFIG, \"Padding utilities for controlling element padding\") # The padding factory\n\n# Additional directional padding utilities for logical properties\nps = ScaledFactory(\"ps\", SPACING_CONFIG, \"Padding inline-start utilities (logical property)\")  # padding-inline-start\npe = ScaledFactory(\"pe\", SPACING_CONFIG, \"Padding inline-end utilities (logical property)\")  # padding-inline-end\n\n\n\n\nApply padding to all sides of an element:\n\nsource\n\n\n\n\n test_spacing_basic_examples ()\n\nTest basic padding utilities with various scale values.\n\n\nExported source\ndef test_spacing_basic_examples(\n):\n    \"\"\"Test basic padding utilities with various scale values.\"\"\"\n    # Numeric scales\n    assert str(p(0)) == \"p-0\"\n    assert str(p(4)) == \"p-4\"\n    assert str(p(8)) == \"p-8\"\n    assert str(p(2.5)) == \"p-2.5\"\n    \n    # Special values\n    assert str(p.px) == \"p-px\"\n    assert str(p.auto) == \"p-auto\"\n\n# Run the tests\ntest_spacing_basic_examples()\n\n\n\n\n\nApply padding to specific sides:\n\nsource\n\n\n\n\n test_spacing_directional_examples ()\n\nTest directional padding utilities.\n\n\nExported source\ndef test_spacing_directional_examples(\n):\n    \"\"\"Test directional padding utilities.\"\"\"\n    # Individual sides\n    assert str(p.t(4)) == \"pt-4\" # (top)\n    assert str(p.r(4)) == \"pr-4\" # (right)\n    assert str(p.b(4)) == \"pb-4\" # (bottom)\n    assert str(p.l(4)) == \"pl-4\" # (left)\n    \n    # Horizontal and vertical\n    assert str(p.x(8)) == \"px-8\" # (left and right)\n    assert str(p.y(8)) == \"py-8\" # (top and bottom)\n\n# Run the tests\ntest_spacing_directional_examples()\n\n\n\n\n\nUse custom values when needed:\n\nsource\n\n\n\n\n test_spacing_arbitrary_examples ()\n\nTest padding utilities with arbitrary and custom values.\n\n\nExported source\ndef test_spacing_arbitrary_examples(\n):\n    \"\"\"Test padding utilities with arbitrary and custom values.\"\"\"\n    # Arbitrary values\n    assert str(p(\"10px\")) == \"p-[10px]\"\n    assert str(p(\"2.5rem\")) == \"p-[2.5rem]\"\n    assert str(p.x(\"calc(50% - 1rem)\")) == \"px-[calc(50% - 1rem)]\"\n    \n    # Custom properties\n    assert str(p(\"--spacing-lg\")) == \"p-(--spacing-lg)\"\n    assert str(p.y(\"--spacing-vertical\")) == \"py-(--spacing-vertical)\"\n\n# Run the tests\ntest_spacing_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "spacing"
    ]
  },
  {
    "objectID": "utilities/spacing.html#margin-utilities",
    "href": "utilities/spacing.html#margin-utilities",
    "title": "spacing",
    "section": "Margin Utilities",
    "text": "Margin Utilities\nMargin utilities work exactly like padding utilities but can also have negative values.\n\n\nExported source\nm = DirectionalScaledFactory(\"m\", SPACING_CONFIG, \"Margin utilities for controlling element margin\") # The margin factory\n\n# Additional directional margin utilities for logical properties\nms = ScaledFactory(\"ms\", SPACING_CONFIG, \"Margin inline-start utilities (logical property)\")  # margin-inline-start\nme = ScaledFactory(\"me\", SPACING_CONFIG, \"Margin inline-end utilities (logical property)\")  # margin-inline-end\n\n\n\nBasic Margin\nApply margin to all sides:\n\nsource\n\n\ntest_spacing_margin_examples\n\n test_spacing_margin_examples ()\n\nTest basic margin utilities with various scale values.\n\n\nExported source\ndef test_spacing_margin_examples(\n):\n    \"\"\"Test basic margin utilities with various scale values.\"\"\"\n    # Numeric scales\n    assert str(m(0)) == \"m-0\"\n    assert str(m(4)) == \"m-4\"\n    assert str(m(8)) == \"m-8\"\n    assert str(m(2.5)) == \"m-2.5\"\n    \n    # Special values\n    assert str(m.px) == \"m-px\"\n    assert str(m.auto) == \"m-auto\"\n\n# Run the tests\ntest_spacing_margin_examples()\n\n\n\n\nDirectional Margin\nApply margin to specific sides:\n\nsource\n\n\ntest_spacing_margin_directional_examples\n\n test_spacing_margin_directional_examples ()\n\nTest directional margin utilities.\n\n\nExported source\ndef test_spacing_margin_directional_examples(\n):\n    \"\"\"Test directional margin utilities.\"\"\"\n    # Individual sides\n    assert str(m.t(4)) == \"mt-4\" # (top)\n    assert str(m.r(4)) == \"mr-4\" # (right)\n    assert str(m.b(4)) == \"mb-4\" # (bottom)\n    assert str(m.l(4)) == \"ml-4\" # (left)\n    \n    # Horizontal and vertical\n    assert str(m.x(8)) == \"mx-8\" # (left and right)\n    assert str(m.y(8)) == \"my-8\" # (top and bottom)\n    \n    # Auto for centering\n    assert str(m.x.auto) == \"mx-auto\" # (center horizontally)\n\n# Run the tests\ntest_spacing_margin_directional_examples()\n\n\n\n\nNegative Margins\nUse negative margins to pull elements outside their parent or overlap:\n\nsource\n\n\ntest_spacing_negative_examples\n\n test_spacing_negative_examples ()\n\nTest negative margin utilities.\n\n\nExported source\ndef test_spacing_negative_examples(\n):\n    \"\"\"Test negative margin utilities.\"\"\"\n    # Negative values using negative=True\n    assert str(m(4, negative=True)) == \"-m-4\"\n    assert str(m.t(2, negative=True)) == \"-mt-2\"\n    \n    # Negative values using .negative property\n    assert str(m.negative(4)) == \"-m-4\"\n    assert str(m.t.negative(2)) == \"-mt-2\"\n    assert str(m.x.negative(8)) == \"-mx-8\"\n    \n    # Negative special values\n    assert str(m.negative.px) == \"-m-px\"\n    assert str(m.y.negative.px) == \"-my-px\"\n\n# Run the tests\ntest_spacing_negative_examples()\n\n\n\nsource\n\n\ntest_spacing_logical_examples\n\n test_spacing_logical_examples ()\n\nTest logical properties for padding and margin utilities.\n\n\nExported source\ndef test_spacing_logical_examples(\n):\n    \"\"\"Test logical properties for padding and margin utilities.\"\"\"\n    # Logical padding properties\n    assert str(ps(4)) == \"ps-4\" # (padding-inline-start)\n    assert str(pe(4)) == \"pe-4\" # (padding-inline-end)\n    \n    # Logical margin properties\n    assert str(ms(4)) == \"ms-4\" # (margin-inline-start)\n    assert str(me(4)) == \"me-4\" # (margin-inline-end)\n    assert str(ms.auto) == \"ms-auto\"\n    assert str(me.auto) == \"me-auto\"\n    \n    # Negative logical margins\n    assert str(ms.negative(2)) == \"-ms-2\"\n    assert str(me.negative(2)) == \"-me-2\"\n\n# Run the tests\ntest_spacing_logical_examples()",
    "crumbs": [
      "utilities",
      "spacing"
    ]
  },
  {
    "objectID": "utilities/spacing.html#space-between-utilities",
    "href": "utilities/spacing.html#space-between-utilities",
    "title": "spacing",
    "section": "Space Between Utilities",
    "text": "Space Between Utilities\nTailwind also provides utilities for adding space between child elements.\n\nsource\n\nSpaceFactory\n\n SpaceFactory ()\n\nSpecial factory for space utilities that control spacing between child elements.\n\nsource\n\n\ntest_spacing_space_between_examples\n\n test_spacing_space_between_examples ()\n\nTest space between child elements utilities.\n\n\nExported source\nspace = SpaceFactory() # The space factory\n\n\n\n\nExported source\ndef test_spacing_space_between_examples(\n):\n    \"\"\"Test space between child elements utilities.\"\"\"\n    # Horizontal spacing between children\n    assert str(space.x(4)) == \"space-x-4\"\n    assert str(space.x(8)) == \"space-x-8\"\n    assert str(space.x(0)) == \"space-x-0\"\n    assert str(space.x.px) == \"space-x-px\"\n    \n    # Vertical spacing between children\n    assert str(space.y(4)) == \"space-y-4\"\n    assert str(space.y(8)) == \"space-y-8\"\n    \n    # Negative space (overlap children)\n    assert str(space.x.negative(2)) == \"-space-x-2\"\n    assert str(space.y.negative(4)) == \"-space-y-4\"\n    \n    # Space reverse utilities using factory\n    assert str(space.x_reverse) == \"space-x-reverse\"\n    assert str(space.y_reverse) == \"space-y-reverse\"\n\n# Run the tests\ntest_spacing_space_between_examples()",
    "crumbs": [
      "utilities",
      "spacing"
    ]
  },
  {
    "objectID": "utilities/spacing.html#practical-examples",
    "href": "utilities/spacing.html#practical-examples",
    "title": "spacing",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these utilities in real FastHTML components:\n\nsource\n\ntest_spacing_fasthtml_examples\n\n test_spacing_fasthtml_examples ()\n\nTest spacing utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_spacing_fasthtml_examples(\n):\n    \"\"\"Test spacing utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, P, Button, H2\n    from cjm_fasthtml_tailwind.utilities.sizing import max_w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Card component with padding\n    card = Div(\n        H2(\"Card Title\", cls=combine_classes(p.b(2))),\n        P(\"Card content goes here.\", cls=combine_classes(p.b(4))),\n        Button(\"Action\", cls=combine_classes(p.x(4), p.y(2))),\n        cls=combine_classes(p(6), m(4))\n    )\n    \n    # Show the generated classes\n    assert card.attrs['class'] == \"p-6 m-4\"\n    assert card.children[0].attrs['class'] == \"pb-2\"\n    assert card.children[2].attrs['class'] == \"px-4 py-2\"\n    \n    # Layout with negative margins\n    overlap_layout = Div(\n        Div(\"Header\", cls=combine_classes(p(4), m.b.negative(8))),\n        Div(\"Content\", cls=combine_classes(p(8))),\n        cls=m(4)\n    )\n    \n    assert overlap_layout.children[0].attrs['class'] == \"p-4 -mb-8\"\n    \n    # Centered container with auto margins\n    centered_container = Div(\n        \"Centered content\",\n        cls=combine_classes(m.x.auto, p(8), max_w._4xl)\n    )\n    \n    assert centered_container.attrs['class'] == \"mx-auto p-8 max-w-4xl\"\n    \n    # Return all examples in a grid layout\n    return Div(\n        card,\n        overlap_layout,\n        centered_container,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_spacing_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"p-6 m-4\"&gt;\n    &lt;h2 class=\"pb-2\"&gt;Card Title&lt;/h2&gt;\n    &lt;p class=\"pb-4\"&gt;Card content goes here.&lt;/p&gt;\n&lt;button class=\"px-4 py-2\"&gt;Action&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"m-4\"&gt;\n    &lt;div class=\"p-4 -mb-8\"&gt;Header&lt;/div&gt;\n    &lt;div class=\"p-8\"&gt;Content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"mx-auto p-8 max-w-4xl\"&gt;Centered content&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_spacing_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "spacing"
    ]
  },
  {
    "objectID": "utilities/spacing.html#helper-functions",
    "href": "utilities/spacing.html#helper-functions",
    "title": "spacing",
    "section": "Helper Functions",
    "text": "Helper Functions\nConvenient functions for common spacing patterns:\n\nsource\n\npad\n\n pad (all:Union[int,float,str,NoneType]=None,\n      x:Union[int,float,str,NoneType]=None,\n      y:Union[int,float,str,NoneType]=None,\n      t:Union[int,float,str,NoneType]=None,\n      r:Union[int,float,str,NoneType]=None,\n      b:Union[int,float,str,NoneType]=None,\n      l:Union[int,float,str,NoneType]=None)\n\nGenerate padding classes with a convenient API.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nall\nUnion\nNone\nPadding for all sides\n\n\nx\nUnion\nNone\nHorizontal padding\n\n\ny\nUnion\nNone\nVertical padding\n\n\nt\nUnion\nNone\nTop padding\n\n\nr\nUnion\nNone\nRight padding\n\n\nb\nUnion\nNone\nBottom padding\n\n\nl\nUnion\nNone\nLeft padding\n\n\nReturns\nstr\n\nSpace-separated padding classes\n\n\n\n\nsource\n\n\nmargin\n\n margin (all:Union[int,float,str,NoneType]=None,\n         x:Union[int,float,str,NoneType]=None,\n         y:Union[int,float,str,NoneType]=None,\n         t:Union[int,float,str,NoneType]=None,\n         r:Union[int,float,str,NoneType]=None,\n         b:Union[int,float,str,NoneType]=None,\n         l:Union[int,float,str,NoneType]=None, negative:bool=False)\n\nGenerate margin classes with a convenient API.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nall\nUnion\nNone\nMargin for all sides\n\n\nx\nUnion\nNone\nHorizontal margin\n\n\ny\nUnion\nNone\nVertical margin\n\n\nt\nUnion\nNone\nTop margin\n\n\nr\nUnion\nNone\nRight margin\n\n\nb\nUnion\nNone\nBottom margin\n\n\nl\nUnion\nNone\nLeft margin\n\n\nnegative\nbool\nFalse\nApply negative margins\n\n\nReturns\nstr\n\nSpace-separated margin classes\n\n\n\n\nsource\n\n\ntest_spacing_helper_examples\n\n test_spacing_helper_examples ()\n\nTest helper functions for common spacing patterns.\n\n\nExported source\ndef test_spacing_helper_examples(\n):\n    \"\"\"Test helper functions for common spacing patterns.\"\"\"\n    # Test pad helper\n    assert pad(4) == \"p-4\"\n    assert pad(x=8, y=4) == \"px-8 py-4\"\n    assert pad(t=2, b=4, x=6) == \"px-6 pt-2 pb-4\"\n    \n    # Test margin helper\n    assert margin(4) == \"m-4\"\n    assert margin(x=\"auto\", y=8) == \"mx-auto my-8\"\n    assert margin(t=4, negative=True) == \"-mt-4\"\n\n# Run the tests\ntest_spacing_helper_examples()",
    "crumbs": [
      "utilities",
      "spacing"
    ]
  },
  {
    "objectID": "utilities/spacing.html#modifiers-with-spacing-utilities",
    "href": "utilities/spacing.html#modifiers-with-spacing-utilities",
    "title": "spacing",
    "section": "Modifiers with Spacing Utilities",
    "text": "Modifiers with Spacing Utilities\nSpacing utilities support all Tailwind modifiers for conditional styling:\n\nsource\n\ntest_spacing_modifier_examples\n\n test_spacing_modifier_examples ()\n\nTest spacing utilities with modifiers for conditional styling.\n\n\nExported source\ndef test_spacing_modifier_examples(\n):\n    \"\"\"Test spacing utilities with modifiers for conditional styling.\"\"\"\n    # Test hover states\n    assert str(p(4).hover) == \"hover:p-4\"\n    assert str(m.x(8).hover) == \"hover:mx-8\"\n    assert str(p.t(2).hover.focus) == \"focus:hover:pt-2\"\n    \n    # Test responsive modifiers\n    assert str(p(4).sm) == \"sm:p-4\"\n    assert str(p(4).max_sm) == \"max-sm:p-4\"\n    assert str(m.x(8).md) == \"md:mx-8\"\n    assert str(m.x(8).max_md) == \"max-md:mx-8\"\n    assert str(p.y(0).lg) == \"lg:py-0\"\n    assert str(m.negative(4).xl) == \"xl:-m-4\"\n    \n    # Test dark mode\n    assert str(p(8).dark) == \"dark:p-8\"\n    assert str(m.x.auto.dark) == \"dark:mx-auto\"\n    \n    # Test chained modifiers\n    assert str(p(4).hover.md) == \"md:hover:p-4\"\n    assert str(m(8).dark.lg.hover) == \"hover:lg:dark:m-8\"\n    \n    # Test with space utilities\n    assert str(space.x(4).hover) == \"hover:space-x-4\"\n    assert str(space.y(2).md) == \"md:space-y-2\"\n\n# Run the tests\ntest_spacing_modifier_examples()\n\n\n\nsource\n\n\ntest_spacing_enhanced_factory_examples\n\n test_spacing_enhanced_factory_examples ()\n\nTest enhanced SingleValueFactory support in spacing utilities.\n\n\nExported source\ndef test_spacing_enhanced_factory_examples(\n):\n    \"\"\"Test enhanced SingleValueFactory support in spacing utilities.\"\"\"\n    # Test space reverse utilities with modifiers\n    assert str(space.x_reverse) == \"space-x-reverse\"\n    assert str(space.x_reverse.hover) == \"hover:space-x-reverse\"\n    \n    assert str(space.y_reverse) == \"space-y-reverse\"\n    assert str(space.y_reverse.md) == \"md:space-y-reverse\"\n    assert str(space.y_reverse.dark) == \"dark:space-y-reverse\"\n    \n    # Test combining space utilities with modifiers\n    from fasthtml.common import Div, Ul, Li\n    \n    # Responsive list spacing\n    list_container = Ul(\n        Li(\"Item 1\"),\n        Li(\"Item 2\"),\n        Li(\"Item 3\"),\n        cls=combine_classes(\n            space.y(2),           # Default spacing\n            space.y(4).md,        # Larger spacing on medium screens\n            \"flex flex-col\"\n        )\n    )\n    \n    assert \"space-y-2\" in list_container.attrs['class']\n    assert \"md:space-y-4\" in list_container.attrs['class']\n\n# Run the tests\ntest_spacing_enhanced_factory_examples()",
    "crumbs": [
      "utilities",
      "spacing"
    ]
  },
  {
    "objectID": "utilities/spacing.html#export",
    "href": "utilities/spacing.html#export",
    "title": "spacing",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "spacing"
    ]
  },
  {
    "objectID": "utilities/interactivity.html",
    "href": "utilities/interactivity.html",
    "title": "interactivity",
    "section": "",
    "text": "Utilities for controlling the accented color of form controls (like checkboxes, radio buttons, and range sliders):\n\nsource\n\n\n\n test_interactivity_accent_examples ()\n\nTest accent color utilities.\n\n\nExported source\naccent = ColoredFactory(\"accent\", \"Accent color utilities for form controls like checkboxes, radio buttons, and range sliders\") # The accent color factory\n\n\n\n\nExported source\ndef test_interactivity_accent_examples():\n    \"\"\"Test accent color utilities.\"\"\"\n    \n    # Test all 22 color families\n    assert str(accent.red._500) == \"accent-red-500\"\n    assert str(accent.orange._500) == \"accent-orange-500\"\n    assert str(accent.amber._500) == \"accent-amber-500\"\n    assert str(accent.yellow._500) == \"accent-yellow-500\"\n    assert str(accent.lime._500) == \"accent-lime-500\"\n    assert str(accent.green._500) == \"accent-green-500\"\n    assert str(accent.emerald._500) == \"accent-emerald-500\"\n    assert str(accent.teal._500) == \"accent-teal-500\"\n    assert str(accent.cyan._500) == \"accent-cyan-500\"\n    assert str(accent.sky._500) == \"accent-sky-500\"\n    assert str(accent.blue._500) == \"accent-blue-500\"\n    assert str(accent.indigo._500) == \"accent-indigo-500\"\n    assert str(accent.violet._500) == \"accent-violet-500\"\n    assert str(accent.purple._500) == \"accent-purple-500\"\n    assert str(accent.fuchsia._500) == \"accent-fuchsia-500\"\n    assert str(accent.pink._500) == \"accent-pink-500\"\n    assert str(accent.rose._500) == \"accent-rose-500\"\n    assert str(accent.slate._500) == \"accent-slate-500\"\n    assert str(accent.gray._500) == \"accent-gray-500\"\n    assert str(accent.zinc._500) == \"accent-zinc-500\"\n    assert str(accent.neutral._500) == \"accent-neutral-500\"\n    assert str(accent.stone._500) == \"accent-stone-500\"\n    \n    # Special colors\n    assert str(accent.inherit) == \"accent-inherit\"\n    assert str(accent.current) == \"accent-current\"\n    assert str(accent.transparent) == \"accent-transparent\"\n    assert str(accent.black) == \"accent-black\"\n    assert str(accent.white) == \"accent-white\"\n    \n    # Arbitrary values\n    assert str(accent(\"#ff0000\")) == \"accent-[#ff0000]\"\n    assert str(accent(\"--custom-accent\")) == \"accent-(--custom-accent)\"\n\n# Run the tests\ntest_interactivity_accent_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#accent-color",
    "href": "utilities/interactivity.html#accent-color",
    "title": "interactivity",
    "section": "",
    "text": "Utilities for controlling the accented color of form controls (like checkboxes, radio buttons, and range sliders):\n\nsource\n\n\n\n test_interactivity_accent_examples ()\n\nTest accent color utilities.\n\n\nExported source\naccent = ColoredFactory(\"accent\", \"Accent color utilities for form controls like checkboxes, radio buttons, and range sliders\") # The accent color factory\n\n\n\n\nExported source\ndef test_interactivity_accent_examples():\n    \"\"\"Test accent color utilities.\"\"\"\n    \n    # Test all 22 color families\n    assert str(accent.red._500) == \"accent-red-500\"\n    assert str(accent.orange._500) == \"accent-orange-500\"\n    assert str(accent.amber._500) == \"accent-amber-500\"\n    assert str(accent.yellow._500) == \"accent-yellow-500\"\n    assert str(accent.lime._500) == \"accent-lime-500\"\n    assert str(accent.green._500) == \"accent-green-500\"\n    assert str(accent.emerald._500) == \"accent-emerald-500\"\n    assert str(accent.teal._500) == \"accent-teal-500\"\n    assert str(accent.cyan._500) == \"accent-cyan-500\"\n    assert str(accent.sky._500) == \"accent-sky-500\"\n    assert str(accent.blue._500) == \"accent-blue-500\"\n    assert str(accent.indigo._500) == \"accent-indigo-500\"\n    assert str(accent.violet._500) == \"accent-violet-500\"\n    assert str(accent.purple._500) == \"accent-purple-500\"\n    assert str(accent.fuchsia._500) == \"accent-fuchsia-500\"\n    assert str(accent.pink._500) == \"accent-pink-500\"\n    assert str(accent.rose._500) == \"accent-rose-500\"\n    assert str(accent.slate._500) == \"accent-slate-500\"\n    assert str(accent.gray._500) == \"accent-gray-500\"\n    assert str(accent.zinc._500) == \"accent-zinc-500\"\n    assert str(accent.neutral._500) == \"accent-neutral-500\"\n    assert str(accent.stone._500) == \"accent-stone-500\"\n    \n    # Special colors\n    assert str(accent.inherit) == \"accent-inherit\"\n    assert str(accent.current) == \"accent-current\"\n    assert str(accent.transparent) == \"accent-transparent\"\n    assert str(accent.black) == \"accent-black\"\n    assert str(accent.white) == \"accent-white\"\n    \n    # Arbitrary values\n    assert str(accent(\"#ff0000\")) == \"accent-[#ff0000]\"\n    assert str(accent(\"--custom-accent\")) == \"accent-(--custom-accent)\"\n\n# Run the tests\ntest_interactivity_accent_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#appearance",
    "href": "utilities/interactivity.html#appearance",
    "title": "interactivity",
    "section": "Appearance",
    "text": "Appearance\nUtilities for suppressing native form control styling:\n\nsource\n\ntest_interactivity_appearance_examples\n\n test_interactivity_appearance_examples ()\n\nTest appearance utilities.\n\n\nExported source\nappearance = SimpleFactory(\n    {\n        \"none\": \"appearance-none\",\n        \"auto\": \"appearance-auto\"\n    },\n    \"Appearance utilities for suppressing or restoring native form control styling\"\n) # Appearance factory\n\n\n\n\nExported source\ndef test_interactivity_appearance_examples():\n    \"\"\"Test appearance utilities.\"\"\"\n    assert str(appearance.none) == \"appearance-none\"\n    assert str(appearance.auto) == \"appearance-auto\"\n\n# Run the tests\ntest_interactivity_appearance_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#caret-color",
    "href": "utilities/interactivity.html#caret-color",
    "title": "interactivity",
    "section": "Caret Color",
    "text": "Caret Color\nUtilities for controlling the color of the text input cursor:\n\nsource\n\ntest_interactivity_caret_examples\n\n test_interactivity_caret_examples ()\n\nTest caret color utilities.\n\n\nExported source\ncaret = ColoredFactory(\"caret\", \"Caret color utilities for controlling the color of the text input cursor\") # The caret color factory\n\n\n\n\nExported source\ndef test_interactivity_caret_examples():\n    \"\"\"Test caret color utilities.\"\"\"\n    \n    # Test all 22 color families\n    assert str(caret.red._500) == \"caret-red-500\"\n    assert str(caret.orange._500) == \"caret-orange-500\"\n    assert str(caret.amber._500) == \"caret-amber-500\"\n    assert str(caret.yellow._500) == \"caret-yellow-500\"\n    assert str(caret.lime._500) == \"caret-lime-500\"\n    assert str(caret.green._500) == \"caret-green-500\"\n    assert str(caret.emerald._500) == \"caret-emerald-500\"\n    assert str(caret.teal._500) == \"caret-teal-500\"\n    assert str(caret.cyan._500) == \"caret-cyan-500\"\n    assert str(caret.sky._500) == \"caret-sky-500\"\n    assert str(caret.blue._500) == \"caret-blue-500\"\n    assert str(caret.indigo._500) == \"caret-indigo-500\"\n    assert str(caret.violet._500) == \"caret-violet-500\"\n    assert str(caret.purple._500) == \"caret-purple-500\"\n    assert str(caret.fuchsia._500) == \"caret-fuchsia-500\"\n    assert str(caret.pink._500) == \"caret-pink-500\"\n    assert str(caret.rose._500) == \"caret-rose-500\"\n    assert str(caret.slate._500) == \"caret-slate-500\"\n    assert str(caret.gray._500) == \"caret-gray-500\"\n    assert str(caret.zinc._500) == \"caret-zinc-500\"\n    assert str(caret.neutral._500) == \"caret-neutral-500\"\n    assert str(caret.stone._500) == \"caret-stone-500\"\n    \n    # Special colors\n    assert str(caret.inherit) == \"caret-inherit\"\n    assert str(caret.current) == \"caret-current\"\n    assert str(caret.transparent) == \"caret-transparent\"\n    assert str(caret.black) == \"caret-black\"\n    assert str(caret.white) == \"caret-white\"\n    \n    # Arbitrary values\n    assert str(caret(\"#ff0000\")) == \"caret-[#ff0000]\"\n    assert str(caret(\"--custom-caret\")) == \"caret-(--custom-caret)\"\n\n# Run the tests\ntest_interactivity_caret_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#color-scheme",
    "href": "utilities/interactivity.html#color-scheme",
    "title": "interactivity",
    "section": "Color Scheme",
    "text": "Color Scheme\nUtilities for controlling the color scheme of an element:\n\nsource\n\ntest_interactivity_scheme_examples\n\n test_interactivity_scheme_examples ()\n\nTest color scheme utilities.\n\n\nExported source\nscheme = SimpleFactory(\n    {\n        \"normal\": \"scheme-normal\",\n        \"dark\": \"scheme-dark\",\n        \"light\": \"scheme-light\",\n        \"light_dark\": \"scheme-light-dark\",\n        \"only_dark\": \"scheme-only-dark\",\n        \"only_light\": \"scheme-only-light\"\n    },\n    \"Color scheme utilities for controlling the preferred color scheme of an element\"\n) # Color scheme factory\n\n\n\n\nExported source\ndef test_interactivity_scheme_examples():\n    \"\"\"Test color scheme utilities.\"\"\"\n    assert str(scheme.normal) == \"scheme-normal\"\n    assert str(scheme.dark) == \"scheme-dark\"\n    assert str(scheme.light) == \"scheme-light\"\n    assert str(scheme.light_dark) == \"scheme-light-dark\"\n    assert str(scheme.only_dark) == \"scheme-only-dark\"\n    assert str(scheme.only_light) == \"scheme-only-light\"\n\n# Run the tests\ntest_interactivity_scheme_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#cursor",
    "href": "utilities/interactivity.html#cursor",
    "title": "interactivity",
    "section": "Cursor",
    "text": "Cursor\nUtilities for controlling the cursor style when hovering over an element:\n\nsource\n\nCursorFactory\n\n CursorFactory (values_dict:Optional[Dict[str,str]]=None,\n                doc:Optional[str]=None)\n\nFactory for cursor utilities with arbitrary value support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\nsource\n\n\ntest_interactivity_cursor_examples\n\n test_interactivity_cursor_examples ()\n\nTest cursor utilities.\n\n\nExported source\ncursor = CursorFactory(\n    {\n        \"auto\": \"cursor-auto\",\n        \"default\": \"cursor-default\",\n        \"pointer\": \"cursor-pointer\",\n        \"wait\": \"cursor-wait\",\n        \"text\": \"cursor-text\",\n        \"move\": \"cursor-move\",\n        \"help\": \"cursor-help\",\n        \"not-allowed\": \"cursor-not-allowed\",\n        \"none\": \"cursor-none\",\n        \"context-menu\": \"cursor-context-menu\",\n        \"progress\": \"cursor-progress\",\n        \"cell\": \"cursor-cell\",\n        \"crosshair\": \"cursor-crosshair\",\n        \"vertical-text\": \"cursor-vertical-text\",\n        \"alias\": \"cursor-alias\",\n        \"copy\": \"cursor-copy\",\n        \"no-drop\": \"cursor-no-drop\",\n        \"grab\": \"cursor-grab\",\n        \"grabbing\": \"cursor-grabbing\",\n        \"all-scroll\": \"cursor-all-scroll\",\n        \"col-resize\": \"cursor-col-resize\",\n        \"row-resize\": \"cursor-row-resize\",\n        \"n-resize\": \"cursor-n-resize\",\n        \"e-resize\": \"cursor-e-resize\",\n        \"s-resize\": \"cursor-s-resize\",\n        \"w-resize\": \"cursor-w-resize\",\n        \"ne-resize\": \"cursor-ne-resize\",\n        \"nw-resize\": \"cursor-nw-resize\",\n        \"se-resize\": \"cursor-se-resize\",\n        \"sw-resize\": \"cursor-sw-resize\",\n        \"ew-resize\": \"cursor-ew-resize\",\n        \"ns-resize\": \"cursor-ns-resize\",\n        \"nesw-resize\": \"cursor-nesw-resize\",\n        \"nwse-resize\": \"cursor-nwse-resize\",\n        \"zoom-in\": \"cursor-zoom-in\",\n        \"zoom-out\": \"cursor-zoom-out\"\n    },\n    \"Cursor utilities for controlling the cursor style when hovering over an element\"\n) # Cursor factory\n\n\n\n\nExported source\ndef test_interactivity_cursor_examples():\n    \"\"\"Test cursor utilities.\"\"\"\n    # Common cursors\n    assert str(cursor.auto) == \"cursor-auto\"\n    assert str(cursor.default) == \"cursor-default\"\n    assert str(cursor.pointer) == \"cursor-pointer\"\n    assert str(cursor.wait) == \"cursor-wait\"\n    assert str(cursor.text) == \"cursor-text\"\n    assert str(cursor.move) == \"cursor-move\"\n    assert str(cursor.help) == \"cursor-help\"\n    assert str(cursor.not_allowed) == \"cursor-not-allowed\"\n    \n    # Resize cursors\n    assert str(cursor.n_resize) == \"cursor-n-resize\"\n    assert str(cursor.ne_resize) == \"cursor-ne-resize\"\n    assert str(cursor.col_resize) == \"cursor-col-resize\"\n    assert str(cursor.row_resize) == \"cursor-row-resize\"\n    \n    # Special cursors\n    assert str(cursor.grab) == \"cursor-grab\"\n    assert str(cursor.grabbing) == \"cursor-grabbing\"\n    assert str(cursor.zoom_in) == \"cursor-zoom-in\"\n    assert str(cursor.zoom_out) == \"cursor-zoom-out\"\n    \n    # Custom properties and arbitrary values\n    assert cursor(\"--custom-cursor\") == \"cursor-(--custom-cursor)\"\n    assert cursor(\"url(cursor.png), auto\") == \"cursor-[url(cursor.png), auto]\"\n\n# Run the tests\ntest_interactivity_cursor_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#field-sizing",
    "href": "utilities/interactivity.html#field-sizing",
    "title": "interactivity",
    "section": "Field Sizing",
    "text": "Field Sizing\nUtilities for controlling the sizing of form controls:\n\nsource\n\ntest_interactivity_field_sizing_examples\n\n test_interactivity_field_sizing_examples ()\n\nTest field sizing utilities.\n\n\nExported source\nfield_sizing = SimpleFactory(\n    {\n        \"fixed\": \"field-sizing-fixed\",\n        \"content\": \"field-sizing-content\"\n    },\n    \"Field sizing utilities for controlling how form controls are sized\"\n) # Field sizing factory\n\n\n\n\nExported source\ndef test_interactivity_field_sizing_examples():\n    \"\"\"Test field sizing utilities.\"\"\"\n    assert str(field_sizing.fixed) == \"field-sizing-fixed\"\n    assert str(field_sizing.content) == \"field-sizing-content\"\n\n# Run the tests\ntest_interactivity_field_sizing_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#pointer-events",
    "href": "utilities/interactivity.html#pointer-events",
    "title": "interactivity",
    "section": "Pointer Events",
    "text": "Pointer Events\nUtilities for controlling whether an element responds to pointer events:\n\nsource\n\ntest_interactivity_pointer_events_examples\n\n test_interactivity_pointer_events_examples ()\n\nTest pointer events utilities.\n\n\nExported source\npointer_events = SimpleFactory(\n    {\n        \"auto\": \"pointer-events-auto\",\n        \"none\": \"pointer-events-none\"\n    },\n    \"Pointer events utilities for controlling whether an element responds to pointer events\"\n) # Pointer events factory\n\n\n\n\nExported source\ndef test_interactivity_pointer_events_examples():\n    \"\"\"Test pointer events utilities.\"\"\"\n    assert str(pointer_events.auto) == \"pointer-events-auto\"\n    assert str(pointer_events.none) == \"pointer-events-none\"\n\n# Run the tests\ntest_interactivity_pointer_events_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#resize",
    "href": "utilities/interactivity.html#resize",
    "title": "interactivity",
    "section": "Resize",
    "text": "Resize\nUtilities for controlling how an element can be resized:\n\nsource\n\ntest_interactivity_resize_examples\n\n test_interactivity_resize_examples ()\n\nTest resize utilities.\n\n\nExported source\nresize = SimpleFactory(\n    {\n        \"none\": \"resize-none\",\n        \"both\": \"resize\",\n        \"y\": \"resize-y\",\n        \"x\": \"resize-x\"\n    },\n    \"Resize utilities for controlling how an element can be resized\"\n) # Resize factory\n\n\n\n\nExported source\ndef test_interactivity_resize_examples():\n    \"\"\"Test resize utilities.\"\"\"\n    assert str(resize.none) == \"resize-none\"\n    assert str(resize.both) == \"resize\"\n    assert str(resize.y) == \"resize-y\"\n    assert str(resize.x) == \"resize-x\"\n\n# Run the tests\ntest_interactivity_resize_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#scroll-behavior",
    "href": "utilities/interactivity.html#scroll-behavior",
    "title": "interactivity",
    "section": "Scroll Behavior",
    "text": "Scroll Behavior\nUtilities for controlling the scroll behavior of an element:\n\nsource\n\ntest_interactivity_scroll_behavior_examples\n\n test_interactivity_scroll_behavior_examples ()\n\nTest scroll behavior utilities.\n\n\nExported source\nscroll = SimpleFactory(\n    {\n        \"auto\": \"scroll-auto\",\n        \"smooth\": \"scroll-smooth\"\n    },\n    \"Scroll behavior utilities for controlling smooth scrolling\"\n) # Scroll behavior factory\n\n\n\n\nExported source\ndef test_interactivity_scroll_behavior_examples():\n    \"\"\"Test scroll behavior utilities.\"\"\"\n    assert str(scroll.auto) == \"scroll-auto\"\n    assert str(scroll.smooth) == \"scroll-smooth\"\n\n# Run the tests\ntest_interactivity_scroll_behavior_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#scroll-margin",
    "href": "utilities/interactivity.html#scroll-margin",
    "title": "interactivity",
    "section": "Scroll Margin",
    "text": "Scroll Margin\nUtilities for controlling the scroll offset around items in a snap container:\n\nsource\n\ntest_interactivity_scroll_margin_examples\n\n test_interactivity_scroll_margin_examples ()\n\nTest scroll margin utilities.\n\n\nExported source\nscroll_m = DirectionalScaledFactory(\"scroll-m\", SPACING_CONFIG, \"Scroll margin utilities for controlling scroll offset margins\") # The scroll margin factory\n\n# Additional directional scroll margin utilities for logical properties\nscroll_ms = ScaledFactory(\"scroll-ms\", SPACING_CONFIG, \"Scroll margin inline-start utilities\")  # scroll-margin-inline-start\nscroll_me = ScaledFactory(\"scroll-me\", SPACING_CONFIG, \"Scroll margin inline-end utilities\")  # scroll-margin-inline-end\n\n\n\n\nExported source\ndef test_interactivity_scroll_margin_examples():\n    \"\"\"Test scroll margin utilities.\"\"\"\n    # All sides\n    assert str(scroll_m(4)) == \"scroll-m-4\"\n    assert str(scroll_m(0)) == \"scroll-m-0\"\n    assert str(scroll_m.px) == \"scroll-m-px\"\n    \n    # Directional\n    assert str(scroll_m.t(4)) == \"scroll-mt-4\"\n    assert str(scroll_m.r(4)) == \"scroll-mr-4\"\n    assert str(scroll_m.b(4)) == \"scroll-mb-4\"\n    assert str(scroll_m.l(4)) == \"scroll-ml-4\"\n    assert str(scroll_m.x(8)) == \"scroll-mx-8\"\n    assert str(scroll_m.y(8)) == \"scroll-my-8\"\n    \n    # Negative values\n    assert str(scroll_m.negative(4)) == \"-scroll-m-4\"\n    assert str(scroll_m.t.negative(2)) == \"-scroll-mt-2\"\n    \n    # Logical properties\n    assert str(scroll_ms(4)) == \"scroll-ms-4\"\n    assert str(scroll_me(4)) == \"scroll-me-4\"\n    assert str(scroll_ms.negative(2)) == \"-scroll-ms-2\"\n    \n    # Arbitrary values\n    assert str(scroll_m(\"10px\")) == \"scroll-m-[10px]\"\n    assert str(scroll_m(\"--custom-margin\")) == \"scroll-m-(--custom-margin)\"\n\n# Run the tests\ntest_interactivity_scroll_margin_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#scroll-padding",
    "href": "utilities/interactivity.html#scroll-padding",
    "title": "interactivity",
    "section": "Scroll Padding",
    "text": "Scroll Padding\nUtilities for controlling an element’s scroll offset within a snap container:\n\nsource\n\ntest_interactivity_scroll_padding_examples\n\n test_interactivity_scroll_padding_examples ()\n\nTest scroll padding utilities.\n\n\nExported source\nscroll_p = DirectionalScaledFactory(\"scroll-p\", SPACING_CONFIG, \"Scroll padding utilities for controlling scroll offset padding\") # The scroll padding factory\n\n# Additional directional scroll padding utilities for logical properties\nscroll_ps = ScaledFactory(\"scroll-ps\", SPACING_CONFIG, \"Scroll padding inline-start utilities\")  # scroll-padding-inline-start\nscroll_pe = ScaledFactory(\"scroll-pe\", SPACING_CONFIG, \"Scroll padding inline-end utilities\")  # scroll-padding-inline-end\n\n\n\n\nExported source\ndef test_interactivity_scroll_padding_examples():\n    \"\"\"Test scroll padding utilities.\"\"\"\n    # All sides\n    assert str(scroll_p(4)) == \"scroll-p-4\"\n    assert str(scroll_p(0)) == \"scroll-p-0\"\n    assert str(scroll_p.px) == \"scroll-p-px\"\n    \n    # Directional\n    assert str(scroll_p.t(4)) == \"scroll-pt-4\"\n    assert str(scroll_p.r(4)) == \"scroll-pr-4\"\n    assert str(scroll_p.b(4)) == \"scroll-pb-4\"\n    assert str(scroll_p.l(4)) == \"scroll-pl-4\"\n    assert str(scroll_p.x(8)) == \"scroll-px-8\"\n    assert str(scroll_p.y(8)) == \"scroll-py-8\"\n    \n    # Negative values\n    assert str(scroll_p.negative(4)) == \"-scroll-p-4\"\n    assert str(scroll_p.t.negative(2)) == \"-scroll-pt-2\"\n    \n    # Logical properties\n    assert str(scroll_ps(4)) == \"scroll-ps-4\"\n    assert str(scroll_pe(4)) == \"scroll-pe-4\"\n    assert str(scroll_ps.negative(2)) == \"-scroll-ps-2\"\n    \n    # Arbitrary values\n    assert str(scroll_p(\"10px\")) == \"scroll-p-[10px]\"\n    assert str(scroll_p(\"--custom-padding\")) == \"scroll-p-(--custom-padding)\"\n\n# Run the tests\ntest_interactivity_scroll_padding_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#scroll-snap-utilities",
    "href": "utilities/interactivity.html#scroll-snap-utilities",
    "title": "interactivity",
    "section": "Scroll Snap Utilities",
    "text": "Scroll Snap Utilities\nUtilities for controlling scroll snap behavior:\n\nScroll Snap Align\nControl the scroll snap alignment of an element:\n\n\nExported source\nsnap_align = SimpleFactory(\n    {\n        \"start\": \"snap-start\",\n        \"end\": \"snap-end\",\n        \"center\": \"snap-center\",\n        \"none\": \"snap-align-none\"\n    },\n    \"Scroll snap align utilities for controlling snap position alignment\"\n) # Snap align factory\n\n\n\n\nScroll Snap Stop\nControl whether you can skip past possible snap positions:\n\n\nExported source\nsnap_stop = SimpleFactory(\n    {\n        \"normal\": \"snap-normal\",\n        \"always\": \"snap-always\"\n    },\n    \"Scroll snap stop utilities for controlling snap stop behavior\"\n) # Snap stop factory\n\n\n\n\nScroll Snap Type\nControl how strictly snap points are enforced in a snap container:\n\nsource\n\n\ntest_interactivity_scroll_snap_examples\n\n test_interactivity_scroll_snap_examples ()\n\nTest scroll snap utilities.\n\n\nExported source\nsnap = SimpleFactory(\n    {\n        \"none\": \"snap-none\",\n        \"x\": \"snap-x\",\n        \"y\": \"snap-y\",\n        \"both\": \"snap-both\",\n        \"mandatory\": \"snap-mandatory\",\n        \"proximity\": \"snap-proximity\"\n    },\n    \"Scroll snap type utilities for controlling snap container behavior\"\n) # Snap type factory\n\n\n\n\nExported source\ndef test_interactivity_scroll_snap_examples():\n    \"\"\"Test scroll snap utilities.\"\"\"\n    # Snap align\n    assert str(snap_align.start) == \"snap-start\"\n    assert str(snap_align.end) == \"snap-end\"\n    assert str(snap_align.center) == \"snap-center\"\n    assert str(snap_align.none) == \"snap-align-none\"\n    \n    # Snap stop\n    assert str(snap_stop.normal) == \"snap-normal\"\n    assert str(snap_stop.always) == \"snap-always\"\n    \n    # Snap type\n    assert str(snap.none) == \"snap-none\"\n    assert str(snap.x) == \"snap-x\"\n    assert str(snap.y) == \"snap-y\"\n    assert str(snap.both) == \"snap-both\"\n    assert str(snap.mandatory) == \"snap-mandatory\"\n    assert str(snap.proximity) == \"snap-proximity\"\n\n# Run the tests\ntest_interactivity_scroll_snap_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#touch-action",
    "href": "utilities/interactivity.html#touch-action",
    "title": "interactivity",
    "section": "Touch Action",
    "text": "Touch Action\nUtilities for controlling how an element can be scrolled and zoomed on touchscreens:\n\nsource\n\ntest_interactivity_touch_action_examples\n\n test_interactivity_touch_action_examples ()\n\nTest touch action utilities.\n\n\nExported source\ntouch = SimpleFactory(\n    {\n        \"auto\": \"touch-auto\",\n        \"none\": \"touch-none\",\n        \"pan-x\": \"touch-pan-x\",\n        \"pan-left\": \"touch-pan-left\",\n        \"pan-right\": \"touch-pan-right\",\n        \"pan-y\": \"touch-pan-y\",\n        \"pan-up\": \"touch-pan-up\",\n        \"pan-down\": \"touch-pan-down\",\n        \"pinch-zoom\": \"touch-pinch-zoom\",\n        \"manipulation\": \"touch-manipulation\"\n    },\n    \"Touch action utilities for controlling touch gestures on touch devices\"\n) # Touch action factory\n\n\n\n\nExported source\ndef test_interactivity_touch_action_examples():\n    \"\"\"Test touch action utilities.\"\"\"\n    assert str(touch.auto) == \"touch-auto\"\n    assert str(touch.none) == \"touch-none\"\n    assert str(touch.pan_x) == \"touch-pan-x\"\n    assert str(touch.pan_left) == \"touch-pan-left\"\n    assert str(touch.pan_right) == \"touch-pan-right\"\n    assert str(touch.pan_y) == \"touch-pan-y\"\n    assert str(touch.pan_up) == \"touch-pan-up\"\n    assert str(touch.pan_down) == \"touch-pan-down\"\n    assert str(touch.pinch_zoom) == \"touch-pinch-zoom\"\n    assert str(touch.manipulation) == \"touch-manipulation\"\n\n# Run the tests\ntest_interactivity_touch_action_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#user-select",
    "href": "utilities/interactivity.html#user-select",
    "title": "interactivity",
    "section": "User Select",
    "text": "User Select\nUtilities for controlling whether the user can select text in an element:\n\nsource\n\ntest_interactivity_user_select_examples\n\n test_interactivity_user_select_examples ()\n\nTest user select utilities.\n\n\nExported source\nselect = SimpleFactory(\n    {\n        \"none\": \"select-none\",\n        \"text\": \"select-text\",\n        \"all\": \"select-all\",\n        \"auto\": \"select-auto\"\n    },\n    \"User select utilities for controlling text selection behavior\"\n) # User select factory\n\n\n\n\nExported source\ndef test_interactivity_user_select_examples():\n    \"\"\"Test user select utilities.\"\"\"\n    assert str(select.none) == \"select-none\"\n    assert str(select.text) == \"select-text\"\n    assert str(select.all) == \"select-all\"\n    assert str(select.auto) == \"select-auto\"\n\n# Run the tests\ntest_interactivity_user_select_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#will-change",
    "href": "utilities/interactivity.html#will-change",
    "title": "interactivity",
    "section": "Will Change",
    "text": "Will Change\nUtilities for optimizing upcoming animations of elements that are expected to change:\n\nsource\n\nWillChangeFactory\n\n WillChangeFactory (values_dict:Optional[Dict[str,str]]=None,\n                    doc:Optional[str]=None)\n\nFactory for will-change utilities with arbitrary value support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\nsource\n\n\ntest_interactivity_will_change_examples\n\n test_interactivity_will_change_examples ()\n\nTest will-change utilities.\n\n\nExported source\nwill_change = WillChangeFactory(\n    {\n        \"auto\": \"will-change-auto\",\n        \"scroll\": \"will-change-scroll\",\n        \"contents\": \"will-change-contents\",\n        \"transform\": \"will-change-transform\"\n    },\n    \"Will-change utilities for optimizing animations by hinting browsers about expected changes\"\n) # Will-change factory\n\n\n\n\nExported source\ndef test_interactivity_will_change_examples():\n    \"\"\"Test will-change utilities.\"\"\"\n    # Standard values\n    assert str(will_change.auto) == \"will-change-auto\"\n    assert str(will_change.scroll) == \"will-change-scroll\"\n    assert str(will_change.contents) == \"will-change-contents\"\n    assert str(will_change.transform) == \"will-change-transform\"\n    \n    # Custom properties and arbitrary values\n    assert will_change(\"--custom-property\") == \"will-change---custom-property\"\n    assert will_change(\"opacity, transform\") == \"will-change-[opacity, transform]\"\n    assert will_change(\"left, top\") == \"will-change-[left, top]\"\n\n# Run the tests\ntest_interactivity_will_change_examples()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#practical-examples",
    "href": "utilities/interactivity.html#practical-examples",
    "title": "interactivity",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these interactivity utilities in real FastHTML components:\n\nsource\n\ntest_interactivity_form_fasthtml_examples\n\n test_interactivity_form_fasthtml_examples ()\n\nTest interactivity utilities in form components.\n\n\nExported source\ndef test_interactivity_form_fasthtml_examples():\n    \"\"\"Test interactivity utilities in form components.\"\"\"\n    from fasthtml.common import Input, Textarea, Button, Div, Label\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.borders import border, rounded\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Custom styled checkbox with accent color\n    checkbox = Input(\n        type=\"checkbox\",\n        cls=combine_classes(\n            accent.blue._500,\n            cursor.pointer,\n            w(4),\n            h(4)\n        )\n    )\n    assert \"accent-blue-500\" in checkbox.attrs['class']\n    assert \"cursor-pointer\" in checkbox.attrs['class']\n    \n    # Text input with custom caret color\n    text_input = Input(\n        type=\"text\",\n        placeholder=\"Type here...\",\n        cls=combine_classes(\n            caret.red._500,\n            appearance.none,\n            p.x(4),\n            p.y(2),\n            border(),\n            rounded.full\n        )\n    )\n    assert \"caret-red-500\" in text_input.attrs['class']\n    assert \"appearance-none\" in text_input.attrs['class']\n    \n    # Resizable textarea\n    textarea = Textarea(\n        placeholder=\"Enter your message...\",\n        cls=combine_classes(\n            resize.y,\n            field_sizing.content,\n            p(3),\n            border(),\n            rounded.full\n        )\n    )\n    assert \"resize-y\" in textarea.attrs['class']\n    assert \"field-sizing-content\" in textarea.attrs['class']\n    \n    # Interactive button with hover states\n    button = Button(\n        \"Click me\",\n        cls=combine_classes(\n            cursor.pointer,\n            select.none,\n            pointer_events.auto,\n            bg.blue._500,\n            text_color.white,\n            p.x(4),\n            p.y(2),\n            rounded.full,\n            bg.blue._600.hover\n        )\n    )\n    assert \"cursor-pointer\" in button.attrs['class']\n    assert \"select-none\" in button.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        checkbox,\n        text_input,\n        textarea,\n        button,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_interactivity_form_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;input type=\"checkbox\" class=\"accent-blue-500 cursor-pointer w-4 h-4\"&gt;\n  &lt;input type=\"text\" placeholder=\"Type here...\" class=\"caret-red-500 appearance-none px-4 py-2 border rounded-full\"&gt;\n&lt;textarea placeholder=\"Enter your message...\" class=\"resize-y field-sizing-content p-3 border rounded-full\"&gt;&lt;/textarea&gt;&lt;button class=\"cursor-pointer select-none pointer-events-auto bg-blue-500 text-white px-4 py-2 rounded-full hover:bg-blue-600\"&gt;Click me&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_interactivity_form_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_interactivity_scroll_snap_fasthtml_examples\n\n test_interactivity_scroll_snap_fasthtml_examples ()\n\nTest scroll snap utilities in carousel/gallery components.\n\n\nExported source\ndef test_interactivity_scroll_snap_fasthtml_examples():\n    \"\"\"Test scroll snap utilities in carousel/gallery components.\"\"\"\n    from fasthtml.common import Div, Img\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw, overflow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, shrink, grid_display, flex_display\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    \n    # Horizontal scroll snap container\n    carousel_container = Div(\n        cls=combine_classes(\n            snap.x,\n            snap.mandatory,\n            scroll.smooth,\n            scroll_p.x(4),\n            flex_display,\n            overflow.x.auto,\n            gap(4)\n        )\n    )\n    assert \"snap-x\" in carousel_container.attrs['class']\n    assert \"snap-mandatory\" in carousel_container.attrs['class']\n    assert \"scroll-smooth\" in carousel_container.attrs['class']\n    assert \"scroll-px-4\" in carousel_container.attrs['class']\n    \n    # Snap items within the container\n    snap_item = Div(\n        Img(src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\", alt=\"Gallery image\"),\n        cls=combine_classes(\n            snap_align.center,\n            snap_stop.always,\n            shrink._0,\n            w(80)\n        )\n    )\n    assert \"snap-center\" in snap_item.attrs['class']\n    assert \"snap-always\" in snap_item.attrs['class']\n    \n    # Vertical scroll snap for sections\n    vertical_snap = Div(\n        cls=combine_classes(\n            snap.y,\n            snap.proximity,\n            scroll_m.y(2),\n            h.screen,\n            overflow.y.auto\n        )\n    )\n    assert \"snap-y\" in vertical_snap.attrs['class']\n    assert \"snap-proximity\" in vertical_snap.attrs['class']\n    assert \"scroll-my-2\" in vertical_snap.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        carousel_container,\n        snap_item,\n        vertical_snap,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_interactivity_scroll_snap_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"snap-x snap-mandatory scroll-smooth scroll-px-4 flex overflow-x-auto gap-4\"&gt;&lt;/div&gt;\n  &lt;div class=\"snap-center snap-always shrink-0 w-80\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" alt=\"Gallery image\"&gt;  &lt;/div&gt;\n  &lt;div class=\"snap-y snap-proximity scroll-my-2 h-screen overflow-y-auto\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_interactivity_scroll_snap_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_interactivity_touch_mobile_fasthtml_examples\n\n test_interactivity_touch_mobile_fasthtml_examples ()\n\nTest touch and mobile interaction utilities.\n\n\nExported source\ndef test_interactivity_touch_mobile_fasthtml_examples():\n    \"\"\"Test touch and mobile interaction utilities.\"\"\"\n    from fasthtml.common import Div, Img, Code\n    from cjm_fasthtml_tailwind.utilities.layout import position, overflow, display_tw\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.transitions_and_animation import transition\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Touch-enabled image viewer\n    image_viewer = Div(\n        Img(src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\", alt=\"Photo\"),\n        cls=combine_classes(\n            touch.pinch_zoom,\n            cursor.zoom_in,\n            select.none,\n            position.relative,\n            overflow.hidden\n        )\n    )\n    assert \"touch-pinch-zoom\" in image_viewer.attrs['class']\n    assert \"cursor-zoom-in\" in image_viewer.attrs['class']\n    \n    # Draggable element\n    draggable = Div(\n        \"Drag me\",\n        cls=combine_classes(\n            cursor.grab,\n            cursor.grabbing.active,\n            touch.none,\n            select.none,\n            p(4),\n            bg.gray._200,\n            rounded.full\n        )\n    )\n    assert \"cursor-grab\" in draggable.attrs['class']\n    assert \"touch-none\" in draggable.attrs['class']\n    \n    # Code block with selection\n    code_block = Code(\n        \"console.log('Hello World');\",\n        cls=combine_classes(\n            select.all,\n            cursor.text,\n            display_tw.block,\n            p(3),\n            bg.gray._900,\n            text_color.gray._100,\n            rounded.full\n        )\n    )\n    assert \"select-all\" in code_block.attrs['class']\n    assert \"cursor-text\" in code_block.attrs['class']\n    \n    # Touch-friendly swipe area\n    swipe_area = Div(\n        cls=combine_classes(\n            touch.pan_x,\n            will_change.transform,\n            transition.transform\n        )\n    )\n    assert \"touch-pan-x\" in swipe_area.attrs['class']\n    assert \"will-change-transform\" in swipe_area.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        image_viewer,\n        draggable,\n        code_block,\n        swipe_area,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_interactivity_touch_mobile_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"touch-pinch-zoom cursor-zoom-in select-none relative overflow-hidden\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" alt=\"Photo\"&gt;  &lt;/div&gt;\n  &lt;div class=\"cursor-grab active:cursor-grabbing touch-none select-none p-4 bg-gray-200 rounded-full\"&gt;Drag me&lt;/div&gt;\n&lt;code class=\"select-all cursor-text block p-3 bg-gray-900 text-gray-100 rounded-full\"&gt;console.log('Hello World');&lt;/code&gt;  &lt;div class=\"touch-pan-x will-change-transform transition-transform\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_interactivity_touch_mobile_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/interactivity.html#advanced-examples",
    "href": "utilities/interactivity.html#advanced-examples",
    "title": "interactivity",
    "section": "Advanced Examples",
    "text": "Advanced Examples\nSome advanced use cases demonstrating how these utilities work together:\n\nsource\n\ntest_interactivity_advanced_fasthtml_examples\n\n test_interactivity_advanced_fasthtml_examples ()\n\nTest advanced combinations of interactivity utilities.\n\n\nExported source\ndef test_interactivity_advanced_fasthtml_examples():\n    \"\"\"Test advanced combinations of interactivity utilities.\"\"\"\n    from fasthtml.common import Div, Input, Form, Pre\n    from cjm_fasthtml_tailwind.utilities.spacing import p, m\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.layout import position, overflow\n    from cjm_fasthtml_tailwind.utilities.transforms import scale_tw, transform\n    from cjm_fasthtml_tailwind.utilities.transitions_and_animation import transition, duration\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Dark mode form with custom styling\n    dark_form = Form(\n        Input(\n            type=\"checkbox\",\n            cls=combine_classes(\n                accent.purple._500,\n                scheme.dark,\n                cursor.pointer,\n                m.r(2)\n            )\n        ),\n        Input(\n            type=\"text\",\n            cls=combine_classes(\n                caret.purple._400,\n                appearance.none,\n                scheme.dark,\n                bg.gray._800,\n                text_color.white,\n                p.x(3),\n                p.y(2),\n                rounded.full\n            )\n        ),\n        cls=combine_classes(\n            scheme.dark,\n            p(6),\n            bg.gray._900,\n            rounded.lg\n        )\n    )\n    assert \"scheme-dark\" in dark_form.attrs['class']\n    assert \"accent-purple-500\" in dark_form.children[0].attrs['class']\n    assert \"caret-purple-400\" in dark_form.children[1].attrs['class']\n    \n    # Interactive code editor mockup\n    code_editor = Div(\n        Pre(\n            \"def hello():\\n    print('Hello, World!')\",\n            cls=combine_classes(\n                select.text,\n                cursor.text,\n                caret.green._400,\n                resize.both,\n                scroll.auto,\n                scroll_p(4),\n                font_family.mono,\n                bg.gray._900,\n                text_color.gray._100,\n                p(4),\n                rounded.full,\n                overflow.auto\n            )\n        ),\n        cls=combine_classes(\n            pointer_events.auto,\n            position.relative\n        )\n    )\n    assert \"select-text\" in code_editor.children[0].attrs['class']\n    assert \"cursor-text\" in code_editor.children[0].attrs['class']\n    assert \"resize\" in code_editor.children[0].attrs['class']\n    assert \"scroll-p-4\" in code_editor.children[0].attrs['class']\n    \n    # Complex interactive element with animation hints\n    animated_card = Div(\n        \"Animated Card\",\n        cls=combine_classes(\n            cursor.pointer,\n            will_change(\"transform, opacity\"),\n            touch.manipulation,\n            select.none,\n            transition.all,\n            duration._300,\n            scale_tw(105).hover\n        )\n    )\n    assert \"cursor-pointer\" in animated_card.attrs['class']\n    assert \"will-change-[transform, opacity]\" in animated_card.attrs['class']\n    assert \"touch-manipulation\" in animated_card.attrs['class']\n\n    # Return all examples in a grid layout\n    return Div(\n        dark_form,\n        code_editor,\n        animated_card,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_interactivity_advanced_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n&lt;form enctype=\"multipart/form-data\" class=\"scheme-dark p-6 bg-gray-900 rounded-lg\"&gt;    &lt;input type=\"checkbox\" class=\"accent-purple-500 scheme-dark cursor-pointer mr-2\"&gt;\n    &lt;input type=\"text\" class=\"caret-purple-400 appearance-none scheme-dark bg-gray-800 text-white px-3 py-2 rounded-full\"&gt;\n&lt;/form&gt;  &lt;div class=\"pointer-events-auto relative\"&gt;\n&lt;pre class=\"select-text cursor-text caret-green-400 resize scroll-auto scroll-p-4 font-mono bg-gray-900 text-gray-100 p-4 rounded-full overflow-auto\"&gt;def hello():\n    print('Hello, World!')&lt;/pre&gt;  &lt;/div&gt;\n  &lt;div class=\"cursor-pointer will-change-[transform, opacity] touch-manipulation select-none transition-all duration-300 hover:scale-105\"&gt;Animated Card&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_interactivity_advanced_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "interactivity"
    ]
  },
  {
    "objectID": "utilities/borders.html",
    "href": "utilities/borders.html",
    "title": "borders",
    "section": "",
    "text": "Control the border radius of elements using the rounded utilities:\n\n\nDefine the named scales for border radius:\n\n\nExported source\nRADIUS_SCALES = [ # Border radius named scales\n    NamedScale(\"xs\", \"--radius-xs\", \"0.125rem (2px)\"),\n    NamedScale(\"sm\", \"--radius-sm\", \"0.25rem (4px)\"),\n    NamedScale(\"md\", \"--radius-md\", \"0.375rem (6px)\"),\n    NamedScale(\"lg\", \"--radius-lg\", \"0.5rem (8px)\"),\n    NamedScale(\"xl\", \"--radius-xl\", \"0.75rem (12px)\"),\n    NamedScale(\"2xl\", \"--radius-2xl\", \"1rem (16px)\"),\n    NamedScale(\"3xl\", \"--radius-3xl\", \"1.5rem (24px)\"),\n    NamedScale(\"4xl\", \"--radius-4xl\", \"2rem (32px)\")\n]\n\nRADIUS_CONFIG = ScaleConfig( # Border radius configuration\n    numeric=False,  # No numeric scales for radius\n    decimals=False,\n    fractions=False,\n    named=RADIUS_SCALES,\n    special={\n        \"none\": \"none\",\n        \"full\": \"full\"\n    },\n    negative=False\n)\n\n\n\n\n\nCreate the border radius factory with support for all directional and corner variants:\n\nsource\n\n\n\n\n RoundedFactory (doc:Optional[str]=None)\n\nFactory for creating border radius utilities with all variants.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Create the main rounded factory\nrounded = RoundedFactory(\"Border radius utilities for controlling the roundness of element corners\")\n\n\n\n\n\n\nsource\n\n\n\n\n test_borders_radius_examples ()\n\nTest border radius utilities with all variants.\n\n\nExported source\ndef test_borders_radius_examples():\n    \"\"\"Test border radius utilities with all variants.\"\"\"\n    # Test all corners\n    assert str(rounded()) == \"rounded\"\n    assert str(rounded.xs) == \"rounded-xs\"\n    assert str(rounded.sm) == \"rounded-sm\"\n    assert str(rounded.md) == \"rounded-md\"\n    assert str(rounded.lg) == \"rounded-lg\"\n    assert str(rounded.xl) == \"rounded-xl\"\n    assert str(rounded._2xl) == \"rounded-2xl\"\n    assert str(rounded._3xl) == \"rounded-3xl\"\n    assert str(rounded._4xl) == \"rounded-4xl\"\n    assert str(rounded.none) == \"rounded-none\"\n    assert str(rounded.full) == \"rounded-full\"\n    \n    # Test with function call\n    assert str(rounded(\"md\")) == \"rounded-md\"\n    assert str(rounded(\"10px\")) == \"rounded-[10px]\"\n    assert str(rounded(\"--custom-radius\")) == \"rounded-(--custom-radius)\"\n    \n    # Test directional variants\n    assert str(rounded.t.lg) == \"rounded-t-lg\"\n    assert str(rounded.r.xl) == \"rounded-r-xl\"\n    assert str(rounded.b.sm) == \"rounded-b-sm\"\n    assert str(rounded.l.md) == \"rounded-l-md\"\n    \n    # Test logical directional variants\n    assert str(rounded.s.lg) == \"rounded-s-lg\"\n    assert str(rounded.e.xl) == \"rounded-e-xl\"\n    \n    # Test corner variants\n    assert str(rounded.tl.lg) == \"rounded-tl-lg\"\n    assert str(rounded.tr.md) == \"rounded-tr-md\"\n    assert str(rounded.br.sm) == \"rounded-br-sm\"\n    assert str(rounded.bl.xl) == \"rounded-bl-xl\"\n    \n    # Test logical corner variants\n    assert str(rounded.ss.lg) == \"rounded-ss-lg\"\n    assert str(rounded.se.md) == \"rounded-se-md\"\n    assert str(rounded.ee.sm) == \"rounded-ee-sm\"\n    assert str(rounded.es.xl) == \"rounded-es-xl\"\n    \n    # Test special values\n    assert str(rounded.t.none) == \"rounded-t-none\"\n    assert str(rounded.br.full) == \"rounded-br-full\"\n    \n    # Test arbitrary values\n    assert str(rounded.tl(\"1.5rem\")) == \"rounded-tl-[1.5rem]\"\n    assert str(rounded.b(\"calc(0.5rem + 2px)\")) == \"rounded-b-[calc(0.5rem + 2px)]\"\n\n# Run the tests\ntest_borders_radius_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#border-radius",
    "href": "utilities/borders.html#border-radius",
    "title": "borders",
    "section": "",
    "text": "Control the border radius of elements using the rounded utilities:\n\n\nDefine the named scales for border radius:\n\n\nExported source\nRADIUS_SCALES = [ # Border radius named scales\n    NamedScale(\"xs\", \"--radius-xs\", \"0.125rem (2px)\"),\n    NamedScale(\"sm\", \"--radius-sm\", \"0.25rem (4px)\"),\n    NamedScale(\"md\", \"--radius-md\", \"0.375rem (6px)\"),\n    NamedScale(\"lg\", \"--radius-lg\", \"0.5rem (8px)\"),\n    NamedScale(\"xl\", \"--radius-xl\", \"0.75rem (12px)\"),\n    NamedScale(\"2xl\", \"--radius-2xl\", \"1rem (16px)\"),\n    NamedScale(\"3xl\", \"--radius-3xl\", \"1.5rem (24px)\"),\n    NamedScale(\"4xl\", \"--radius-4xl\", \"2rem (32px)\")\n]\n\nRADIUS_CONFIG = ScaleConfig( # Border radius configuration\n    numeric=False,  # No numeric scales for radius\n    decimals=False,\n    fractions=False,\n    named=RADIUS_SCALES,\n    special={\n        \"none\": \"none\",\n        \"full\": \"full\"\n    },\n    negative=False\n)\n\n\n\n\n\nCreate the border radius factory with support for all directional and corner variants:\n\nsource\n\n\n\n\n RoundedFactory (doc:Optional[str]=None)\n\nFactory for creating border radius utilities with all variants.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Create the main rounded factory\nrounded = RoundedFactory(\"Border radius utilities for controlling the roundness of element corners\")\n\n\n\n\n\n\nsource\n\n\n\n\n test_borders_radius_examples ()\n\nTest border radius utilities with all variants.\n\n\nExported source\ndef test_borders_radius_examples():\n    \"\"\"Test border radius utilities with all variants.\"\"\"\n    # Test all corners\n    assert str(rounded()) == \"rounded\"\n    assert str(rounded.xs) == \"rounded-xs\"\n    assert str(rounded.sm) == \"rounded-sm\"\n    assert str(rounded.md) == \"rounded-md\"\n    assert str(rounded.lg) == \"rounded-lg\"\n    assert str(rounded.xl) == \"rounded-xl\"\n    assert str(rounded._2xl) == \"rounded-2xl\"\n    assert str(rounded._3xl) == \"rounded-3xl\"\n    assert str(rounded._4xl) == \"rounded-4xl\"\n    assert str(rounded.none) == \"rounded-none\"\n    assert str(rounded.full) == \"rounded-full\"\n    \n    # Test with function call\n    assert str(rounded(\"md\")) == \"rounded-md\"\n    assert str(rounded(\"10px\")) == \"rounded-[10px]\"\n    assert str(rounded(\"--custom-radius\")) == \"rounded-(--custom-radius)\"\n    \n    # Test directional variants\n    assert str(rounded.t.lg) == \"rounded-t-lg\"\n    assert str(rounded.r.xl) == \"rounded-r-xl\"\n    assert str(rounded.b.sm) == \"rounded-b-sm\"\n    assert str(rounded.l.md) == \"rounded-l-md\"\n    \n    # Test logical directional variants\n    assert str(rounded.s.lg) == \"rounded-s-lg\"\n    assert str(rounded.e.xl) == \"rounded-e-xl\"\n    \n    # Test corner variants\n    assert str(rounded.tl.lg) == \"rounded-tl-lg\"\n    assert str(rounded.tr.md) == \"rounded-tr-md\"\n    assert str(rounded.br.sm) == \"rounded-br-sm\"\n    assert str(rounded.bl.xl) == \"rounded-bl-xl\"\n    \n    # Test logical corner variants\n    assert str(rounded.ss.lg) == \"rounded-ss-lg\"\n    assert str(rounded.se.md) == \"rounded-se-md\"\n    assert str(rounded.ee.sm) == \"rounded-ee-sm\"\n    assert str(rounded.es.xl) == \"rounded-es-xl\"\n    \n    # Test special values\n    assert str(rounded.t.none) == \"rounded-t-none\"\n    assert str(rounded.br.full) == \"rounded-br-full\"\n    \n    # Test arbitrary values\n    assert str(rounded.tl(\"1.5rem\")) == \"rounded-tl-[1.5rem]\"\n    assert str(rounded.b(\"calc(0.5rem + 2px)\")) == \"rounded-b-[calc(0.5rem + 2px)]\"\n\n# Run the tests\ntest_borders_radius_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#border-width",
    "href": "utilities/borders.html#border-width",
    "title": "borders",
    "section": "Border Width",
    "text": "Border Width\nControl the width of element borders using the border utilities:\n\nBorder Width Configuration\n\n\nBorder Width Utility\nA specialized utility for border width that handles the default value (1px when no value is specified):\n\nsource\n\n\nBorderWidthUtility\n\n BorderWidthUtility (prefix:str, config:cjm_fasthtml_tailwind.builders.sca\n                     les.ScaleConfig=ScaleConfig(numeric=True,\n                     decimals=False, fractions=False, named=None,\n                     special={}, negative=False), has_default:bool=True)\n\nUtility class for border width with default value support.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nThe utility prefix (e.g., ‘border’, ‘border-t’)\n\n\nconfig\nScaleConfig\nScaleConfig(numeric=True, decimals=False, fractions=False, named=None, special={}, negative=False)\nConfiguration for valid values\n\n\nhas_default\nbool\nTrue\nWhether this utility has a default value (1px)\n\n\n\n\n\nBorder Width Factory\nCreate the border width factory with directional support:\n\nsource\n\n\nBorderDirectionalFactory\n\n BorderDirectionalFactory (prefix:str, doc:str)\n\nFactory for directional border width utilities.\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix (e.g., ‘border-t’)\n\n\ndoc\nstr\nDocumentation\n\n\n\n\nsource\n\n\nBorderWidthFactory\n\n BorderWidthFactory (doc:Optional[str]=None)\n\nFactory for creating border width utilities with directional variants.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Create the main border width factory\nborder = BorderWidthFactory(\"Border width utilities for controlling the width of element borders\")\n\n\n\n\nTest Border Width Utilities\n\nsource\n\n\ntest_borders_width_examples\n\n test_borders_width_examples ()\n\nTest border width utilities with all variants.\n\n\nExported source\ndef test_borders_width_examples():\n    \"\"\"Test border width utilities with all variants.\"\"\"\n    # Test default border (1px)\n    assert str(border()) == \"border\"\n    assert str(border.t()) == \"border-t\"\n    assert str(border.r()) == \"border-r\"\n    assert str(border.b()) == \"border-b\"\n    assert str(border.l()) == \"border-l\"\n    assert str(border.x()) == \"border-x\"\n    assert str(border.y()) == \"border-y\"\n    assert str(border.s()) == \"border-s\"\n    assert str(border.e()) == \"border-e\"\n    \n    # Test numeric values\n    assert str(border._0) == \"border-0\"\n    assert str(border._2) == \"border-2\"\n    assert str(border._4) == \"border-4\"\n    assert str(border._8) == \"border-8\"\n    \n    # Test directional with numeric values\n    assert str(border.t._0) == \"border-t-0\"\n    assert str(border.r._2) == \"border-r-2\"\n    assert str(border.b._4) == \"border-b-4\"\n    assert str(border.l._8) == \"border-l-8\"\n    \n    # Test logical directions\n    assert str(border.x._2) == \"border-x-2\"\n    assert str(border.y._4) == \"border-y-4\"\n    assert str(border.s._2) == \"border-s-2\"\n    assert str(border.e._4) == \"border-e-4\"\n    \n    # Test with function call\n    assert str(border(2)) == \"border-2\"\n    assert str(border.t(4)) == \"border-t-4\"\n    assert str(border.x(0)) == \"border-x-0\"\n    \n    # Test arbitrary values\n    assert str(border(\"3px\")) == \"border-[3px]\"\n    assert str(border.t(\"0.5rem\")) == \"border-t-[0.5rem]\"\n    # assert str(border.x(\"thin\")) == \"border-x-[thin]\"\n    \n    # Test custom properties\n    assert str(border(\"--border-width\")) == \"border-(--border-width)\"\n    assert str(border.y(\"--custom-width\")) == \"border-y-(--custom-width)\"\n\n# Run the tests\ntest_borders_width_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#divide-utilities",
    "href": "utilities/borders.html#divide-utilities",
    "title": "borders",
    "section": "Divide Utilities",
    "text": "Divide Utilities\nAdd borders between child elements using the divide utilities:\n\nDivide Width Factory\n\nsource\n\n\nDivideFactory\n\n DivideFactory ()\n\nFactory for creating divide utilities that add borders between children.\n\n\nExported source\n# Create the divide factory\ndivide = DivideFactory()\n\n\n\n\nTest Divide Utilities\n\nsource\n\n\ntest_borders_divide_examples\n\n test_borders_divide_examples ()\n\nTest divide utilities for adding borders between children.\n\n\nExported source\ndef test_borders_divide_examples():\n    \"\"\"Test divide utilities for adding borders between children.\"\"\"\n    # Test default divide (1px)\n    assert str(divide.x()) == \"divide-x\"\n    assert str(divide.y()) == \"divide-y\"\n    \n    # Test numeric values\n    assert str(divide.x._0) == \"divide-x-0\"\n    assert str(divide.x._2) == \"divide-x-2\"\n    assert str(divide.x._4) == \"divide-x-4\"\n    assert str(divide.x._8) == \"divide-x-8\"\n    \n    assert str(divide.y._0) == \"divide-y-0\"\n    assert str(divide.y._2) == \"divide-y-2\"\n    assert str(divide.y._4) == \"divide-y-4\"\n    assert str(divide.y._8) == \"divide-y-8\"\n    \n    # Test with function call\n    assert str(divide.x(2)) == \"divide-x-2\"\n    assert str(divide.y(4)) == \"divide-y-4\"\n    \n    # Test arbitrary values\n    assert str(divide.x(\"3px\")) == \"divide-x-[3px]\"\n    assert str(divide.y(\"0.5rem\")) == \"divide-y-[0.5rem]\"\n    \n    # Test custom properties\n    assert str(divide.x(\"--divide-width\")) == \"divide-x-(--divide-width)\"\n    assert str(divide.y(\"--custom-divide\")) == \"divide-y-(--custom-divide)\"\n    \n    # Test reverse utilities\n    assert str(divide.x_reverse) == \"divide-x-reverse\"\n    assert str(divide.y_reverse) == \"divide-y-reverse\"\n\n# Run the tests\ntest_borders_divide_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#border-color",
    "href": "utilities/borders.html#border-color",
    "title": "borders",
    "section": "Border Color",
    "text": "Border Color\nControl the color of element borders using the border color utilities:\n\nBorder Color Factory\nCreate a comprehensive border color factory with directional support:\n\nsource\n\n\nBorderColorFactory\n\n BorderColorFactory (doc:Optional[str]=None)\n\nFactory for creating border color utilities with directional variants.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Create the main border color factory\nborder_color = BorderColorFactory(\"Border color utilities for controlling the color of element borders\")\n\n\n\n\nTest Border Color Utilities\n\nsource\n\n\ntest_borders_color_examples\n\n test_borders_color_examples ()\n\nTest border color utilities with all variants.\n\n\nExported source\ndef test_borders_color_examples():\n    \"\"\"Test border color utilities with all variants.\"\"\"\n    # Test basic colors for all sides\n    assert str(border_color.red._500) == \"border-red-500\"\n    assert str(border_color.blue._300) == \"border-blue-300\"\n    assert str(border_color.green._950) == \"border-green-950\"\n    \n    # Test all 22 color families\n    assert str(border_color.orange._500) == \"border-orange-500\"\n    assert str(border_color.amber._500) == \"border-amber-500\"\n    assert str(border_color.yellow._500) == \"border-yellow-500\"\n    assert str(border_color.lime._500) == \"border-lime-500\"\n    assert str(border_color.emerald._500) == \"border-emerald-500\"\n    assert str(border_color.teal._500) == \"border-teal-500\"\n    assert str(border_color.cyan._500) == \"border-cyan-500\"\n    assert str(border_color.sky._500) == \"border-sky-500\"\n    assert str(border_color.indigo._500) == \"border-indigo-500\"\n    assert str(border_color.violet._500) == \"border-violet-500\"\n    assert str(border_color.purple._500) == \"border-purple-500\"\n    assert str(border_color.fuchsia._500) == \"border-fuchsia-500\"\n    assert str(border_color.pink._500) == \"border-pink-500\"\n    assert str(border_color.rose._500) == \"border-rose-500\"\n    assert str(border_color.slate._500) == \"border-slate-500\"\n    assert str(border_color.gray._500) == \"border-gray-500\"\n    assert str(border_color.zinc._500) == \"border-zinc-500\"\n    assert str(border_color.neutral._500) == \"border-neutral-500\"\n    assert str(border_color.stone._500) == \"border-stone-500\"\n    \n    # Test special colors\n    assert str(border_color.inherit) == \"border-inherit\"\n    assert str(border_color.current) == \"border-current\"\n    assert str(border_color.transparent) == \"border-transparent\"\n    assert str(border_color.black) == \"border-black\"\n    assert str(border_color.white) == \"border-white\"\n    \n    # Test with opacity\n    assert str(border_color.red._500.opacity(50)) == \"border-red-500/50\"\n    assert str(border_color.blue._300.opacity(75)) == \"border-blue-300/75\"\n    assert str(border_color.black.opacity(10)) == \"border-black/10\"\n    \n    # Test directional variants\n    assert str(border_color.t.red._500) == \"border-t-red-500\"\n    assert str(border_color.r.blue._300) == \"border-r-blue-300\"\n    assert str(border_color.b.green._600) == \"border-b-green-600\"\n    assert str(border_color.l.purple._400) == \"border-l-purple-400\"\n    \n    # Test logical directional variants\n    assert str(border_color.x.gray._200) == \"border-x-gray-200\"\n    assert str(border_color.y.zinc._700) == \"border-y-zinc-700\"\n    assert str(border_color.s.indigo._500) == \"border-s-indigo-500\"\n    assert str(border_color.e.rose._300) == \"border-e-rose-300\"\n    \n    # Test directional with special colors\n    assert str(border_color.t.transparent) == \"border-t-transparent\"\n    assert str(border_color.x.black) == \"border-x-black\"\n    assert str(border_color.y.current) == \"border-y-current\"\n    \n    # Test with function call\n    assert str(border_color(\"red-500\")) == \"border-red-500\"\n    assert str(border_color(\"blue-300\", opacity=50)) == \"border-blue-300/50\"\n    \n    # Test arbitrary values\n    assert str(border_color(\"#ff0000\")) == \"border-[#ff0000]\"\n    assert str(border_color(\"rgb(255, 0, 0)\")) == \"border-[rgb(255, 0, 0)]\"\n    assert str(border_color.t(\"#00ff00\")) == \"border-t-[#00ff00]\"\n    \n    # Test custom properties\n    assert str(border_color(\"--custom-border\")) == \"border-(--custom-border)\"\n    assert str(border_color.x(\"--theme-border\")) == \"border-x-(--theme-border)\"\n\n# Run the tests\ntest_borders_color_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#divide-color",
    "href": "utilities/borders.html#divide-color",
    "title": "borders",
    "section": "Divide Color",
    "text": "Divide Color\nControl the color of borders between child elements using the divide color utilities:\n\nDivide Color Factory\n\n\nExported source\n# Create the divide color factory using ColoredFactory\ndivide_color = ColoredFactory(\"divide\", \"Divide color utilities for controlling the color of borders between child elements\")\n\n\n\n\nTest Divide Color Utilities\n\nsource\n\n\ntest_borders_divide_color_examples\n\n test_borders_divide_color_examples ()\n\nTest divide color utilities for borders between children.\n\n\nExported source\ndef test_borders_divide_color_examples():\n    \"\"\"Test divide color utilities for borders between children.\"\"\"\n    # Test basic colors\n    assert str(divide_color.red._500) == \"divide-red-500\"\n    assert str(divide_color.blue._300) == \"divide-blue-300\"\n    assert str(divide_color.green._950) == \"divide-green-950\"\n    \n    # Test all 22 color families\n    assert str(divide_color.orange._500) == \"divide-orange-500\"\n    assert str(divide_color.amber._500) == \"divide-amber-500\"\n    assert str(divide_color.yellow._500) == \"divide-yellow-500\"\n    assert str(divide_color.lime._500) == \"divide-lime-500\"\n    assert str(divide_color.emerald._500) == \"divide-emerald-500\"\n    assert str(divide_color.teal._500) == \"divide-teal-500\"\n    assert str(divide_color.cyan._500) == \"divide-cyan-500\"\n    assert str(divide_color.sky._500) == \"divide-sky-500\"\n    assert str(divide_color.indigo._500) == \"divide-indigo-500\"\n    assert str(divide_color.violet._500) == \"divide-violet-500\"\n    assert str(divide_color.purple._500) == \"divide-purple-500\"\n    assert str(divide_color.fuchsia._500) == \"divide-fuchsia-500\"\n    assert str(divide_color.pink._500) == \"divide-pink-500\"\n    assert str(divide_color.rose._500) == \"divide-rose-500\"\n    assert str(divide_color.slate._500) == \"divide-slate-500\"\n    assert str(divide_color.gray._500) == \"divide-gray-500\"\n    assert str(divide_color.zinc._500) == \"divide-zinc-500\"\n    assert str(divide_color.neutral._500) == \"divide-neutral-500\"\n    assert str(divide_color.stone._500) == \"divide-stone-500\"\n    \n    # Test special colors\n    assert str(divide_color.inherit) == \"divide-inherit\"\n    assert str(divide_color.current) == \"divide-current\"\n    assert str(divide_color.transparent) == \"divide-transparent\"\n    assert str(divide_color.black) == \"divide-black\"\n    assert str(divide_color.white) == \"divide-white\"\n    \n    # Test with opacity\n    assert str(divide_color.red._500.opacity(50)) == \"divide-red-500/50\"\n    assert str(divide_color.blue._300.opacity(75)) == \"divide-blue-300/75\"\n    assert str(divide_color.black.opacity(10)) == \"divide-black/10\"\n    \n    # Test with function call\n    assert str(divide_color(\"red-500\")) == \"divide-red-500\"\n    assert str(divide_color(\"blue-300\", opacity=50)) == \"divide-blue-300/50\"\n    \n    # Test arbitrary values\n    assert str(divide_color(\"#ff0000\")) == \"divide-[#ff0000]\"\n    assert str(divide_color(\"rgb(255, 0, 0)\")) == \"divide-[rgb(255, 0, 0)]\"\n    \n    # Test custom properties\n    assert str(divide_color(\"--custom-divide\")) == \"divide-(--custom-divide)\"\n    assert str(divide_color(\"--theme-divide\")) == \"divide-(--theme-divide)\"\n\n# Run the tests\ntest_borders_divide_color_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#border-style",
    "href": "utilities/borders.html#border-style",
    "title": "borders",
    "section": "Border Style",
    "text": "Border Style\nControl the style of element borders using the border style utilities:\n\nBorder Style Factory\n\n\nExported source\n# Create border style factory\nborder_style = SimpleFactory(\n    {\n        \"solid\": \"border-solid\",\n        \"dashed\": \"border-dashed\", \n        \"dotted\": \"border-dotted\",\n        \"double\": \"border-double\",\n        \"hidden\": \"border-hidden\",\n        \"none\": \"border-none\"\n    },\n    \"Border style utilities for controlling the style of element borders\"\n) # Border style factory\n\n\n\n\nTest Border Style Utilities\n\nsource\n\n\ntest_borders_style_examples\n\n test_borders_style_examples ()\n\nTest border style utilities.\n\n\nExported source\ndef test_borders_style_examples():\n    \"\"\"Test border style utilities.\"\"\"\n    assert str(border_style.solid) == \"border-solid\"\n    assert str(border_style.dashed) == \"border-dashed\"\n    assert str(border_style.dotted) == \"border-dotted\"\n    assert str(border_style.double) == \"border-double\"\n    assert str(border_style.hidden) == \"border-hidden\"\n    assert str(border_style.none) == \"border-none\"\n\n# Run the tests\ntest_borders_style_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#divide-style",
    "href": "utilities/borders.html#divide-style",
    "title": "borders",
    "section": "Divide Style",
    "text": "Divide Style\nControl the style of borders between child elements using the divide style utilities:\n\nDivide Style Factory\n\n\nExported source\n# Create divide style factory\ndivide_style = SimpleFactory(\n    {\n        \"solid\": \"divide-solid\",\n        \"dashed\": \"divide-dashed\",\n        \"dotted\": \"divide-dotted\",\n        \"double\": \"divide-double\",\n        \"hidden\": \"divide-hidden\",\n        \"none\": \"divide-none\"\n    },\n    \"Divide style utilities for controlling the style of borders between child elements\"\n) # Divide style factory\n\n\n\n\nTest Divide Style Utilities\n\nsource\n\n\ntest_borders_divide_style_examples\n\n test_borders_divide_style_examples ()\n\nTest divide style utilities.\n\n\nExported source\ndef test_borders_divide_style_examples():\n    \"\"\"Test divide style utilities.\"\"\"\n    assert str(divide_style.solid) == \"divide-solid\"\n    assert str(divide_style.dashed) == \"divide-dashed\"\n    assert str(divide_style.dotted) == \"divide-dotted\"\n    assert str(divide_style.double) == \"divide-double\"\n    assert str(divide_style.hidden) == \"divide-hidden\"\n    assert str(divide_style.none) == \"divide-none\"\n\n# Run the tests\ntest_borders_divide_style_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#outline-width",
    "href": "utilities/borders.html#outline-width",
    "title": "borders",
    "section": "Outline Width",
    "text": "Outline Width\nControl the width of element outlines using the outline utilities:\n\nOutline Width Configuration\n\n\nOutline Width Factory\n\nsource\n\n\nOutlineWidthFactory\n\n OutlineWidthFactory (doc:Optional[str]=None)\n\nFactory for creating outline width utilities.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Create the main outline width factory\noutline = OutlineWidthFactory(\"Outline width utilities for controlling the width of element outlines\")\n\n\n\n\nTest Outline Width Utilities\n\nsource\n\n\ntest_borders_outline_width_examples\n\n test_borders_outline_width_examples ()\n\nTest outline width utilities.\n\n\nExported source\ndef test_borders_outline_width_examples():\n    \"\"\"Test outline width utilities.\"\"\"\n    # Test default outline (1px)\n    assert str(outline()) == \"outline\"\n    \n    # Test numeric values\n    assert str(outline._0) == \"outline-0\"\n    assert str(outline._1) == \"outline-1\"\n    assert str(outline._2) == \"outline-2\"\n    assert str(outline._4) == \"outline-4\"\n    assert str(outline._8) == \"outline-8\"\n    \n    # Test with function call\n    assert str(outline(0)) == \"outline-0\"\n    assert str(outline(2)) == \"outline-2\"\n    assert str(outline(4)) == \"outline-4\"\n    \n    # Test arbitrary values\n    assert str(outline(\"3px\")) == \"outline-[3px]\"\n    assert str(outline(\"0.5rem\")) == \"outline-[0.5rem]\"\n    # assert str(outline(\"thin\")) == \"outline-[thin]\"\n    \n    # Test custom properties\n    assert str(outline(\"--outline-width\")) == \"outline-(--outline-width)\"\n\n# Run the tests\ntest_borders_outline_width_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#outline-color",
    "href": "utilities/borders.html#outline-color",
    "title": "borders",
    "section": "Outline Color",
    "text": "Outline Color\nControl the color of element outlines using the outline color utilities:\n\nOutline Color Factory\n\n\nExported source\n# Create the outline color factory using ColoredFactory\noutline_color = ColoredFactory(\"outline\", \"Outline color utilities for controlling the color of element outlines\")\n\n\n\n\nTest Outline Color Utilities\n\nsource\n\n\ntest_borders_outline_color_examples\n\n test_borders_outline_color_examples ()\n\nTest outline color utilities.\n\n\nExported source\ndef test_borders_outline_color_examples():\n    \"\"\"Test outline color utilities.\"\"\"\n    # Test basic colors\n    assert str(outline_color.red._500) == \"outline-red-500\"\n    assert str(outline_color.blue._300) == \"outline-blue-300\"\n    assert str(outline_color.green._950) == \"outline-green-950\"\n    \n    # Test all 22 color families\n    assert str(outline_color.orange._500) == \"outline-orange-500\"\n    assert str(outline_color.amber._500) == \"outline-amber-500\"\n    assert str(outline_color.yellow._500) == \"outline-yellow-500\"\n    assert str(outline_color.lime._500) == \"outline-lime-500\"\n    assert str(outline_color.emerald._500) == \"outline-emerald-500\"\n    assert str(outline_color.teal._500) == \"outline-teal-500\"\n    assert str(outline_color.cyan._500) == \"outline-cyan-500\"\n    assert str(outline_color.sky._500) == \"outline-sky-500\"\n    assert str(outline_color.indigo._500) == \"outline-indigo-500\"\n    assert str(outline_color.violet._500) == \"outline-violet-500\"\n    assert str(outline_color.purple._500) == \"outline-purple-500\"\n    assert str(outline_color.fuchsia._500) == \"outline-fuchsia-500\"\n    assert str(outline_color.pink._500) == \"outline-pink-500\"\n    assert str(outline_color.rose._500) == \"outline-rose-500\"\n    assert str(outline_color.slate._500) == \"outline-slate-500\"\n    assert str(outline_color.gray._500) == \"outline-gray-500\"\n    assert str(outline_color.zinc._500) == \"outline-zinc-500\"\n    assert str(outline_color.neutral._500) == \"outline-neutral-500\"\n    assert str(outline_color.stone._500) == \"outline-stone-500\"\n    \n    # Test special colors\n    assert str(outline_color.inherit) == \"outline-inherit\"\n    assert str(outline_color.current) == \"outline-current\"\n    assert str(outline_color.transparent) == \"outline-transparent\"\n    assert str(outline_color.black) == \"outline-black\"\n    assert str(outline_color.white) == \"outline-white\"\n    \n    # Test with opacity\n    assert str(outline_color.red._500.opacity(50)) == \"outline-red-500/50\"\n    assert str(outline_color.blue._300.opacity(75)) == \"outline-blue-300/75\"\n    assert str(outline_color.black.opacity(10)) == \"outline-black/10\"\n    \n    # Test with function call\n    assert str(outline_color(\"red-500\")) == \"outline-red-500\"\n    assert str(outline_color(\"blue-300\", opacity=50)) == \"outline-blue-300/50\"\n    \n    # Test arbitrary values\n    assert str(outline_color(\"#ff0000\")) == \"outline-[#ff0000]\"\n    assert str(outline_color(\"rgb(255, 0, 0)\")) == \"outline-[rgb(255, 0, 0)]\"\n    \n    # Test custom properties\n    assert str(outline_color(\"--custom-outline\")) == \"outline-(--custom-outline)\"\n\n# Run the tests\ntest_borders_outline_color_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#outline-style",
    "href": "utilities/borders.html#outline-style",
    "title": "borders",
    "section": "Outline Style",
    "text": "Outline Style\nControl the style of element outlines using the outline style utilities:\n\nOutline Style Factory\n\n\nExported source\n# Create outline style factory with special handling for outline-hidden\noutline_style = SimpleFactory(\n    {\n        \"solid\": \"outline-solid\",\n        \"dashed\": \"outline-dashed\",\n        \"dotted\": \"outline-dotted\",\n        \"double\": \"outline-double\",\n        \"none\": \"outline-none\"\n    },\n    \"Outline style utilities for controlling the style of element outlines\"\n) # Outline style factory\n\n\n\n\nExported source\n# Add outline-hidden as a special single value factory\noutline_hidden = SingleValueFactory(\n    \"outline-hidden\", \n    \"Outline hidden utility that creates a transparent outline with offset\"\n) # Special outline-hidden utility\n\n\n\n\nTest Outline Style Utilities\n\nsource\n\n\ntest_borders_outline_style_examples\n\n test_borders_outline_style_examples ()\n\nTest outline style utilities.\n\n\nExported source\ndef test_borders_outline_style_examples():\n    \"\"\"Test outline style utilities.\"\"\"\n    assert str(outline_style.solid) == \"outline-solid\"\n    assert str(outline_style.dashed) == \"outline-dashed\"\n    assert str(outline_style.dotted) == \"outline-dotted\"\n    assert str(outline_style.double) == \"outline-double\"\n    assert str(outline_style.none) == \"outline-none\"\n    \n    # Test special outline-hidden utility\n    assert str(outline_hidden) == \"outline-hidden\"\n\n# Run the tests\ntest_borders_outline_style_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#outline-offset",
    "href": "utilities/borders.html#outline-offset",
    "title": "borders",
    "section": "Outline Offset",
    "text": "Outline Offset\nControl the offset of element outlines using the outline offset utilities:\n\nOutline Offset Configuration\n\n\nOutline Offset Factory\n\n\nExported source\n# Create the outline offset factory\noutline_offset = ScaledFactory(\n    \"outline-offset\", \n    OUTLINE_OFFSET_CONFIG, \n    \"Outline offset utilities for controlling the offset of element outlines\"\n)\n\n\n\n\nTest Outline Offset Utilities\n\nsource\n\n\ntest_borders_outline_offset_examples\n\n test_borders_outline_offset_examples ()\n\nTest outline offset utilities.\n\n\nExported source\ndef test_borders_outline_offset_examples():\n    \"\"\"Test outline offset utilities.\"\"\"\n    # Test numeric values\n    assert str(outline_offset._0) == \"outline-offset-0\"\n    assert str(outline_offset._1) == \"outline-offset-1\"\n    assert str(outline_offset._2) == \"outline-offset-2\"\n    assert str(outline_offset._4) == \"outline-offset-4\"\n    assert str(outline_offset._8) == \"outline-offset-8\"\n    \n    # Test with function call\n    assert str(outline_offset(0)) == \"outline-offset-0\"\n    assert str(outline_offset(2)) == \"outline-offset-2\"\n    assert str(outline_offset(4)) == \"outline-offset-4\"\n    \n    # Test negative values\n    assert str(outline_offset.negative(1)) == \"-outline-offset-1\"\n    assert str(outline_offset.negative(2)) == \"-outline-offset-2\"\n    assert str(outline_offset.negative(4)) == \"-outline-offset-4\"\n    assert str(outline_offset.negative(8)) == \"-outline-offset-8\"\n    \n    # Test negative with function call\n    assert str(outline_offset(1, negative=True)) == \"-outline-offset-1\"\n    assert str(outline_offset(2, negative=True)) == \"-outline-offset-2\"\n    \n    # Test arbitrary values\n    assert str(outline_offset(\"3px\")) == \"outline-offset-[3px]\"\n    assert str(outline_offset(\"0.5rem\")) == \"outline-offset-[0.5rem]\"\n    \n    # Test custom properties\n    assert str(outline_offset(\"--outline-offset\")) == \"outline-offset-(--outline-offset)\"\n\n# Run the tests\ntest_borders_outline_offset_examples()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/borders.html#practical-examples",
    "href": "utilities/borders.html#practical-examples",
    "title": "borders",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these border utilities in real FastHTML components:\n\nsource\n\ntest_borders_fasthtml_examples\n\n test_borders_fasthtml_examples ()\n\nTest border utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_borders_fasthtml_examples():\n    \"\"\"Test border utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Button, Card, Ul, Li, H3, P, Input, Link\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw, overflow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, flex_display, grid_display\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Card with rounded corners and colored border\n    card = Card(\n        H3(\"Card Title\"),\n        P(\"Card content goes here.\"),\n        cls=combine_classes(\n            rounded.lg,\n            border(),\n            border_color.gray._300,\n            p(6)\n        )\n    )\n    assert \"rounded-lg\" in card.attrs['class']\n    assert \"border\" in card.attrs['class']\n    assert \"border-gray-300\" in card.attrs['class']\n    \n    # Button with full rounded corners and colored border\n    button = Button(\n        \"Click me\",\n        cls=combine_classes(\n            rounded.full,\n            border._2,\n            border_color.blue._500,\n            p.x(4),\n            p.y(2)\n        )\n    )\n    assert \"rounded-full\" in button.attrs['class']\n    assert \"border-2\" in button.attrs['class']\n    assert \"border-blue-500\" in button.attrs['class']\n    \n    # Container with top rounded corners and different border colors\n    container = Div(\n        \"Content\",\n        cls=combine_classes(\n            rounded.t.xl,\n            rounded.b.none,\n            border(),\n            border_color.t.red._500,\n            border_color.x.gray._300,\n            border_color.b.transparent,\n            p(4)\n        )\n    )\n    assert \"rounded-t-xl\" in container.attrs['class']\n    assert \"rounded-b-none\" in container.attrs['class']\n    assert \"border-t-red-500\" in container.attrs['class']\n    assert \"border-x-gray-300\" in container.attrs['class']\n    assert \"border-b-transparent\" in container.attrs['class']\n    \n    # List with colored dividers between items\n    list_with_dividers = Ul(\n        Li(\"Item 1\"),\n        Li(\"Item 2\"),\n        Li(\"Item 3\"),\n        cls=combine_classes(\n            divide.y._2,\n            divide_color.gray._200,\n            p.y(2)\n        )\n    )\n    assert \"divide-y-2\" in list_with_dividers.attrs['class']\n    assert \"divide-gray-200\" in list_with_dividers.attrs['class']\n    \n    # Horizontal button group with colored dividers\n    button_group = Div(\n        Button(\"Left\"),\n        Button(\"Center\"),\n        Button(\"Right\"),\n        cls=combine_classes(\n            flex_display,\n            divide.x(),\n            divide_color.gray._400,\n            border(),\n            border_color.gray._400,\n            rounded.lg,\n            overflow.hidden\n        )\n    )\n    assert \"divide-x\" in button_group.attrs['class']\n    assert \"divide-gray-400\" in button_group.attrs['class']\n    assert \"border\" in button_group.attrs['class']\n    assert \"border-gray-400\" in button_group.attrs['class']\n    assert \"rounded-lg\" in button_group.attrs['class']\n    \n    # Complex border example with colors\n    complex_border = Div(\n        \"Complex borders\",\n        cls=combine_classes(\n            border.t._4,\n            border.r._2,\n            border.b._0,\n            border.l._2,\n            border_color.t.red._600,\n            border_color.r.blue._400,\n            border_color.l.green._500,\n            rounded.tl.xl,\n            rounded.tr.sm,\n            rounded.br.none,\n            rounded.bl.md,\n            p(4)\n        )\n    )\n    assert \"border-t-4\" in complex_border.attrs['class']\n    assert \"border-r-2\" in complex_border.attrs['class']\n    assert \"border-b-0\" in complex_border.attrs['class']\n    assert \"border-l-2\" in complex_border.attrs['class']\n    assert \"border-t-red-600\" in complex_border.attrs['class']\n    assert \"border-r-blue-400\" in complex_border.attrs['class']\n    assert \"border-l-green-500\" in complex_border.attrs['class']\n    assert \"rounded-tl-xl\" in complex_border.attrs['class']\n    assert \"rounded-tr-sm\" in complex_border.attrs['class']\n    assert \"rounded-br-none\" in complex_border.attrs['class']\n    assert \"rounded-bl-md\" in complex_border.attrs['class']\n    \n    # Card with semi-transparent border\n    transparent_card = Card(\n        \"Semi-transparent border\",\n        cls=combine_classes(\n            border._2,\n            border_color.black.opacity(20),\n            rounded.md,\n            p(4)\n        )\n    )\n    assert \"border-2\" in transparent_card.attrs['class']\n    assert \"border-black/20\" in transparent_card.attrs['class']\n    assert \"rounded-md\" in transparent_card.attrs['class']\n    \n    # Input with dashed border style\n    input_field = Input(\n        type=\"text\",\n        placeholder=\"Enter text\",\n        cls=combine_classes(\n            border._2,\n            border_color.gray._400,\n            border_style.dashed,\n            rounded.md,\n            p.x(3),\n            p.y(2)\n        )\n    )\n    assert \"border-2\" in input_field.attrs['class']\n    assert \"border-gray-400\" in input_field.attrs['class']\n    assert \"border-dashed\" in input_field.attrs['class']\n    \n    # List with dotted dividers\n    dotted_list = Ul(\n        Li(\"First item\"),\n        Li(\"Second item\"),\n        Li(\"Third item\"),\n        cls=combine_classes(\n            divide.y(),\n            divide_color.gray._300,\n            divide_style.dotted,\n            p.y(1)\n        )\n    )\n    assert \"divide-y\" in dotted_list.attrs['class']\n    assert \"divide-gray-300\" in dotted_list.attrs['class']\n    assert \"divide-dotted\" in dotted_list.attrs['class']\n    \n    # Button with focus outline\n    focus_button = Button(\n        \"Focus Me\",\n        cls=combine_classes(\n            p.x(4),\n            p.y(2),\n            outline_style.none,\n            outline._2.focus,\n            outline_color.blue._500.focus,\n            outline_offset._2.focus\n        )\n    )\n    assert \"outline-none\" in focus_button.attrs['class']\n    assert \"focus:outline-2\" in focus_button.attrs['class']\n    assert \"focus:outline-blue-500\" in focus_button.attrs['class']\n    assert \"focus:outline-offset-2\" in focus_button.attrs['class']\n    \n    # Link with custom outline\n    custom_link = Link(\n        \"Custom Link\",\n        href=\"#\",\n        cls=combine_classes(\n            display_tw.inline_block,\n            p.x(3),\n            p.y(1),\n            outline(),\n            outline_color.purple._400,\n            outline_style.dashed,\n            outline_offset._1,\n            rounded.sm\n        )\n    )\n    assert \"outline\" in custom_link.attrs['class']\n    assert \"outline-purple-400\" in custom_link.attrs['class']\n    assert \"outline-dashed\" in custom_link.attrs['class']\n    assert \"outline-offset-1\" in custom_link.attrs['class']\n    \n    # Box with double border style\n    double_border_box = Div(\n        \"Double Border\",\n        cls=combine_classes(\n            border._4,\n            border_color.indigo._600,\n            border_style.double,\n            rounded.lg,\n            p(6)\n        )\n    )\n    assert \"border-4\" in double_border_box.attrs['class']\n    assert \"border-indigo-600\" in double_border_box.attrs['class']\n    assert \"border-double\" in double_border_box.attrs['class']\n    \n    # Container with hidden outline for accessibility\n    accessible_container = Div(\n        \"Accessible content\",\n        tabindex=\"0\",\n        cls=combine_classes(\n            outline_hidden,\n            outline._2.focus,\n            outline_color.blue._500.focus,\n            p(4)\n        )\n    )\n    assert \"outline-hidden\" in accessible_container.attrs['class']\n    \n    # Return all examples in a grid layout\n    return Div(\n        card,\n        button,\n        container,\n        list_with_dividers,\n        button_group,\n        complex_border,\n        transparent_card,\n        input_field,\n        dotted_list,\n        focus_button,\n        custom_link,\n        double_border_box,\n        accessible_container,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_borders_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;article class=\"rounded-lg border border-gray-300 p-6\"&gt;\n    &lt;h3&gt;Card Title&lt;/h3&gt;\n    &lt;p&gt;Card content goes here.&lt;/p&gt;\n  &lt;/article&gt;\n&lt;button class=\"rounded-full border-2 border-blue-500 px-4 py-2\"&gt;Click me&lt;/button&gt;  &lt;div class=\"rounded-t-xl rounded-b-none border border-t-red-500 border-x-gray-300 border-b-transparent p-4\"&gt;Content&lt;/div&gt;\n  &lt;ul class=\"divide-y-2 divide-gray-200 py-2\"&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n    &lt;li&gt;Item 3&lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;div class=\"flex divide-x divide-gray-400 border border-gray-400 rounded-lg overflow-hidden\"&gt;\n&lt;button&gt;Left&lt;/button&gt;&lt;button&gt;Center&lt;/button&gt;&lt;button&gt;Right&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"border-t-4 border-r-2 border-b-0 border-l-2 border-t-red-600 border-r-blue-400 border-l-green-500 rounded-tl-xl rounded-tr-sm rounded-br-none rounded-bl-md p-4\"&gt;Complex borders&lt;/div&gt;\n  &lt;article class=\"border-2 border-black/20 rounded-md p-4\"&gt;Semi-transparent border&lt;/article&gt;\n  &lt;input type=\"text\" placeholder=\"Enter text\" class=\"border-2 border-gray-400 border-dashed rounded-md px-3 py-2\"&gt;\n  &lt;ul class=\"divide-y divide-gray-300 divide-dotted py-1\"&gt;\n    &lt;li&gt;First item&lt;/li&gt;\n    &lt;li&gt;Second item&lt;/li&gt;\n    &lt;li&gt;Third item&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;button class=\"px-4 py-2 outline-none focus:outline-2 focus:outline-blue-500 focus:outline-offset-2\"&gt;Focus Me&lt;/button&gt;  &lt;link href=\"#\" class=\"inline-block px-3 py-1 outline outline-purple-400 outline-dashed outline-offset-1 rounded-sm\"&gt;Custom Link\n  &lt;div class=\"border-4 border-indigo-600 border-double rounded-lg p-6\"&gt;Double Border&lt;/div&gt;\n  &lt;div tabindex=\"0\" class=\"outline-hidden focus:outline-2 focus:outline-blue-500 p-4\"&gt;Accessible content&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_borders_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "borders"
    ]
  },
  {
    "objectID": "utilities/accessibility.html",
    "href": "utilities/accessibility.html",
    "title": "accessibility",
    "section": "",
    "text": "Tailwind CSS provides utilities for opting in and out of forced colors. These are particularly useful for Windows High Contrast Mode.\n\nsource\n\n\n\n ForcedColorAdjust (value, names=None, module=None, qualname=None,\n                    type=None, start=1, boundary=None)\n\nForced color utility values\n\n\nExported source\nclass ForcedColorAdjust(Enum):\n    \"\"\"Forced color utility values\"\"\"\n    AUTO = \"auto\"\n    NONE = \"none\"\n\n# Create forced color adjust factory\nforced_color_adjust = enums_to_simple_factory(\"forced-color-adjust\", [ForcedColorAdjust], \"Forced color adjust utilities for opting in and out of forced colors (e.g., Windows High Contrast Mode)\") # The forced color adjust factory\n\n\n\nsource\n\n\n\n\n test_accessibility_forced_color_adjust_examples ()\n\nTest forced color adjust utilities.\n\n\nExported source\ndef test_accessibility_forced_color_adjust_examples(\n):\n    \"\"\"Test forced color adjust utilities.\"\"\"\n    # Test forced color adjust utilities with dot notation\n    assert str(forced_color_adjust.auto) == \"forced-color-adjust-auto\"\n    assert str(forced_color_adjust.none) == \"forced-color-adjust-none\"\n\n# Run the tests\ntest_accessibility_forced_color_adjust_examples()",
    "crumbs": [
      "utilities",
      "accessibility"
    ]
  },
  {
    "objectID": "utilities/accessibility.html#forced-color-adjust-utilities",
    "href": "utilities/accessibility.html#forced-color-adjust-utilities",
    "title": "accessibility",
    "section": "",
    "text": "Tailwind CSS provides utilities for opting in and out of forced colors. These are particularly useful for Windows High Contrast Mode.\n\nsource\n\n\n\n ForcedColorAdjust (value, names=None, module=None, qualname=None,\n                    type=None, start=1, boundary=None)\n\nForced color utility values\n\n\nExported source\nclass ForcedColorAdjust(Enum):\n    \"\"\"Forced color utility values\"\"\"\n    AUTO = \"auto\"\n    NONE = \"none\"\n\n# Create forced color adjust factory\nforced_color_adjust = enums_to_simple_factory(\"forced-color-adjust\", [ForcedColorAdjust], \"Forced color adjust utilities for opting in and out of forced colors (e.g., Windows High Contrast Mode)\") # The forced color adjust factory\n\n\n\nsource\n\n\n\n\n test_accessibility_forced_color_adjust_examples ()\n\nTest forced color adjust utilities.\n\n\nExported source\ndef test_accessibility_forced_color_adjust_examples(\n):\n    \"\"\"Test forced color adjust utilities.\"\"\"\n    # Test forced color adjust utilities with dot notation\n    assert str(forced_color_adjust.auto) == \"forced-color-adjust-auto\"\n    assert str(forced_color_adjust.none) == \"forced-color-adjust-none\"\n\n# Run the tests\ntest_accessibility_forced_color_adjust_examples()",
    "crumbs": [
      "utilities",
      "accessibility"
    ]
  },
  {
    "objectID": "utilities/accessibility.html#screen-reader-utilities",
    "href": "utilities/accessibility.html#screen-reader-utilities",
    "title": "accessibility",
    "section": "Screen Reader Utilities",
    "text": "Screen Reader Utilities\nUtilities for controlling visibility of elements for screen readers vs visual display.\n\nsource\n\ntest_accessibility_screen_reader_examples\n\n test_accessibility_screen_reader_examples ()\n\nTest screen reader utilities imported from layout module.\n\n\nExported source\n# Screen reader utilities\nsr_only = SingleValueFactory(\"sr-only\", \"Hide element visually but keep it available to screen readers\")\nnot_sr_only = SingleValueFactory(\"not-sr-only\", \"Undo sr-only, making element visible again\")\n\n\n\n\nExported source\ndef test_accessibility_screen_reader_examples(\n):\n    \"\"\"Test screen reader utilities imported from layout module.\"\"\"\n    # Test screen reader utilities\n    assert str(sr_only) == \"sr-only\"\n    assert str(not_sr_only) == \"not-sr-only\"\n\n# Run the tests\ntest_accessibility_screen_reader_examples()",
    "crumbs": [
      "utilities",
      "accessibility"
    ]
  },
  {
    "objectID": "utilities/accessibility.html#practical-examples",
    "href": "utilities/accessibility.html#practical-examples",
    "title": "accessibility",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these accessibility utilities in real FastHTML components:\n\nsource\n\ntest_accessibility_fasthtml_examples\n\n test_accessibility_fasthtml_examples ()\n\nTest accessibility utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_accessibility_fasthtml_examples(\n):\n    \"\"\"Test accessibility utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Button, Span, Input, Label, Nav, A\n    from cjm_fasthtml_tailwind.utilities.layout import position, top, left\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.borders import rounded, border, border_color\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n    from cjm_fasthtml_tailwind.utilities.transitions_and_animation import animate\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, items, grid_display, flex_display\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Skip link for keyboard navigation\n    skip_link = A(\n        \"Skip to main content\",\n        href=\"#main-content\",\n        cls=combine_classes(\n            sr_only,\n            not_sr_only.focus,\n            position.absolute.focus,\n            top(4).focus,\n            left(4).focus,\n            bg.white,\n            p(2),\n            rounded.full\n        )\n    )\n    assert \"sr-only\" in skip_link.attrs['class']\n    assert \"focus:not-sr-only\" in skip_link.attrs['class']\n    \n    # Form with screen reader only label\n    form_field = Div(\n        Label(\"Search\", cls=str(sr_only), for_=\"search\"),\n        Input(\n            type=\"search\",\n            id=\"search\",\n            placeholder=\"Search...\",\n            cls=combine_classes(w.full, p.x(4), p.y(2), border._1, rounded.full)\n        )\n    )\n    assert form_field.children[0].attrs['class'] == \"sr-only\"\n    \n    # Icon button with screen reader text\n    icon_button = Button(\n        # Icon would go here (e.g., SVG)\n        Span(\"Close dialog\", cls=str(sr_only)),\n        cls=combine_classes(p(2), rounded.full, bg.gray._100.hover),\n        aria_label=\"Close dialog\"\n    )\n    assert icon_button.children[0].attrs['class'] == \"sr-only\"\n    \n    # Navigation with forced color adjustments\n    high_contrast_nav = Nav(\n        A(\"Home\", href=\"/\", cls=combine_classes(forced_color_adjust.none, text_color.blue._600)),\n        A(\"About\", href=\"/about\", cls=combine_classes(forced_color_adjust.none, text_color.blue._600)),\n        A(\"Contact\", href=\"/contact\", cls=combine_classes(forced_color_adjust.none, text_color.blue._600)),\n        cls=combine_classes(forced_color_adjust.auto, flex_display, gap(4))\n    )\n    assert high_contrast_nav.attrs['class'] == \"forced-color-adjust-auto flex gap-4\"\n    assert \"forced-color-adjust-none\" in high_contrast_nav.children[0].attrs['class']\n    \n    # Loading spinner with screen reader text\n    loading_spinner = Div(\n        Div(cls=combine_classes(\n            animate.spin,\n            h(5),\n            w(5),\n            border._2,\n            border_color.gray._900,\n            rounded.full,\n            border_color.t.transparent\n        )),\n        Span(\"Loading...\", cls=str(sr_only)),\n        cls=combine_classes(flex_display.inline, items.center)\n    )\n    assert loading_spinner.children[1].attrs['class'] == \"sr-only\"\n    \n    # Return all examples in a grid layout\n    return Div(\n        skip_link,\n        form_field,\n        icon_button,\n        high_contrast_nav,\n        loading_spinner,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_accessibility_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n&lt;a href=\"#main-content\" class=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-white p-2 rounded-full\"&gt;Skip to main content&lt;/a&gt;  &lt;div&gt;\n&lt;label for-=\"search\" class=\"sr-only\"&gt;Search&lt;/label&gt;    &lt;input type=\"search\" placeholder=\"Search...\" id=\"search\" class=\"w-full px-4 py-2 border-1 rounded-full\" name=\"search\"&gt;\n  &lt;/div&gt;\n&lt;button aria-label=\"Close dialog\" class=\"p-2 rounded-full hover:bg-gray-100\"&gt;&lt;span class=\"sr-only\"&gt;Close dialog&lt;/span&gt;&lt;/button&gt;  &lt;nav class=\"forced-color-adjust-auto flex gap-4\"&gt;\n&lt;a href=\"/\" class=\"forced-color-adjust-none text-blue-600\"&gt;Home&lt;/a&gt;&lt;a href=\"/about\" class=\"forced-color-adjust-none text-blue-600\"&gt;About&lt;/a&gt;&lt;a href=\"/contact\" class=\"forced-color-adjust-none text-blue-600\"&gt;Contact&lt;/a&gt;  &lt;/nav&gt;\n  &lt;div class=\"inline-flex items-center\"&gt;\n    &lt;div class=\"animate-spin h-5 w-5 border-2 border-gray-900 rounded-full border-t-transparent\"&gt;&lt;/div&gt;\n&lt;span class=\"sr-only\"&gt;Loading...&lt;/span&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_accessibility_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "accessibility"
    ]
  },
  {
    "objectID": "utilities/accessibility.html#helper-functions",
    "href": "utilities/accessibility.html#helper-functions",
    "title": "accessibility",
    "section": "Helper Functions",
    "text": "Helper Functions\nConvenient functions for common accessibility patterns:\n\nsource\n\nvisually_hidden\n\n visually_hidden (focusable:bool=False)\n\n*Hide an element visually but keep it available to screen readers.\nArgs: focusable: If True, element becomes visible when focused (useful for skip links)\nReturns: CSS classes for visual hiding with optional focus visibility*\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfocusable\nbool\nFalse\nWhether the element should be visible when focused\n\n\nReturns\nstr\n\nCSS classes for hiding element visually\n\n\n\n\nsource\n\n\nhigh_contrast_safe\n\n high_contrast_safe (*classes:str)\n\n*Create classes that work well with high contrast mode.\nArgs: *classes: Additional CSS classes to include\nReturns: Combined CSS classes with forced-color-adjust-auto*\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nclasses\nstr\nAdditional CSS classes to combine\n\n\nReturns\nstr\nCSS classes including forced color adjust\n\n\n\n\nsource\n\n\ntest_accessibility_helper_examples\n\n test_accessibility_helper_examples ()\n\nTest helper functions for common accessibility patterns.\n\n\nExported source\ndef test_accessibility_helper_examples(\n):\n    \"\"\"Test helper functions for common accessibility patterns.\"\"\"\n    # Test visually_hidden helper\n    assert visually_hidden() == \"sr-only\"\n    assert visually_hidden(focusable=True) == \"sr-only focus:not-sr-only\"\n    \n    # Test high_contrast_safe helper\n    assert high_contrast_safe() == \"forced-color-adjust-auto\"\n    assert high_contrast_safe(\"bg-blue-500\", \"text-white\") == \"forced-color-adjust-auto bg-blue-500 text-white\"\n\n# Run the tests\ntest_accessibility_helper_examples()",
    "crumbs": [
      "utilities",
      "accessibility"
    ]
  },
  {
    "objectID": "utilities/accessibility.html#export",
    "href": "utilities/accessibility.html#export",
    "title": "accessibility",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "accessibility"
    ]
  },
  {
    "objectID": "utilities/transforms.html",
    "href": "utilities/transforms.html",
    "title": "transforms",
    "section": "",
    "text": "Control whether the back face of an element is visible when rotated:\n\nsource\n\n\n\n test_transforms_backface_examples ()\n\nTest backface visibility utilities.\n\n\nExported source\n# Backface visibility utilities\nBACKFACE_VALUES = {\n    \"hidden\": \"backface-hidden\",\n    \"visible\": \"backface-visible\"\n}\n\nbackface = SimpleFactory(BACKFACE_VALUES, \"Backface visibility utilities for controlling if an element's backface is visible\") # The backface visibility factory\n\n\n\n\nExported source\ndef test_transforms_backface_examples():\n    \"\"\"Test backface visibility utilities.\"\"\"\n    assert str(backface.hidden) == \"backface-hidden\"\n    assert str(backface.visible) == \"backface-visible\"\n\n# Run the test\ntest_transforms_backface_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#backface-visibility-utilities",
    "href": "utilities/transforms.html#backface-visibility-utilities",
    "title": "transforms",
    "section": "",
    "text": "Control whether the back face of an element is visible when rotated:\n\nsource\n\n\n\n test_transforms_backface_examples ()\n\nTest backface visibility utilities.\n\n\nExported source\n# Backface visibility utilities\nBACKFACE_VALUES = {\n    \"hidden\": \"backface-hidden\",\n    \"visible\": \"backface-visible\"\n}\n\nbackface = SimpleFactory(BACKFACE_VALUES, \"Backface visibility utilities for controlling if an element's backface is visible\") # The backface visibility factory\n\n\n\n\nExported source\ndef test_transforms_backface_examples():\n    \"\"\"Test backface visibility utilities.\"\"\"\n    assert str(backface.hidden) == \"backface-hidden\"\n    assert str(backface.visible) == \"backface-visible\"\n\n# Run the test\ntest_transforms_backface_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#perspective-utilities",
    "href": "utilities/transforms.html#perspective-utilities",
    "title": "transforms",
    "section": "Perspective Utilities",
    "text": "Perspective Utilities\nControl the perspective of 3D-transformed elements:\n\nsource\n\nPerspectiveFactory\n\n PerspectiveFactory (values_dict:Optional[Dict[str,str]]=None,\n                     doc:Optional[str]=None)\n\nFactory for perspective with both named and custom values.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Perspective named scales\nPERSPECTIVE_VALUES = {\n    \"dramatic\": \"perspective-dramatic\",\n    \"near\": \"perspective-near\", \n    \"normal\": \"perspective-normal\",\n    \"midrange\": \"perspective-midrange\",\n    \"distant\": \"perspective-distant\",\n    \"none\": \"perspective-none\"\n}\n\n\n\nsource\n\n\ntest_transforms_perspective_examples\n\n test_transforms_perspective_examples ()\n\nTest perspective utilities.\n\n\nExported source\nperspective = PerspectiveFactory(PERSPECTIVE_VALUES, \"Perspective utilities for controlling an element's perspective when placed in 3D space\") # The perspective factory\n\n\n\n\nExported source\ndef test_transforms_perspective_examples():\n    \"\"\"Test perspective utilities.\"\"\"\n    # Named perspectives\n    assert str(perspective.dramatic) == \"perspective-dramatic\"\n    assert str(perspective.near) == \"perspective-near\"\n    assert str(perspective.normal) == \"perspective-normal\"\n    assert str(perspective.midrange) == \"perspective-midrange\"\n    assert str(perspective.distant) == \"perspective-distant\"\n    assert str(perspective.none) == \"perspective-none\"\n    \n    # Custom perspectives\n    assert perspective(\"500px\") == \"perspective-[500px]\"\n    assert perspective(\"10rem\") == \"perspective-[10rem]\"\n    assert perspective(\"--custom-perspective\") == \"perspective-(--custom-perspective)\"\n\n# Run the test\ntest_transforms_perspective_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#perspective-origin-utilities",
    "href": "utilities/transforms.html#perspective-origin-utilities",
    "title": "transforms",
    "section": "Perspective Origin Utilities",
    "text": "Perspective Origin Utilities\nControl the perspective origin of 3D-transformed elements:\n\nsource\n\nPerspectiveOriginFactory\n\n PerspectiveOriginFactory (values_dict:Optional[Dict[str,str]]=None,\n                           doc:Optional[str]=None)\n\nFactory for perspective origin with both fixed and custom values.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Perspective origin positions - combines fixed positions with custom value support\nPERSPECTIVE_ORIGIN_VALUES = {\n    \"center\": \"perspective-origin-center\",\n    \"top\": \"perspective-origin-top\",\n    \"top-right\": \"perspective-origin-top-right\",\n    \"right\": \"perspective-origin-right\",\n    \"bottom-right\": \"perspective-origin-bottom-right\",\n    \"bottom\": \"perspective-origin-bottom\",\n    \"bottom-left\": \"perspective-origin-bottom-left\",\n    \"left\": \"perspective-origin-left\",\n    \"top-left\": \"perspective-origin-top-left\"\n}\n\n\n\nsource\n\n\ntest_transforms_perspective_origin_examples\n\n test_transforms_perspective_origin_examples ()\n\nTest perspective origin utilities.\n\n\nExported source\nperspective_origin = PerspectiveOriginFactory(\n    PERSPECTIVE_ORIGIN_VALUES, \n    \"Perspective origin utilities for controlling an element's perspective origin when placed in 3D space\"\n) # The perspective origin factory\n\n\n\n\nExported source\ndef test_transforms_perspective_origin_examples():\n    \"\"\"Test perspective origin utilities.\"\"\"\n    # Fixed positions\n    assert str(perspective_origin.center) == \"perspective-origin-center\"\n    assert str(perspective_origin.top) == \"perspective-origin-top\"\n    assert str(perspective_origin.bottom_right) == \"perspective-origin-bottom-right\"\n    assert str(perspective_origin.top_left) == \"perspective-origin-top-left\"\n    \n    # Custom positions\n    assert perspective_origin(\"50% 25%\") == \"perspective-origin-[50% 25%]\"\n    assert perspective_origin(\"10px 20px\") == \"perspective-origin-[10px 20px]\"\n    assert perspective_origin(\"--custom-origin\") == \"perspective-origin-(--custom-origin)\"\n\n# Run the test\ntest_transforms_perspective_origin_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#rotate-utilities",
    "href": "utilities/transforms.html#rotate-utilities",
    "title": "transforms",
    "section": "Rotate Utilities",
    "text": "Rotate Utilities\nControl the rotation of elements with support for 3D rotations:\n\nsource\n\nRotateUtility\n\n RotateUtility (prefix:str)\n\nUtility class for rotation with angle support.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix (e.g., ‘w’ for width, ‘p’ for padding)\n\n\n\n\nsource\n\n\nRotateFactory\n\n RotateFactory ()\n\nFactory for rotation utilities with directional support.\n\nsource\n\n\nNegativeRotateFactory\n\n NegativeRotateFactory ()\n\nFactory for negative rotation utilities.\n\nsource\n\n\ntest_transforms_rotate_examples\n\n test_transforms_rotate_examples ()\n\nTest rotate utilities.\n\n\nExported source\nrotate = RotateFactory() # The rotate factory\n\n\n\n\nExported source\ndef test_transforms_rotate_examples():\n    \"\"\"Test rotate utilities.\"\"\"\n    # Basic rotations\n    assert str(rotate(0)) == \"rotate-0\"\n    assert str(rotate(45)) == \"rotate-45\"\n    assert str(rotate(90)) == \"rotate-90\"\n    assert str(rotate(180)) == \"rotate-180\"\n    assert str(rotate.none) == \"rotate-none\"\n    assert str(rotate._45) == \"rotate-45\"\n    \n    # Negative rotations\n    assert str(rotate(45, negative=True)) == \"-rotate-45\"\n    assert str(rotate.negative(90)) == \"-rotate-90\"\n    assert str(rotate.negative._180) == \"-rotate-180\"\n    \n    # Directional rotations\n    assert str(rotate.x(45)) == \"rotate-x-45\"\n    assert str(rotate.y(90)) == \"rotate-y-90\"\n    assert str(rotate.z(180)) == \"rotate-z-180\"\n    assert str(rotate.x.negative(45)) == \"-rotate-x-45\"\n    \n    # Arbitrary values\n    assert str(rotate(\"30deg\")) == \"rotate-[30deg]\"\n    assert str(rotate(\"0.25turn\")) == \"rotate-[0.25turn]\"\n    assert str(rotate(\"--rotation\")) == \"rotate-(--rotation)\"\n\n# Run the test\ntest_transforms_rotate_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#scale-utilities",
    "href": "utilities/transforms.html#scale-utilities",
    "title": "transforms",
    "section": "Scale Utilities",
    "text": "Scale Utilities\nControl the scale of elements with support for directional scaling:\n\nsource\n\nScaleUtility\n\n ScaleUtility (prefix:str)\n\nUtility class for scaling with percentage support.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix (e.g., ‘w’ for width, ‘p’ for padding)\n\n\n\n\n\nExported source\n# Scale percentage values\nSCALE_VALUES = [0, 50, 75, 90, 95, 100, 105, 110, 125, 150] # Common scale percentages\n\n# Configuration for scale utilities\nSCALE_CONFIG = ScaleConfig(\n    numeric=False,  # Not using standard numeric scale\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\"none\": \"none\"},\n    negative=True  # Support negative scaling (flip)\n)\n\n\n\nsource\n\n\nScaleFactory\n\n ScaleFactory ()\n\nFactory for scale utilities with directional and 3D support.\n\nsource\n\n\nNegativeScaleFactory\n\n NegativeScaleFactory ()\n\nFactory for negative scale utilities.\n\nsource\n\n\ntest_transforms_scale_examples\n\n test_transforms_scale_examples ()\n\nTest scale utilities.\n\n\nExported source\nscale_tw = ScaleFactory() # The scale factory (renamed to avoid conflict with built-in scale)\n\n\n\n\nExported source\ndef test_transforms_scale_examples():\n    \"\"\"Test scale utilities.\"\"\"\n    # Basic scaling\n    assert str(scale_tw(0)) == \"scale-0\"\n    assert str(scale_tw(50)) == \"scale-50\"\n    assert str(scale_tw(100)) == \"scale-100\"\n    assert str(scale_tw(150)) == \"scale-150\"\n    assert str(scale_tw.none) == \"scale-none\"\n    assert str(scale_tw._75) == \"scale-75\"\n    \n    # Negative scaling\n    assert str(scale_tw(100, negative=True)) == \"-scale-100\"\n    assert str(scale_tw.negative(50)) == \"-scale-50\"\n    assert str(scale_tw.negative._75) == \"-scale-75\"\n    \n    # Directional scaling\n    assert str(scale_tw.x(50)) == \"scale-x-50\"\n    assert str(scale_tw.y(150)) == \"scale-y-150\"\n    assert str(scale_tw.z(75)) == \"scale-z-75\"\n    assert str(scale_tw.x.negative(100)) == \"-scale-x-100\"\n    \n    # 3D scaling\n    assert str(scale_tw._3d) == \"scale-3d\"\n    \n    # Arbitrary values\n    assert str(scale_tw(\"1.5\")) == \"scale-[1.5]\"\n    assert str(scale_tw(\"200%\")) == \"scale-[200%]\"\n    assert str(scale_tw(\"--scale-custom\")) == \"scale-(--scale-custom)\"\n\n# Run the test\ntest_transforms_scale_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#skew-utilities",
    "href": "utilities/transforms.html#skew-utilities",
    "title": "transforms",
    "section": "Skew Utilities",
    "text": "Skew Utilities\nControl the skew transformation of elements:\n\nsource\n\nSkewUtility\n\n SkewUtility (prefix:str)\n\nUtility class for skewing with angle support.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe utility prefix (e.g., ‘w’ for width, ‘p’ for padding)\n\n\n\n\n\nExported source\n# Skew angle values\nSKEW_ANGLES = [0, 1, 2, 3, 6, 12] # Common skew angles in degrees\n\n\n\nsource\n\n\nSkewFactory\n\n SkewFactory ()\n\nFactory for skew utilities with directional support.\n\nsource\n\n\nNegativeSkewFactory\n\n NegativeSkewFactory ()\n\nFactory for negative skew utilities.\n\nsource\n\n\ntest_transforms_skew_examples\n\n test_transforms_skew_examples ()\n\nTest skew utilities.\n\n\nExported source\nskew = SkewFactory() # The skew factory\n\n\n\n\nExported source\ndef test_transforms_skew_examples():\n    \"\"\"Test skew utilities.\"\"\"\n    # Basic skewing\n    assert str(skew(0)) == \"skew-0\"\n    assert str(skew(3)) == \"skew-3\"\n    assert str(skew(6)) == \"skew-6\"\n    assert str(skew(12)) == \"skew-12\"\n    assert str(skew._3) == \"skew-3\"\n    \n    # Negative skewing\n    assert str(skew(6, negative=True)) == \"-skew-6\"\n    assert str(skew.negative(12)) == \"-skew-12\"\n    assert str(skew.negative._3) == \"-skew-3\"\n    \n    # Directional skewing\n    assert str(skew.x(3)) == \"skew-x-3\"\n    assert str(skew.y(6)) == \"skew-y-6\"\n    assert str(skew.x._12) == \"skew-x-12\"\n    assert str(skew.x.negative(6)) == \"-skew-x-6\"\n    assert str(skew.y.negative._3) == \"-skew-y-3\"\n    \n    # Arbitrary values\n    assert str(skew(\"15deg\")) == \"skew-[15deg]\"\n    assert str(skew(\"0.5rad\")) == \"skew-[0.5rad]\"\n    assert str(skew(\"--skew-custom\")) == \"skew-(--skew-custom)\"\n\n# Run the test\ntest_transforms_skew_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#transform-utilities",
    "href": "utilities/transforms.html#transform-utilities",
    "title": "transforms",
    "section": "Transform Utilities",
    "text": "Transform Utilities\nControl CSS transform properties:\n\nsource\n\nTransformFactory\n\n TransformFactory (values_dict:Optional[Dict[str,str]]=None,\n                   doc:Optional[str]=None)\n\nFactory for transform utilities with special and custom values.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Transform utilities\nTRANSFORM_VALUES = {\n    \"none\": \"transform-none\",\n    \"gpu\": \"transform-gpu\",\n    \"cpu\": \"transform-cpu\"\n}\n\n\n\nsource\n\n\ntest_transforms_transform_examples\n\n test_transforms_transform_examples ()\n\nTest transform utilities.\n\n\nExported source\ntransform = TransformFactory(TRANSFORM_VALUES, \"Transform utilities for transforming elements\") # The transform factory\n\n\n\n\nExported source\ndef test_transforms_transform_examples():\n    \"\"\"Test transform utilities.\"\"\"\n    # Special values\n    assert str(transform.none) == \"transform-none\"\n    assert str(transform.gpu) == \"transform-gpu\"\n    assert str(transform.cpu) == \"transform-cpu\"\n    \n    # Custom transforms\n    assert transform(\"npu\") == \"transform-npu\"\n    assert transform(\"--custom-value\") == \"transform-(--custom-value)\"\n\n# Run the test\ntest_transforms_transform_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#transform-origin-utilities",
    "href": "utilities/transforms.html#transform-origin-utilities",
    "title": "transforms",
    "section": "Transform Origin Utilities",
    "text": "Transform Origin Utilities\nControl the origin point for transformations:\n\nsource\n\nTransformOriginFactory\n\n TransformOriginFactory (values_dict:Optional[Dict[str,str]]=None,\n                         doc:Optional[str]=None)\n\nFactory for transform origin with both fixed and custom values.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Transform origin positions - combines fixed positions with custom value support\nTRANSFORM_ORIGIN_VALUES = {\n    \"center\": \"origin-center\",\n    \"top\": \"origin-top\",\n    \"top-right\": \"origin-top-right\",\n    \"right\": \"origin-right\",\n    \"bottom-right\": \"origin-bottom-right\",\n    \"bottom\": \"origin-bottom\",\n    \"bottom-left\": \"origin-bottom-left\",\n    \"left\": \"origin-left\",\n    \"top-left\": \"origin-top-left\"\n}\n\n\n\nsource\n\n\ntest_transforms_origin_examples\n\n test_transforms_origin_examples ()\n\nTest transform origin utilities.\n\n\nExported source\norigin = TransformOriginFactory(\n    TRANSFORM_ORIGIN_VALUES, \n    \"Transform origin utilities for specifying the origin for an element's transformations\"\n) # The transform origin factory\n\n\n\n\nExported source\ndef test_transforms_origin_examples():\n    \"\"\"Test transform origin utilities.\"\"\"\n    # Fixed positions\n    assert str(origin.center) == \"origin-center\"\n    assert str(origin.top) == \"origin-top\"\n    assert str(origin.bottom_right) == \"origin-bottom-right\"\n    assert str(origin.top_left) == \"origin-top-left\"\n    \n    # Custom positions\n    assert origin(\"50% 25%\") == \"origin-[50% 25%]\"\n    assert origin(\"10px 20px\") == \"origin-[10px 20px]\"\n    assert origin(\"--custom-origin\") == \"origin-(--custom-origin)\"\n\n# Run the test\ntest_transforms_origin_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#transform-style-utilities",
    "href": "utilities/transforms.html#transform-style-utilities",
    "title": "transforms",
    "section": "Transform Style Utilities",
    "text": "Transform Style Utilities\nControl whether child elements are positioned in 3D space:\n\nsource\n\ntest_transforms_style_examples\n\n test_transforms_style_examples ()\n\nTest transform style utilities.\n\n\nExported source\n# Transform style utilities\nTRANSFORM_STYLE_VALUES = {\n    \"_3d\": \"transform-3d\",\n    \"flat\": \"transform-flat\"\n}\n\ntransform_style = SimpleFactory(TRANSFORM_STYLE_VALUES, \"Transform style utilities for controlling if an element's children are placed in 3D space\") # The transform style factory\n\n\n\n\nExported source\ndef test_transforms_style_examples():\n    \"\"\"Test transform style utilities.\"\"\"\n    assert str(transform_style._3d) == \"transform-3d\"\n    assert str(transform_style.flat) == \"transform-flat\"\n\n# Run the test\ntest_transforms_style_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#translate-utilities",
    "href": "utilities/transforms.html#translate-utilities",
    "title": "transforms",
    "section": "Translate Utilities",
    "text": "Translate Utilities\nControl the translation of elements with support for directional and 3D translations:\n\nsource\n\nTranslateFactory\n\n TranslateFactory ()\n\nFactory for translate utilities with directional and 3D support.\n\nsource\n\n\ntest_transforms_translate_examples\n\n test_transforms_translate_examples ()\n\nTest translate utilities.\n\n\nExported source\ntranslate = TranslateFactory() # The translate factory\n\n\n\n\nExported source\ndef test_transforms_translate_examples():\n    \"\"\"Test translate utilities.\"\"\"\n    # Basic translations\n    assert str(translate(0)) == \"translate-0\"\n    assert str(translate(4)) == \"translate-4\"\n    assert str(translate(8)) == \"translate-8\"\n    assert str(translate(2.5)) == \"translate-2.5\"\n    assert str(translate.px) == \"translate-px\"\n    assert str(translate.full) == \"translate-full\"\n    assert str(translate.none) == \"translate-none\"\n    \n    # Fractions\n    assert str(translate(\"1/2\")) == \"translate-1/2\"\n    assert str(translate(\"3/4\")) == \"translate-3/4\"\n    \n    # Negative translations\n    assert str(translate(4, negative=True)) == \"-translate-4\"\n    assert str(translate.negative(8)) == \"-translate-8\"\n    assert str(translate.negative.full) == \"-translate-full\"\n    assert str(translate.negative(\"1/2\")) == \"-translate-1/2\"\n    \n    # Directional translations\n    assert str(translate.x(4)) == \"translate-x-4\"\n    assert str(translate.y(8)) == \"translate-y-8\"\n    assert str(translate.z(2)) == \"translate-z-2\"\n    assert str(translate.x.full) == \"translate-x-full\"\n    assert str(translate.y(\"1/2\")) == \"translate-y-1/2\"\n    assert str(translate.x.negative(4)) == \"-translate-x-4\"\n    assert str(translate.y.negative.full) == \"-translate-y-full\"\n    \n    # Arbitrary values\n    assert str(translate(\"10px\")) == \"translate-[10px]\"\n    assert str(translate(\"2.5rem\")) == \"translate-[2.5rem]\"\n    assert str(translate(\"--spacing-lg\")) == \"translate-(--spacing-lg)\"\n\n# Run the test\ntest_transforms_translate_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#practical-examples",
    "href": "utilities/transforms.html#practical-examples",
    "title": "transforms",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these transform utilities in real FastHTML components:\n\nsource\n\ntest_transforms_fasthtml_examples\n\n test_transforms_fasthtml_examples ()\n\nTest transform utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_transforms_fasthtml_examples():\n    \"\"\"Test transform utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Button, Card, Img, A\n    from cjm_fasthtml_tailwind.utilities.transitions_and_animation import transition, duration, animate\n    from cjm_fasthtml_tailwind.utilities.layout import position, top, left, display_tw\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    \n    # Hover effect with scale and rotate\n    hover_button = Button(\n        \"Hover Me\",\n        cls=combine_classes(\n            scale_tw(110).hover, \n            rotate(3).hover,\n            transition.transform\n        )\n    )\n    assert hover_button.attrs['class'] == \"hover:scale-110 hover:rotate-3 transition-transform\"\n    \n    # 3D card flip effect\n    flip_card = Div(\n        Div(\n            Div(\"Front\", cls=str(backface.hidden)),\n            Div(\"Back\", cls=combine_classes(backface.hidden, str(rotate.y(180)))),\n            cls=combine_classes(transform_style._3d, transition.transform, duration(700), rotate.y(180).hover)\n        ),\n        cls=combine_classes(perspective.normal)\n    )\n    \n    # Centered modal with translate\n    modal = Div(\n        Div(\n            \"Modal Content\",\n            cls=combine_classes(\n                position.fixed,\n                top(\"1/2\"),\n                left(\"1/2\"),\n                str(translate.x.negative(\"1/2\")),\n                str(translate.y.negative(\"1/2\"))\n            )\n        )\n    )\n    \n    # Skewed section divider\n    skewed_divider = Div(\n        cls=combine_classes(\n            str(skew.y.negative(3)),\n            origin.left,\n            h(24),\n            bg.gray._100\n        )\n    )\n    \n    # Parallax effect element\n    parallax_element = Div(\n        Img(src=\"bg.jpg\"),\n        cls=combine_classes(\n            str(scale_tw(110)),\n            str(translate.y(\"calc(var(--scroll-y) * -0.5)\")),\n            transform.gpu\n        )\n    )\n    \n    # 3D rotating cube\n    cube_face = lambda side: Div(\n        side,\n        cls=combine_classes(\n            position.absolute,\n            w.full,\n            h.full,\n            backface.hidden if side != \"Front\" else \"\"\n        )\n    )\n    \n    cube = Div(\n        cube_face(\"Front\"),\n        cube_face(\"Back\"),\n        cube_face(\"Top\"),\n        cube_face(\"Bottom\"),\n        cube_face(\"Left\"),\n        cube_face(\"Right\"),\n        cls=combine_classes(\n            transform_style._3d,\n            animate(\"spin-3d\")\n        )\n    )\n    \n    # Return all examples in a grid layout\n    return Div(\n        hover_button,\n        flip_card,\n        modal,\n        skewed_divider,\n        parallax_element,\n        cube,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the test\ntest_transforms_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n&lt;button class=\"hover:scale-110 hover:rotate-3 transition-transform\"&gt;Hover Me&lt;/button&gt;  &lt;div class=\"perspective-normal\"&gt;\n    &lt;div class=\"transform-3d transition-transform duration-700 hover:rotate-y-180\"&gt;\n      &lt;div class=\"backface-hidden\"&gt;Front&lt;/div&gt;\n      &lt;div class=\"backface-hidden rotate-y-180\"&gt;Back&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div class=\"fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\"&gt;Modal Content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"-skew-y-3 origin-left h-24 bg-gray-100\"&gt;&lt;/div&gt;\n  &lt;div class=\"scale-110 translate-y-[calc(var(--scroll-y) * -0.5)] transform-gpu\"&gt;\n&lt;img src=\"bg.jpg\"&gt;  &lt;/div&gt;\n  &lt;div class=\"transform-3d animate-spin-3d\"&gt;\n    &lt;div class=\"absolute w-full h-full\"&gt;Front&lt;/div&gt;\n    &lt;div class=\"absolute w-full h-full backface-hidden\"&gt;Back&lt;/div&gt;\n    &lt;div class=\"absolute w-full h-full backface-hidden\"&gt;Top&lt;/div&gt;\n    &lt;div class=\"absolute w-full h-full backface-hidden\"&gt;Bottom&lt;/div&gt;\n    &lt;div class=\"absolute w-full h-full backface-hidden\"&gt;Left&lt;/div&gt;\n    &lt;div class=\"absolute w-full h-full backface-hidden\"&gt;Right&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_transforms_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#helper-functions",
    "href": "utilities/transforms.html#helper-functions",
    "title": "transforms",
    "section": "Helper Functions",
    "text": "Helper Functions\nConvenient functions for common transform patterns:\n\nsource\n\ncenter_transform\n\n center_transform ()\n\nCenter an element using transform translate.\n\nsource\n\n\nhover_scale\n\n hover_scale (scale:int=110)\n\nCreate a hover scale effect.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nscale\nint\n110\nThe scale percentage to apply on hover (e.g., 110 for 110%)\n\n\nReturns\nstr\n\nClasses to create a hover scale effect with transitions\n\n\n\n\nsource\n\n\nflip_card_3d\n\n flip_card_3d (perspective_value:str='normal')\n\nGet classes for a 3D flip card effect.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nperspective_value\nstr\nnormal\nThe perspective value for the 3D effect (e.g., ‘normal’, ‘dramatic’, ‘distant’)\n\n\nReturns\nDict\n\nDictionary with class strings for container, inner, front, and back elements\n\n\n\n\nsource\n\n\nparallax_transform\n\n parallax_transform (speed:float=0.5)\n\nCreate a parallax transform effect.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nspeed\nfloat\n0.5\nThe parallax scroll speed multiplier (e.g., 0.5 for half speed)\n\n\nReturns\nstr\n\nClasses to create a parallax transform effect based on scroll position\n\n\n\n\nsource\n\n\ntest_transforms_helper_examples\n\n test_transforms_helper_examples ()\n\nTest helper functions for common transform patterns.\n\n\nExported source\ndef test_transforms_helper_examples():\n    \"\"\"Test helper functions for common transform patterns.\"\"\"\n    # Test center transform\n    assert center_transform() == \"-translate-x-1/2 -translate-y-1/2\"\n    \n    # Test hover scale\n    assert hover_scale() == \"hover:scale-110 transition-transform\"\n    assert hover_scale(125) == \"hover:scale-125 transition-transform\"\n    \n    # Test flip card 3D\n    flip_classes = flip_card_3d()\n    assert flip_classes[\"container\"] == \"perspective-normal\"\n    assert \"transform-3d\" in flip_classes[\"inner\"]\n    assert flip_classes[\"front\"] == \"backface-hidden\"\n    assert \"backface-hidden\" in flip_classes[\"back\"]\n    assert \"rotate-y-180\" in flip_classes[\"back\"]\n    \n    # Test parallax transform\n    assert \"translate-y-[calc(var(--scroll-y) * -0.5)]\" in parallax_transform()\n    assert \"transform-gpu\" in parallax_transform()\n\n# Run the test\ntest_transforms_helper_examples()",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/transforms.html#export",
    "href": "utilities/transforms.html#export",
    "title": "transforms",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "transforms"
    ]
  },
  {
    "objectID": "utilities/sizing.html",
    "href": "utilities/sizing.html",
    "title": "sizing",
    "section": "",
    "text": "Tailwind CSS provides utilities for setting the width of elements, supporting numeric scales, fractions, named sizes, and special values.\n\n\nExported source\nw = ScaledFactory(\"w\", SIZE_CONFIG, \"Width utilities for setting element width\") # The width factory\n\n\n\n\nSet the width of elements using numeric scales, fractions, or special values:\n\nsource\n\n\n\n\n test_sizing_width_examples ()\n\nTest width utilities with various scales and values.\n\n\nExported source\ndef test_sizing_width_examples(\n):\n    \"\"\"Test width utilities with various scales and values.\"\"\"\n    # Numeric scales\n    assert str(w(0)) == \"w-0\"\n    assert str(w(4)) == \"w-4\"\n    assert str(w(16)) == \"w-16\"\n    assert str(w(64)) == \"w-64\"\n    assert str(w(2.5)) == \"w-2.5\"\n    \n    # Fractions\n    assert str(w(\"1/2\")) == \"w-1/2\"\n    assert str(w(\"1/3\")) == \"w-1/3\"\n    assert str(w(\"2/3\")) == \"w-2/3\"\n    assert str(w(\"3/4\")) == \"w-3/4\"\n    \n    # Special values\n    assert str(w.auto) == \"w-auto\"\n    assert str(w.full) == \"w-full\"\n    assert str(w.screen) == \"w-screen\"\n    assert str(w.px) == \"w-px\"\n\n# Run the tests\ntest_sizing_width_examples()\n\n\n\n\n\nUse container-based named sizes for consistent layouts:\n\nsource\n\n\n\n\n test_sizing_width_named_examples ()\n\nTest width utilities with named container sizes.\n\n\nExported source\ndef test_sizing_width_named_examples(\n):\n    \"\"\"Test width utilities with named container sizes.\"\"\"\n    # Named container sizes\n    assert str(w._3xs) == \"w-3xs\" # (16rem / 256px)\n    assert str(w._2xs) == \"w-2xs\" # (18rem / 288px)\n    assert str(w.xs) == \"w-xs\"   # (20rem / 320px)\n    assert str(w.sm) == \"w-sm\"   # (24rem / 384px)\n    assert str(w.md) == \"w-md\"   # (28rem / 448px)\n    assert str(w.lg) == \"w-lg\"   # (32rem / 512px)\n    assert str(w.xl) == \"w-xl\"   # (36rem / 576px)\n    assert str(w._2xl) == \"w-2xl\" # (42rem / 672px)\n    assert str(w._3xl) == \"w-3xl\" # (48rem / 768px)\n\n# Run the tests\ntest_sizing_width_named_examples()\n\n\n\n\n\nUse viewport-relative widths:\n\nsource\n\n\n\n\n test_sizing_width_viewport_examples ()\n\nTest width utilities with viewport units.\n\n\nExported source\ndef test_sizing_width_viewport_examples(\n):\n    \"\"\"Test width utilities with viewport units.\"\"\"\n    # Viewport width units\n    assert str(w.svw) == \"w-svw\" # (small viewport width)\n    assert str(w.lvw) == \"w-lvw\" # (large viewport width)\n    assert str(w.dvw) == \"w-dvw\" # (dynamic viewport width)\n    \n    # Min/max content\n    assert str(w.min) == \"w-min\"\n    assert str(w.max) == \"w-max\"\n    assert str(w.fit) == \"w-fit\"\n\n# Run the tests\ntest_sizing_width_viewport_examples()\n\n\n\n\n\nUse custom values when needed:\n\nsource\n\n\n\n\n test_sizing_arbitrary_examples ()\n\nTest sizing utilities with arbitrary and custom values.\n\n\nExported source\ndef test_sizing_arbitrary_examples(\n):\n    \"\"\"Test sizing utilities with arbitrary and custom values.\"\"\"\n    # Arbitrary values\n    assert str(w(\"300px\")) == \"w-[300px]\"\n    assert str(w(\"25rem\")) == \"w-[25rem]\"\n    assert str(w(\"50%\")) == \"w-[50%]\"\n    assert str(w(\"calc(100% - 2rem)\")) == \"w-[calc(100% - 2rem)]\"\n    \n    # Custom properties\n    assert str(w(\"--sidebar-width\")) == \"w-(--sidebar-width)\"\n    assert str(w(\"--container-max\")) == \"w-(--container-max)\"\n\n# Run the tests\ntest_sizing_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#width-utilities",
    "href": "utilities/sizing.html#width-utilities",
    "title": "sizing",
    "section": "",
    "text": "Tailwind CSS provides utilities for setting the width of elements, supporting numeric scales, fractions, named sizes, and special values.\n\n\nExported source\nw = ScaledFactory(\"w\", SIZE_CONFIG, \"Width utilities for setting element width\") # The width factory\n\n\n\n\nSet the width of elements using numeric scales, fractions, or special values:\n\nsource\n\n\n\n\n test_sizing_width_examples ()\n\nTest width utilities with various scales and values.\n\n\nExported source\ndef test_sizing_width_examples(\n):\n    \"\"\"Test width utilities with various scales and values.\"\"\"\n    # Numeric scales\n    assert str(w(0)) == \"w-0\"\n    assert str(w(4)) == \"w-4\"\n    assert str(w(16)) == \"w-16\"\n    assert str(w(64)) == \"w-64\"\n    assert str(w(2.5)) == \"w-2.5\"\n    \n    # Fractions\n    assert str(w(\"1/2\")) == \"w-1/2\"\n    assert str(w(\"1/3\")) == \"w-1/3\"\n    assert str(w(\"2/3\")) == \"w-2/3\"\n    assert str(w(\"3/4\")) == \"w-3/4\"\n    \n    # Special values\n    assert str(w.auto) == \"w-auto\"\n    assert str(w.full) == \"w-full\"\n    assert str(w.screen) == \"w-screen\"\n    assert str(w.px) == \"w-px\"\n\n# Run the tests\ntest_sizing_width_examples()\n\n\n\n\n\nUse container-based named sizes for consistent layouts:\n\nsource\n\n\n\n\n test_sizing_width_named_examples ()\n\nTest width utilities with named container sizes.\n\n\nExported source\ndef test_sizing_width_named_examples(\n):\n    \"\"\"Test width utilities with named container sizes.\"\"\"\n    # Named container sizes\n    assert str(w._3xs) == \"w-3xs\" # (16rem / 256px)\n    assert str(w._2xs) == \"w-2xs\" # (18rem / 288px)\n    assert str(w.xs) == \"w-xs\"   # (20rem / 320px)\n    assert str(w.sm) == \"w-sm\"   # (24rem / 384px)\n    assert str(w.md) == \"w-md\"   # (28rem / 448px)\n    assert str(w.lg) == \"w-lg\"   # (32rem / 512px)\n    assert str(w.xl) == \"w-xl\"   # (36rem / 576px)\n    assert str(w._2xl) == \"w-2xl\" # (42rem / 672px)\n    assert str(w._3xl) == \"w-3xl\" # (48rem / 768px)\n\n# Run the tests\ntest_sizing_width_named_examples()\n\n\n\n\n\nUse viewport-relative widths:\n\nsource\n\n\n\n\n test_sizing_width_viewport_examples ()\n\nTest width utilities with viewport units.\n\n\nExported source\ndef test_sizing_width_viewport_examples(\n):\n    \"\"\"Test width utilities with viewport units.\"\"\"\n    # Viewport width units\n    assert str(w.svw) == \"w-svw\" # (small viewport width)\n    assert str(w.lvw) == \"w-lvw\" # (large viewport width)\n    assert str(w.dvw) == \"w-dvw\" # (dynamic viewport width)\n    \n    # Min/max content\n    assert str(w.min) == \"w-min\"\n    assert str(w.max) == \"w-max\"\n    assert str(w.fit) == \"w-fit\"\n\n# Run the tests\ntest_sizing_width_viewport_examples()\n\n\n\n\n\nUse custom values when needed:\n\nsource\n\n\n\n\n test_sizing_arbitrary_examples ()\n\nTest sizing utilities with arbitrary and custom values.\n\n\nExported source\ndef test_sizing_arbitrary_examples(\n):\n    \"\"\"Test sizing utilities with arbitrary and custom values.\"\"\"\n    # Arbitrary values\n    assert str(w(\"300px\")) == \"w-[300px]\"\n    assert str(w(\"25rem\")) == \"w-[25rem]\"\n    assert str(w(\"50%\")) == \"w-[50%]\"\n    assert str(w(\"calc(100% - 2rem)\")) == \"w-[calc(100% - 2rem)]\"\n    \n    # Custom properties\n    assert str(w(\"--sidebar-width\")) == \"w-(--sidebar-width)\"\n    assert str(w(\"--container-max\")) == \"w-(--container-max)\"\n\n# Run the tests\ntest_sizing_arbitrary_examples()",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#height-utilities",
    "href": "utilities/sizing.html#height-utilities",
    "title": "sizing",
    "section": "Height Utilities",
    "text": "Height Utilities\nHeight utilities work exactly like width utilities but control the vertical dimension.\n\n\nExported source\nh = ScaledFactory(\"h\", SIZE_CONFIG, \"Height utilities for setting element height\") # The height factory\n\n\n\nBasic Height\nSet the height of elements using the same scale system as width:\n\nsource\n\n\ntest_sizing_height_examples\n\n test_sizing_height_examples ()\n\nTest height utilities with various scales and values.\n\n\nExported source\ndef test_sizing_height_examples(\n):\n    \"\"\"Test height utilities with various scales and values.\"\"\"\n    # Numeric scales\n    assert str(h(0)) == \"h-0\"\n    assert str(h(16)) == \"h-16\"\n    assert str(h(64)) == \"h-64\"\n    \n    # Fractions\n    assert str(h(\"1/2\")) == \"h-1/2\"\n    assert str(h(\"1/3\")) == \"h-1/3\"\n    \n    # Special values\n    assert str(h.auto) == \"h-auto\"\n    assert str(h.full) == \"h-full\"\n    assert str(h.screen) == \"h-screen\"\n    assert str(h.px) == \"h-px\"\n\n# Run the tests\ntest_sizing_height_examples()\n\n\n\n\nViewport Height Units\nHeight utilities have specific viewport-relative units:\n\nsource\n\n\ntest_sizing_height_viewport_examples\n\n test_sizing_height_viewport_examples ()\n\nTest height utilities with viewport units.\n\n\nExported source\ndef test_sizing_height_viewport_examples(\n):\n    \"\"\"Test height utilities with viewport units.\"\"\"\n    # Viewport height units\n    assert str(h.svh) == \"h-svh\" # (small viewport height)\n    assert str(h.lvh) == \"h-lvh\" # (large viewport height)\n    assert str(h.dvh) == \"h-dvh\" # (dynamic viewport height)\n    \n    # Min/max content\n    assert str(h.min) == \"h-min\"\n    assert str(h.max) == \"h-max\"\n    assert str(h.fit) == \"h-fit\"\n    \n    # Line height unit\n    assert str(h.lh) == \"h-lh\" # (1 line height)\n\n# Run the tests\ntest_sizing_height_viewport_examples()",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#min-width-utilities",
    "href": "utilities/sizing.html#min-width-utilities",
    "title": "sizing",
    "section": "Min-Width Utilities",
    "text": "Min-Width Utilities\nControl the minimum width an element can have.\n\nsource\n\ntest_sizing_min_width_examples\n\n test_sizing_min_width_examples ()\n\nTest min-width utilities.\n\n\nExported source\nmin_w = ScaledFactory(\"min-w\", SIZE_CONFIG, \"Minimum width utilities for setting minimum element width\") # The min-width factory\n\n\n\n\nExported source\ndef test_sizing_min_width_examples(\n):\n    \"\"\"Test min-width utilities.\"\"\"\n    # Numeric scales\n    assert str(min_w(0)) == \"min-w-0\"\n    assert str(min_w(16)) == \"min-w-16\"\n    \n    # Fractions\n    assert str(min_w(\"1/2\")) == \"min-w-1/2\"\n    \n    # Named sizes\n    assert str(min_w.xs) == \"min-w-xs\"\n    assert str(min_w.sm) == \"min-w-sm\"\n    assert str(min_w.lg) == \"min-w-lg\"\n    \n    # Special values\n    assert str(min_w.full) == \"min-w-full\"\n    assert str(min_w.min) == \"min-w-min\"\n    assert str(min_w.max) == \"min-w-max\"\n    assert str(min_w.fit) == \"min-w-fit\"\n\n# Run the tests\ntest_sizing_min_width_examples()",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#max-width-utilities",
    "href": "utilities/sizing.html#max-width-utilities",
    "title": "sizing",
    "section": "Max-Width Utilities",
    "text": "Max-Width Utilities\nControl the maximum width an element can have.\n\nsource\n\ntest_sizing_max_width_examples\n\n test_sizing_max_width_examples ()\n\nTest max-width utilities.\n\n\nExported source\nmax_w = ScaledFactory(\"max-w\", SIZE_CONFIG, \"Maximum width utilities for setting maximum element width\") # The max-width factory\n\n\n\n\nExported source\ndef test_sizing_max_width_examples(\n):\n    \"\"\"Test max-width utilities.\"\"\"\n    # Named sizes (commonly used for content containers)\n    assert str(max_w.xs) == \"max-w-xs\"\n    assert str(max_w.sm) == \"max-w-sm\"\n    assert str(max_w.md) == \"max-w-md\"\n    assert str(max_w.lg) == \"max-w-lg\"\n    assert str(max_w.xl) == \"max-w-xl\"\n    assert str(max_w._2xl) == \"max-w-2xl\"\n    assert str(max_w._3xl) == \"max-w-3xl\"\n    assert str(max_w._4xl) == \"max-w-4xl\"\n    assert str(max_w._5xl) == \"max-w-5xl\"\n    assert str(max_w._6xl) == \"max-w-6xl\"\n    assert str(max_w._7xl) == \"max-w-7xl\"\n    \n    # Special values\n    assert str(max_w.none) == \"max-w-none\" # (default in Tailwind)\n    assert str(max_w.full) == \"max-w-full\"\n    assert str(max_w.min) == \"max-w-min\"\n    assert str(max_w.max) == \"max-w-max\"\n    assert str(max_w.fit) == \"max-w-fit\"\n    assert str(max_w.screen) == \"max-w-screen\"\n\n# Run the tests\ntest_sizing_max_width_examples()\n\n\n\nsource\n\n\ntest_sizing_container_examples\n\n test_sizing_container_examples ()\n\nTest continer utility.\n\n\nExported source\n# Container utility\ncontainer = SingleValueFactory(\n    \"container\",\n    \"Responsive container with breakpoint-based max-widths\"\n)\n\n\n\n\nExported source\ndef test_sizing_container_examples(\n):\n    \"\"\"Test continer utility.\"\"\"\n    # Test that container works with combine_classes\n    result = combine_classes(container, \"mx-auto\", \"px-4\")\n    assert result == \"container mx-auto px-4\"\n    \n    # Test different ways to use container\n    assert str(container) == \"container\"\n    assert str(container()) == \"container\"\n    assert container.build() == \"container\"\n\n# Run the tests\ntest_sizing_container_examples()",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#min-height-utilities",
    "href": "utilities/sizing.html#min-height-utilities",
    "title": "sizing",
    "section": "Min-Height Utilities",
    "text": "Min-Height Utilities\nControl the minimum height an element can have.\n\nsource\n\ntest_sizing_min_height_examples\n\n test_sizing_min_height_examples ()\n\nTest min-height utilities.\n\n\nExported source\nmin_h = ScaledFactory(\"min-h\", SIZE_CONFIG, \"Minimum height utilities for setting minimum element height\") # The min-height factory\n\n\n\n\nExported source\ndef test_sizing_min_height_examples(\n):\n    \"\"\"Test min-height utilities.\"\"\"\n    # Numeric scales\n    assert str(min_h(0)) == \"min-h-0\"\n    assert str(min_h(16)) == \"min-h-16\"\n    \n    # Special values\n    assert str(min_h.full) == \"min-h-full\"\n    assert str(min_h.screen) == \"min-h-screen\"\n    assert str(min_h.px) == \"min-h-px\"\n    \n    # Viewport units\n    assert str(min_h.svh) == \"min-h-svh\"\n    assert str(min_h.lvh) == \"min-h-lvh\"\n    assert str(min_h.dvh) == \"min-h-dvh\"\n\n# Run the tests\ntest_sizing_min_height_examples()",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#max-height-utilities",
    "href": "utilities/sizing.html#max-height-utilities",
    "title": "sizing",
    "section": "Max-Height Utilities",
    "text": "Max-Height Utilities\nControl the maximum height an element can have.\n\n\nExported source\nmax_h = ScaledFactory(\"max-h\", SIZE_CONFIG, \"Maximum height utilities for setting maximum element height\") # The max-height factory",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#size-utilities",
    "href": "utilities/sizing.html#size-utilities",
    "title": "sizing",
    "section": "Size Utilities",
    "text": "Size Utilities\nControl both width and height of an element with a single utility.\n\nsource\n\ntest_sizing_size_util_examples\n\n test_sizing_size_util_examples ()\n\nTest size utilities that set both width and height.\n\n\nExported source\nsize_util = ScaledFactory(\"size\", SIZE_CONFIG, \"Size utilities for setting both width and height simultaneously\") # The size factory (sets both width and height)\n\n\n\n\nExported source\ndef test_sizing_size_util_examples(\n):\n    \"\"\"Test size utilities that set both width and height.\"\"\"\n    # Size utilities set both width and height\n    assert str(size_util(16)) == \"size-16\"\n    assert str(size_util(\"1/2\")) == \"size-1/2\"\n    assert str(size_util.auto) == \"size-auto\"\n    assert str(size_util.px) == \"size-px\"\n    assert str(size_util.full) == \"size-full\"\n    assert str(size_util.min) == \"size-min\"\n    assert str(size_util.max) == \"size-max\"\n    assert str(size_util.fit) == \"size-fit\"\n    \n    # Viewport units (sets square dimensions)\n    assert str(size_util.dvw) == \"size-dvw\"\n    assert str(size_util.dvh) == \"size-dvh\"\n    assert str(size_util.lvw) == \"size-lvw\"\n    assert str(size_util.lvh) == \"size-lvh\"\n    assert str(size_util.svw) == \"size-svw\"\n    assert str(size_util.svh) == \"size-svh\"\n\n# Run the tests\ntest_sizing_size_util_examples()\n\n\n\nsource\n\n\ntest_sizing_max_height_examples\n\n test_sizing_max_height_examples ()\n\nTest max-height utilities.\n\n\nExported source\ndef test_sizing_max_height_examples(\n):\n    \"\"\"Test max-height utilities.\"\"\"\n    # Numeric scales\n    assert str(max_h(0)) == \"max-h-0\"\n    assert str(max_h(16)) == \"max-h-16\"\n    assert str(max_h(64)) == \"max-h-64\"\n    assert str(max_h(96)) == \"max-h-96\"\n    \n    # Special values\n    assert str(max_h.none) == \"max-h-none\"\n    assert str(max_h.full) == \"max-h-full\"\n    assert str(max_h.screen) == \"max-h-screen\"\n    assert str(max_h.px) == \"max-h-px\"\n    \n    # Viewport units\n    assert str(max_h.svh) == \"max-h-svh\"\n    assert str(max_h.lvh) == \"max-h-lvh\"\n    assert str(max_h.dvh) == \"max-h-dvh\"\n\n# Run the tests\ntest_sizing_max_height_examples()",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#practical-examples",
    "href": "utilities/sizing.html#practical-examples",
    "title": "sizing",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these sizing utilities in real FastHTML components:\n\nsource\n\ntest_sizing_fasthtml_examples\n\n test_sizing_fasthtml_examples ()\n\nTest sizing utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_sizing_fasthtml_examples(\n):\n    \"\"\"Test sizing utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Img, Article, Header, Main, Aside\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw, position, object_fit\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, flex_display, grid_display\n    \n    # Card with constrained width\n    card = Div(\n        \"Card content\",\n        cls=combine_classes(w.full, max_w.md, h.auto)\n    )\n    assert card.attrs['class'] == \"w-full max-w-md h-auto\"\n    \n    # Full-screen hero section\n    hero = Div(\n        \"Hero content\",\n        cls=combine_classes(w.full, h.screen, min_h.screen)\n    )\n    assert hero.attrs['class'] == \"w-full h-screen min-h-screen\"\n    \n    # Responsive image container\n    image_container = Div(\n        Img(src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\", cls=combine_classes(w.full, h.full, object_fit.cover)),\n        cls=combine_classes(w(\"1/2\"), h(64), max_h(96))\n    )\n    assert image_container.attrs['class'] == \"w-1/2 h-64 max-h-96\"\n    assert image_container.children[0].attrs['class'] == \"w-full h-full object-cover\"\n    \n    # Layout with sidebar\n    layout = Div(\n        Aside(\"Sidebar\", cls=combine_classes(w(64), min_w(48), h.full)),\n        Main(\"Main content\", cls=combine_classes(w.full, min_h.screen)),\n        cls=str(flex_display)\n    )\n    assert layout.children[0].attrs['class'] == \"w-64 min-w-48 h-full\"\n    assert layout.children[1].attrs['class'] == \"w-full min-h-screen\"\n    \n    # Content container with max width\n    article = Article(\n        Header(\"Article Title\"),\n        Div(\"Article content...\"),\n        cls=combine_classes(w.full, max_w._4xl, m.x.auto, min_h(\"50vh\"))\n    )\n    assert article.attrs['class'] == \"w-full max-w-4xl mx-auto min-h-[50vh]\"\n    \n    # Using the size utility for square elements\n    avatar = Div(\n        Img(src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\", cls=str(rounded.full)),\n        cls=combine_classes(size_util(16), position.relative)\n    )\n    assert avatar.attrs['class'] == \"size-16 relative\"\n    \n    # Using container utility\n    page_container = Div(\n        \"Page content\",\n        cls=combine_classes(container, m.x.auto, p.x(4))\n    )\n    assert page_container.attrs['class'] == \"container mx-auto px-4\"\n    \n    # Return all examples in a grid layout\n    return Div(\n        card,\n        hero,\n        image_container,\n        layout,\n        article,\n        avatar,\n        page_container,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_sizing_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;div class=\"w-full max-w-md h-auto\"&gt;Card content&lt;/div&gt;\n  &lt;div class=\"w-full h-screen min-h-screen\"&gt;Hero content&lt;/div&gt;\n  &lt;div class=\"w-1/2 h-64 max-h-96\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" class=\"w-full h-full object-cover\"&gt;  &lt;/div&gt;\n  &lt;div class=\"flex\"&gt;\n    &lt;aside class=\"w-64 min-w-48 h-full\"&gt;Sidebar&lt;/aside&gt;\n&lt;main class=\"w-full min-h-screen\"&gt;Main content&lt;/main&gt;  &lt;/div&gt;\n  &lt;article class=\"w-full max-w-4xl mx-auto min-h-[50vh]\"&gt;\n    &lt;header&gt;Article Title&lt;/header&gt;\n    &lt;div&gt;Article content...&lt;/div&gt;\n  &lt;/article&gt;\n  &lt;div class=\"size-16 relative\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" class=\"rounded-full\"&gt;  &lt;/div&gt;\n  &lt;div class=\"container mx-auto px-4\"&gt;Page content&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_sizing_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#helper-functions",
    "href": "utilities/sizing.html#helper-functions",
    "title": "sizing",
    "section": "Helper Functions",
    "text": "Helper Functions\nConvenient functions for common sizing patterns:\n\nsource\n\nsize\n\n size (w:Union[int,float,str,NoneType]=None,\n       h:Union[int,float,str,NoneType]=None,\n       min_w:Union[int,float,str,NoneType]=None,\n       max_w:Union[int,float,str,NoneType]=None,\n       min_h:Union[int,float,str,NoneType]=None,\n       max_h:Union[int,float,str,NoneType]=None)\n\nGenerate size classes with a convenient API.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nw\nUnion\nNone\nWidth value\n\n\nh\nUnion\nNone\nHeight value\n\n\nmin_w\nUnion\nNone\nMinimum width\n\n\nmax_w\nUnion\nNone\nMaximum width\n\n\nmin_h\nUnion\nNone\nMinimum height\n\n\nmax_h\nUnion\nNone\nMaximum height\n\n\nReturns\nstr\n\nSpace-separated size classes\n\n\n\n\nsource\n\n\nsquare\n\n square (size:Union[int,float,str])\n\nCreate a square element with equal width and height.\n\n\n\n\nType\nDetails\n\n\n\n\nsize\nUnion\nSize value for both width and height\n\n\nReturns\nstr\nSpace-separated width and height classes\n\n\n\n\nsource\n\n\nfull_size\n\n full_size ()\n\nMake element take full width and height of parent.\n\nsource\n\n\nfull_screen\n\n full_screen ()\n\nMake element take full viewport width and height.\n\nsource\n\n\ntest_sizing_helper_examples\n\n test_sizing_helper_examples ()\n\nTest helper functions for common sizing patterns.\n\n\nExported source\ndef test_sizing_helper_examples(\n):\n    \"\"\"Test helper functions for common sizing patterns.\"\"\"\n    # Test helper functions\n    assert size(w=32, h=16) == \"w-32 h-16\"\n    assert size(w=\"full\", max_w=\"4xl\", min_h=\"50vh\") == \"w-full max-w-4xl min-h-[50vh]\"\n    assert square(16) == \"w-16 h-16\"\n    assert full_size() == \"w-full h-full\"\n    assert full_screen() == \"w-screen h-screen\"\n\n# Run the tests\ntest_sizing_helper_examples()",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/sizing.html#export",
    "href": "utilities/sizing.html#export",
    "title": "sizing",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "sizing"
    ]
  },
  {
    "objectID": "utilities/layout.html",
    "href": "utilities/layout.html",
    "title": "layout",
    "section": "",
    "text": "Tailwind CSS provides utilities for controlling the display box type of an element.\n\nsource\n\n\n\n test_layout_display_examples ()\n\nTest display utilities with various values.\n\n\nExported source\nDISPLAY_VALUES = { # Display utilities for general display types (not flex/grid/table)\n    \"inline\": \"inline\",\n    \"block\": \"block\", \n    \"inline-block\": \"inline-block\",\n    \"flow-root\": \"flow-root\",\n    \"contents\": \"contents\",\n    \"list-item\": \"list-item\",\n    \"hidden\": \"hidden\",\n    \"none\": \"none\"\n}\n\ndisplay_tw = SimpleFactory(DISPLAY_VALUES, \"Display utilities for controlling the display box type of an element\") # The display factory for general display types\n\n\n\n\nExported source\ndef test_layout_display_examples(\n):\n    \"\"\"Test display utilities with various values.\"\"\"\n    # Test display utilities with dot notation\n    assert str(display_tw.block) == \"block\"\n    assert str(display_tw.inline) == \"inline\"\n    assert str(display_tw.hidden) == \"hidden\"\n    assert str(display_tw.inline_block) == \"inline-block\"\n    assert str(display_tw.flow_root) == \"flow-root\"\n    assert str(display_tw.contents) == \"contents\"\n    assert str(display_tw.list_item) == \"list-item\"\n    assert str(display_tw.none) == \"none\"\n\n# Run the tests\ntest_layout_display_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#display-utilities",
    "href": "utilities/layout.html#display-utilities",
    "title": "layout",
    "section": "",
    "text": "Tailwind CSS provides utilities for controlling the display box type of an element.\n\nsource\n\n\n\n test_layout_display_examples ()\n\nTest display utilities with various values.\n\n\nExported source\nDISPLAY_VALUES = { # Display utilities for general display types (not flex/grid/table)\n    \"inline\": \"inline\",\n    \"block\": \"block\", \n    \"inline-block\": \"inline-block\",\n    \"flow-root\": \"flow-root\",\n    \"contents\": \"contents\",\n    \"list-item\": \"list-item\",\n    \"hidden\": \"hidden\",\n    \"none\": \"none\"\n}\n\ndisplay_tw = SimpleFactory(DISPLAY_VALUES, \"Display utilities for controlling the display box type of an element\") # The display factory for general display types\n\n\n\n\nExported source\ndef test_layout_display_examples(\n):\n    \"\"\"Test display utilities with various values.\"\"\"\n    # Test display utilities with dot notation\n    assert str(display_tw.block) == \"block\"\n    assert str(display_tw.inline) == \"inline\"\n    assert str(display_tw.hidden) == \"hidden\"\n    assert str(display_tw.inline_block) == \"inline-block\"\n    assert str(display_tw.flow_root) == \"flow-root\"\n    assert str(display_tw.contents) == \"contents\"\n    assert str(display_tw.list_item) == \"list-item\"\n    assert str(display_tw.none) == \"none\"\n\n# Run the tests\ntest_layout_display_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#position-utilities",
    "href": "utilities/layout.html#position-utilities",
    "title": "layout",
    "section": "Position Utilities",
    "text": "Position Utilities\nControl how an element is positioned in the document.\n\nsource\n\ntest_layout_position_examples\n\n test_layout_position_examples ()\n\nTest position utilities.\n\n\nExported source\nPOSITION_VALUES = { # Position utilities\n    \"static\": \"static\",\n    \"fixed\": \"fixed\",\n    \"absolute\": \"absolute\",\n    \"relative\": \"relative\",\n    \"sticky\": \"sticky\"\n}\n\nposition = SimpleFactory(POSITION_VALUES, \"Position utilities for controlling how an element is positioned in the document\") # The position factory\n\n\n\n\nExported source\ndef test_layout_position_examples(\n):\n    \"\"\"Test position utilities.\"\"\"\n    # Test position utilities with dot notation\n    assert str(position.static) == \"static\"\n    assert str(position.relative) == \"relative\"\n    assert str(position.absolute) == \"absolute\"\n    assert str(position.fixed) == \"fixed\"\n    assert str(position.sticky) == \"sticky\"\n\n# Run the tests\ntest_layout_position_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#inset-utilities-toprightbottomleft",
    "href": "utilities/layout.html#inset-utilities-toprightbottomleft",
    "title": "layout",
    "section": "Inset Utilities (Top/Right/Bottom/Left)",
    "text": "Inset Utilities (Top/Right/Bottom/Left)\nControl the placement of positioned elements.\n\nsource\n\nInsetDirectionalFactory\n\n InsetDirectionalFactory (prefix:str,\n                          config:cjm_fasthtml_tailwind.builders.scales.Sca\n                          leConfig)\n\nSpecial factory for inset utilities that use hyphenated directions.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nprefix\nstr\nThe base prefix (‘inset’)\n\n\nconfig\nScaleConfig\nConfiguration defining valid scales and values\n\n\n\n\nsource\n\n\ntest_layout_inset_examples\n\n test_layout_inset_examples ()\n\nTest inset utilities for positioning elements.\n\n\nExported source\n# Inset utilities (top, right, bottom, left)\ninset = InsetDirectionalFactory(\"inset\", INSET_CONFIG) # The inset factory for positioning\n\n# Individual direction utilities don't need special handling\ntop = ScaledFactory(\"top\", INSET_CONFIG, \"Top position utilities for controlling vertical placement\")\nright = ScaledFactory(\"right\", INSET_CONFIG, \"Right position utilities for controlling horizontal placement\")\nbottom = ScaledFactory(\"bottom\", INSET_CONFIG, \"Bottom position utilities for controlling vertical placement\")\nleft = ScaledFactory(\"left\", INSET_CONFIG, \"Left position utilities for controlling horizontal placement\")\nstart = ScaledFactory(\"start\", INSET_CONFIG, \"Logical start position utilities (left in LTR, right in RTL)\")\nend = ScaledFactory(\"end\", INSET_CONFIG, \"Logical end position utilities (right in LTR, left in RTL)\")\n\n\n\n\nExported source\ndef test_layout_inset_examples(\n):\n    \"\"\"Test inset utilities for positioning elements.\"\"\"\n    # Test inset utilities\n    assert str(inset(0)) == \"inset-0\"\n    assert str(inset(4)) == \"inset-4\"\n    assert str(inset(\"1/2\")) == \"inset-1/2\"\n    assert str(inset.auto) == \"inset-auto\"\n    assert str(inset.full) == \"inset-full\"\n    assert str(inset.negative(4)) == \"-inset-4\"\n    \n    # Test directional inset\n    assert str(inset.x(4)) == \"inset-x-4\"\n    assert str(inset.y(8)) == \"inset-y-8\"\n    \n    # Test individual directions\n    assert str(top(0)) == \"top-0\"\n    assert str(right(4)) == \"right-4\"\n    assert str(bottom.auto) == \"bottom-auto\"\n    assert str(left.negative(2)) == \"-left-2\"\n\n# Run the tests\ntest_layout_inset_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#overflow-utilities",
    "href": "utilities/layout.html#overflow-utilities",
    "title": "layout",
    "section": "Overflow Utilities",
    "text": "Overflow Utilities\nControl how an element handles content that is too large for the container.\n\nsource\n\nOverflowFactory\n\n OverflowFactory ()\n\nFactory for overflow utilities with directional support.\n\n\nExported source\nOVERFLOW_VALUES = [\"auto\", \"hidden\", \"clip\", \"visible\", \"scroll\"] # Overflow values\n\n\n\nsource\n\n\ntest_layout_overflow_examples\n\n test_layout_overflow_examples ()\n\nTest overflow utilities for content handling.\n\n\nExported source\noverflow = OverflowFactory() # The overflow factory\n\n\n\n\nExported source\ndef test_layout_overflow_examples(\n):\n    \"\"\"Test overflow utilities for content handling.\"\"\"\n    # Test overflow utilities\n    assert str(overflow.auto) == \"overflow-auto\"\n    assert str(overflow.hidden) == \"overflow-hidden\"\n    assert str(overflow.visible) == \"overflow-visible\"\n    \n    # Directional overflow utilities\n    assert str(overflow.x.auto) == \"overflow-x-auto\"\n    assert str(overflow.y.scroll) == \"overflow-y-scroll\"\n    assert str(overflow.x.visible) == \"overflow-x-visible\"\n    assert str(overflow.y.visible) == \"overflow-y-visible\"\n    assert str(overflow.y.clip) == \"overflow-y-clip\"\n\n# Run the tests\ntest_layout_overflow_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#z-index-utilities",
    "href": "utilities/layout.html#z-index-utilities",
    "title": "layout",
    "section": "Z-Index Utilities",
    "text": "Z-Index Utilities\nControl the stack order of an element.\n\nsource\n\ntest_layout_z_index_examples\n\n test_layout_z_index_examples ()\n\nTest z-index utilities for stack ordering.\n\n\nExported source\nZ_INDEX_CONFIG = ScaleConfig( # Z-index configuration\n    numeric=True,  # Support numeric values 0-50\n    decimals=False,\n    fractions=False,\n    named=None,\n    special={\n        \"auto\": \"auto\"\n    },\n    negative=True  # Support negative z-index\n)\n\n# Create z-index factory\nz = ScaledFactory(\"z\", Z_INDEX_CONFIG, \"Z-index utilities for controlling the stack order of an element\") # The z-index factory\n\n\n\n\nExported source\ndef test_layout_z_index_examples(\n):\n    \"\"\"Test z-index utilities for stack ordering.\"\"\"\n    # Test z-index utilities\n    assert str(z(0)) == \"z-0\"\n    assert str(z(10)) == \"z-10\"\n    assert str(z(20)) == \"z-20\"\n    assert str(z(50)) == \"z-50\"\n    assert str(z.auto) == \"z-auto\"\n    assert str(z.negative(10)) == \"-z-10\"\n    assert str(z(\"999\")) == \"z-[999]\" # (string number without units)\n    assert str(z(\"[999]\")) == \"z-[999]\" # (explicit arbitrary value)\n\n# Run the tests\ntest_layout_z_index_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#float-utilities",
    "href": "utilities/layout.html#float-utilities",
    "title": "layout",
    "section": "Float Utilities",
    "text": "Float Utilities\nControl the wrapping of content around an element.\n\n\nExported source\n# Float utilities\nFLOAT_VALUES = {\n    \"right\": \"float-right\",\n    \"left\": \"float-left\",\n    \"start\": \"float-start\",\n    \"end\": \"float-end\",\n    \"none\": \"float-none\"\n}\n\nfloat_tw = SimpleFactory(FLOAT_VALUES, \"Float utilities for controlling the wrapping of content around an element\")  # Renamed to avoid conflict with Python's float",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#clear-utilities",
    "href": "utilities/layout.html#clear-utilities",
    "title": "layout",
    "section": "Clear Utilities",
    "text": "Clear Utilities\nControl the wrapping behavior of an element after floating elements.\n\nsource\n\ntest_layout_float_clear_examples\n\n test_layout_float_clear_examples ()\n\nTest float and clear utilities for content wrapping.\n\n\nExported source\n# Clear utilities\nCLEAR_VALUES = {\n    \"left\": \"clear-left\",\n    \"right\": \"clear-right\",\n    \"both\": \"clear-both\",\n    \"start\": \"clear-start\",\n    \"end\": \"clear-end\",\n    \"none\": \"clear-none\"\n}\n\n# Create clear factory\nclear = SimpleFactory(CLEAR_VALUES, \"Clear utilities for controlling wrapping behavior after floating elements\") # The clear factory\n\n\n\n\nExported source\ndef test_layout_float_clear_examples(\n):\n    \"\"\"Test float and clear utilities for content wrapping.\"\"\"\n    # Test float utilities\n    assert str(float_tw.right) == \"float-right\"\n    assert str(float_tw.left) == \"float-left\"\n    assert str(float_tw.start) == \"float-start\"\n    assert str(float_tw.end) == \"float-end\"\n    assert str(float_tw.none) == \"float-none\"\n    \n    # Test clear utilities\n    assert str(clear.left) == \"clear-left\"\n    assert str(clear.right) == \"clear-right\"\n    assert str(clear.both) == \"clear-both\"\n    assert str(clear.start) == \"clear-start\"\n    assert str(clear.end) == \"clear-end\"\n    assert str(clear.none) == \"clear-none\"\n\n# Run the tests\ntest_layout_float_clear_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#object-fit-utilities",
    "href": "utilities/layout.html#object-fit-utilities",
    "title": "layout",
    "section": "Object Fit Utilities",
    "text": "Object Fit Utilities\nControl how a replaced element’s content should be resized.\n\n\nExported source\n# Object fit utilities\nOBJECT_FIT_VALUES = {\n    \"contain\": \"object-contain\",\n    \"cover\": \"object-cover\",\n    \"fill\": \"object-fill\",\n    \"none\": \"object-none\",\n    \"scale-down\": \"object-scale-down\"\n}\n\n# Create object fit factory\nobject_fit = SimpleFactory(OBJECT_FIT_VALUES, \"Object fit utilities for controlling how replaced element content should be resized\") # The object fit factory",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#object-position-utilities",
    "href": "utilities/layout.html#object-position-utilities",
    "title": "layout",
    "section": "Object Position Utilities",
    "text": "Object Position Utilities\nControl how a replaced element’s content should be positioned within its container.\n\nsource\n\nObjectPositionFactory\n\n ObjectPositionFactory (values_dict:Optional[Dict[str,str]]=None,\n                        doc:Optional[str]=None)\n\nFactory for object position with both fixed and custom values.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Object position utilities - combines fixed positions with custom value support\nOBJECT_POSITION_VALUES = {\n    \"top-left\": \"object-top-left\",\n    \"top\": \"object-top\",\n    \"top-right\": \"object-top-right\",\n    \"left\": \"object-left\",\n    \"center\": \"object-center\",\n    \"right\": \"object-right\",\n    \"bottom-left\": \"object-bottom-left\",\n    \"bottom\": \"object-bottom\",\n    \"bottom-right\": \"object-bottom-right\"\n}\n\n\n\nsource\n\n\ntest_layout_object_examples\n\n test_layout_object_examples ()\n\nTest object fit and position utilities.\n\n\nExported source\n# Create object position factory\nobject_position = ObjectPositionFactory(\n    OBJECT_POSITION_VALUES, \n    \"Object position utilities for controlling content positioning within its container\"\n) # The object position factory\n\n\n\n\nExported source\ndef test_layout_object_examples(\n):\n    \"\"\"Test object fit and position utilities.\"\"\"\n    # Test object fit utilities\n    assert str(object_fit.contain) == \"object-contain\"\n    assert str(object_fit.cover) == \"object-cover\"\n    assert str(object_fit.fill) == \"object-fill\"\n    assert str(object_fit.none) == \"object-none\"\n    assert str(object_fit.scale_down) == \"object-scale-down\"\n    \n    # Test object position utilities with dot notation\n    assert str(object_position.center) == \"object-center\"\n    assert str(object_position.top) == \"object-top\"\n    assert str(object_position.bottom_right) == \"object-bottom-right\"\n    assert str(object_position(\"50% 25%\")) == \"object-[50% 25%]\"\n    assert str(object_position(\"--custom-position\")) == \"object-(--custom-position)\"\n\n# Run the tests\ntest_layout_object_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#visibility-utilities",
    "href": "utilities/layout.html#visibility-utilities",
    "title": "layout",
    "section": "Visibility Utilities",
    "text": "Visibility Utilities\nControl the visibility of an element.\n\n\nExported source\n# Visibility utilities\nVISIBILITY_VALUES = {\n    \"visible\": \"visible\",\n    \"invisible\": \"invisible\",\n    \"collapse\": \"collapse\"\n}\n\n# Create visibility factory\nvisibility = SimpleFactory(VISIBILITY_VALUES, \"Visibility utilities for controlling the visibility of an element\") # The visibility factory",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#box-sizing-utilities",
    "href": "utilities/layout.html#box-sizing-utilities",
    "title": "layout",
    "section": "Box Sizing Utilities",
    "text": "Box Sizing Utilities\nControl how the browser should calculate an element’s total size.\n\nsource\n\ntest_layout_visibility_examples\n\n test_layout_visibility_examples ()\n\nTest visibility and box sizing utilities.\n\n\nExported source\n# Box sizing utilities\nBOX_SIZING_VALUES = {\n    \"border\": \"box-border\",\n    \"content\": \"box-content\"\n}\n\n# Create box sizing factory\nbox = SimpleFactory(BOX_SIZING_VALUES, \"Box sizing utilities for controlling how the browser calculates element size\") # The box sizing factory\n\n\n\n\nExported source\ndef test_layout_visibility_examples(\n):\n    \"\"\"Test visibility and box sizing utilities.\"\"\"\n    # Test visibility utilities\n    assert str(visibility.visible) == \"visible\"\n    assert str(visibility.invisible) == \"invisible\"\n    assert str(visibility.collapse) == \"collapse\"\n    \n    # Test box sizing utilities\n    assert str(box.border) == \"box-border\"\n    assert str(box.content) == \"box-content\"\n\n# Run the tests\ntest_layout_visibility_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#isolation-utilities",
    "href": "utilities/layout.html#isolation-utilities",
    "title": "layout",
    "section": "Isolation Utilities",
    "text": "Isolation Utilities\nControl whether an element should explicitly create a new stacking context.\n\n\nExported source\n# Isolation utilities\nISOLATION_VALUES = {\n    \"isolate\": \"isolate\",\n    \"auto\": \"isolation-auto\"\n}\n\n# Create isolation factory\nisolation = SimpleFactory(ISOLATION_VALUES, \"Isolation utilities for creating a new stacking context\") # The isolation factory",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#aspect-ratio-utilities",
    "href": "utilities/layout.html#aspect-ratio-utilities",
    "title": "layout",
    "section": "Aspect Ratio Utilities",
    "text": "Aspect Ratio Utilities\nControl the aspect ratio of an element.\n\nsource\n\nAspectRatioFactory\n\n AspectRatioFactory (values_dict:Optional[Dict[str,str]]=None,\n                     doc:Optional[str]=None)\n\nFactory for aspect ratio with both fixed and custom values.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalues_dict\nOptional\nNone\nDictionary mapping attribute names to CSS values\n\n\ndoc\nOptional\nNone\nOptional documentation string\n\n\n\n\n\nExported source\n# Aspect ratio utilities - fixed values with custom ratio support\nASPECT_RATIO_VALUES = {\n    \"auto\": \"aspect-auto\",\n    \"square\": \"aspect-square\",\n    \"video\": \"aspect-video\"\n}\n\n\n\nsource\n\n\ntest_layout_aspect_columns_examples\n\n test_layout_aspect_columns_examples ()\n\nTest aspect ratio and columns utilities.\n\n\nExported source\n# Create aspect ratio factory\naspect = AspectRatioFactory(ASPECT_RATIO_VALUES, \"Aspect ratio utilities for controlling element proportions\") # The aspect ratio factory\n\n\n\n\nExported source\ndef test_layout_aspect_columns_examples(\n):\n    \"\"\"Test aspect ratio and columns utilities.\"\"\"\n    # Test aspect ratio utilities with dot notation\n    assert str(aspect.auto) == \"aspect-auto\"\n    assert str(aspect.square) == \"aspect-square\"\n    assert str(aspect.video) == \"aspect-video\"\n    assert str(aspect(\"16/9\")) == \"aspect-16/9\"\n    assert str(aspect(\"4/3\")) == \"aspect-4/3\"\n    assert str(aspect(\"--custom\")) == \"aspect-(--custom)\"\n\n# Run the tests\ntest_layout_aspect_columns_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#columns-utilities",
    "href": "utilities/layout.html#columns-utilities",
    "title": "layout",
    "section": "Columns Utilities",
    "text": "Columns Utilities\nControl the number of columns within an element.\n\nsource\n\ntest_layout_columns_examples\n\n test_layout_columns_examples ()\n\nTest columns utilities.\n\n\nExported source\nCOLUMNS_CONFIG = ScaleConfig( # Columns configuration with container sizes\n    numeric=True,  # Support columns-1 through columns-12\n    decimals=False,\n    fractions=False,\n    named=CONTAINER_SCALES,  # Use all container scales (3xs through 7xl)\n    special={\n        \"auto\": \"auto\"\n    },\n    negative=False\n)\n\n# Create columns factory\ncolumns = ScaledFactory(\"columns\", COLUMNS_CONFIG, \"Columns utilities for controlling the number of columns within an element\") # The columns factory\n\n\n\n\nExported source\ndef test_layout_columns_examples(\n):\n    \"\"\"Test columns utilities.\"\"\"\n    # Test columns utilities\n    assert str(columns(1)) == \"columns-1\"\n    assert str(columns(2)) == \"columns-2\"\n    assert str(columns(3)) == \"columns-3\"\n    assert str(columns.auto) == \"columns-auto\"\n    assert str(columns.xs) == \"columns-xs\"\n    assert str(columns.sm) == \"columns-sm\"\n    assert str(columns.lg) == \"columns-lg\"\n    assert str(columns._3xl) == \"columns-3xl\"\n    assert str(columns._4xl) == \"columns-4xl\"\n    assert str(columns._5xl) == \"columns-5xl\"\n    assert str(columns._6xl) == \"columns-6xl\"\n    assert str(columns._7xl) == \"columns-7xl\"\n\n# Run the tests\ntest_layout_columns_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#break-utilities",
    "href": "utilities/layout.html#break-utilities",
    "title": "layout",
    "section": "Break Utilities",
    "text": "Break Utilities\nControl column and page breaks.\n\nsource\n\nBreakFactory\n\n BreakFactory ()\n\nFactory for break utilities with before, after, and inside sub-factories.\n\n\nExported source\n# Break utilities - organized by type\nBREAK_BEFORE_VALUES = {\n    \"auto\": \"break-before-auto\",\n    \"avoid\": \"break-before-avoid\",\n    \"all\": \"break-before-all\",\n    \"avoid-page\": \"break-before-avoid-page\",\n    \"page\": \"break-before-page\",\n    \"left\": \"break-before-left\",\n    \"right\": \"break-before-right\",\n    \"column\": \"break-before-column\"\n}\n\nBREAK_AFTER_VALUES = {\n    \"auto\": \"break-after-auto\",\n    \"avoid\": \"break-after-avoid\",\n    \"all\": \"break-after-all\",\n    \"avoid-page\": \"break-after-avoid-page\",\n    \"page\": \"break-after-page\",\n    \"left\": \"break-after-left\",\n    \"right\": \"break-after-right\",\n    \"column\": \"break-after-column\"\n}\n\nBREAK_INSIDE_VALUES = {\n    \"auto\": \"break-inside-auto\",\n    \"avoid\": \"break-inside-avoid\",\n    \"avoid-page\": \"break-inside-avoid-page\",\n    \"avoid-column\": \"break-inside-avoid-column\"\n}\n\n\n\n\nExported source\n# Create the break factory\nbreak_util = BreakFactory() # The break factory",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#box-decoration-break-utilities",
    "href": "utilities/layout.html#box-decoration-break-utilities",
    "title": "layout",
    "section": "Box Decoration Break Utilities",
    "text": "Box Decoration Break Utilities\nControl how element fragments should be rendered across multiple lines, columns, or pages.\n\n\nExported source\n# Box decoration break utilities\nBOX_DECORATION_VALUES = {\n    \"clone\": \"box-decoration-clone\",\n    \"slice\": \"box-decoration-slice\"\n}\n\n# Create box decoration factory\nbox_decoration = SimpleFactory(\n    BOX_DECORATION_VALUES, \n    \"Box decoration break utilities for controlling element fragment rendering across breaks\"\n) # The box decoration factory",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#overscroll-behavior-utilities",
    "href": "utilities/layout.html#overscroll-behavior-utilities",
    "title": "layout",
    "section": "Overscroll Behavior Utilities",
    "text": "Overscroll Behavior Utilities\nControl how the browser behaves when reaching the boundary of a scrolling area.\n\nsource\n\nOverscrollFactory\n\n OverscrollFactory ()\n\nFactory for overscroll behavior utilities with directional support.\n\n\nExported source\n# Overscroll behavior values\nOVERSCROLL_VALUES = [\"auto\", \"contain\", \"none\"]\n\n\n\nsource\n\n\ntest_layout_other_utilities_examples\n\n test_layout_other_utilities_examples ()\n\nTest isolation, break, box decoration, and overscroll utilities.\n\n\nExported source\n# Create the overscroll factory\noverscroll = OverscrollFactory() # The overscroll factory\n\n\n\n\nExported source\ndef test_layout_other_utilities_examples(\n):\n    \"\"\"Test isolation, break, box decoration, and overscroll utilities.\"\"\"\n    # Test isolation utilities\n    assert str(isolation.isolate) == \"isolate\"\n    assert str(isolation.auto) == \"isolation-auto\"\n    \n    # Test break utilities\n    assert str(break_util.before.auto) == \"break-before-auto\"\n    assert str(break_util.before.page) == \"break-before-page\"\n    assert str(break_util.after.column) == \"break-after-column\"\n    assert str(break_util.inside.avoid) == \"break-inside-avoid\"\n    \n    # Test box decoration break utilities\n    assert str(box_decoration.clone) == \"box-decoration-clone\"\n    assert str(box_decoration.slice) == \"box-decoration-slice\"\n    \n    # Test overscroll behavior utilities\n    assert str(overscroll.auto) == \"overscroll-auto\"\n    assert str(overscroll.contain) == \"overscroll-contain\"\n    assert str(overscroll.none) == \"overscroll-none\"\n    assert str(overscroll.x.auto) == \"overscroll-x-auto\"\n    assert str(overscroll.y.contain) == \"overscroll-y-contain\"\n\n# Run the tests\ntest_layout_other_utilities_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#practical-examples",
    "href": "utilities/layout.html#practical-examples",
    "title": "layout",
    "section": "Practical Examples",
    "text": "Practical Examples\nLet’s see how to use these layout utilities in real FastHTML components:\n\nsource\n\ntest_layout_fasthtml_examples\n\n test_layout_fasthtml_examples ()\n\nTest layout utilities in practical FastHTML component examples.\n\n\nExported source\ndef test_layout_fasthtml_examples(\n):\n    \"\"\"Test layout utilities in practical FastHTML component examples.\"\"\"\n    from fasthtml.common import Div, Img, Header, Nav, Main, Section, Article, Aside\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import items, justify, gap, flex_display, grid_display\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    \n    # Fixed header with z-index\n    header = Header(\n        Nav(\"Navigation\"),\n        cls=combine_classes(position.fixed, top(0), left(0), right(0), z(50), bg.white)\n    )\n    assert header.attrs['class'] == \"fixed top-0 left-0 right-0 z-50 bg-white\"\n    \n    # Sticky sidebar with scroll\n    sidebar = Aside(\n        \"Sidebar content\",\n        cls=combine_classes(position.sticky, top(20), h.screen, overflow.y.auto)\n    )\n    assert sidebar.attrs['class'] == \"sticky top-20 h-screen overflow-y-auto\"\n    \n    # Modal overlay with z-index\n    modal_overlay = Div(\n        Div(\"Modal content\", cls=combine_classes(position.relative, z(10))),\n        cls=combine_classes(position.fixed, inset(0), z(40), flex_display, items.center, justify.center, bg.black.opacity(50))\n    )\n    assert modal_overlay.attrs['class'] == \"fixed inset-0 z-40 flex items-center justify-center bg-black/50\"\n    assert modal_overlay.children[0].attrs['class'] == \"relative z-10\"\n    \n    # Image with aspect ratio and object fit\n    image_container = Div(\n        Img(src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\", cls=combine_classes(object_fit.cover, object_position.center, w.full, h.full)),\n        cls=combine_classes(aspect.video, overflow.hidden, rounded.lg)\n    )\n    assert image_container.attrs['class'] == \"aspect-video overflow-hidden rounded-lg\"\n    assert image_container.children[0].attrs['class'] == \"object-cover object-center w-full h-full\"\n    \n    # Multi-column layout\n    # Note: 'prose' is from Tailwind Typography plugin and doesn't have a factory yet\n    article = Article(\n        \"Lorem ipsum dolor sit amet...\",\n        cls=combine_classes(columns(2), gap(8), \"prose\")\n    )\n    assert article.attrs['class'] == \"columns-2 gap-8 prose\"\n    \n    # Return all examples in a grid layout\n    return Div(\n        header,\n        sidebar,\n        modal_overlay,\n        image_container,\n        article,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_layout_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;header class=\"fixed top-0 left-0 right-0 z-50 bg-white\"&gt;\n    &lt;nav&gt;Navigation&lt;/nav&gt;\n  &lt;/header&gt;\n  &lt;aside class=\"sticky top-20 h-screen overflow-y-auto\"&gt;Sidebar content&lt;/aside&gt;\n  &lt;div class=\"fixed inset-0 z-40 flex items-center justify-center bg-black/50\"&gt;\n    &lt;div class=\"relative z-10\"&gt;Modal content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"aspect-video overflow-hidden rounded-lg\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" class=\"object-cover object-center w-full h-full\"&gt;  &lt;/div&gt;\n  &lt;article class=\"columns-2 gap-8 prose\"&gt;Lorem ipsum dolor sit amet...&lt;/article&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_layout_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_layout_enhanced_factories_fasthtml_examples\n\n test_layout_enhanced_factories_fasthtml_examples ()\n\nTest enhanced factories with modifier support in practical examples.\n\n\nExported source\ndef test_layout_enhanced_factories_fasthtml_examples(\n):\n    \"\"\"Test enhanced factories with modifier support in practical examples.\"\"\"\n    from fasthtml.common import Div, Nav, Button, Span\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display\n    from cjm_fasthtml_tailwind.utilities.accessibility import sr_only\n    \n    # Mobile navigation with responsive display\n    mobile_nav = Nav(\n        Button(\"Menu\", cls=\"md:hidden\"),\n        Div(\n            \"Navigation items\",\n            cls=combine_classes(\n                display_tw.none.md,  # Hidden by default, shown on md+\n                position.fixed.md,   # Fixed position on larger screens\n                \"w-full md:w-auto\"\n            )\n        )\n    )\n    assert \"md:none\" in mobile_nav.children[1].attrs['class']\n    assert \"md:fixed\" in mobile_nav.children[1].attrs['class']\n    \n    # Dropdown menu with hover states\n    dropdown = Div(\n        Button(\"Options\", cls=\"relative\"),\n        Div(\n            \"Dropdown content\",\n            cls=combine_classes(\n                display_tw.none.group(\"hover\"),  # Show on parent hover\n                position.absolute,\n                \"mt-2 bg-white shadow-lg\"\n            )\n        ),\n        cls=\"group relative\"\n    )\n    assert \"group-hover:none\" in dropdown.children[1].attrs['class']\n    \n    # Accessible skip link\n    skip_link = Div(\n        \"Skip to content\",\n        cls=combine_classes(\n            sr_only.focus,           # Hidden but shown on focus\n            position.absolute.focus, # Position when focused\n            \"top-4 left-4 bg-white p-2 z-50\"\n        )\n    )\n    assert \"focus:sr-only\" in skip_link.attrs['class']\n    assert \"focus:absolute\" in skip_link.attrs['class']\n    \n    # Responsive overflow handling\n    table_container = Div(\n        \"Table content\",\n        cls=combine_classes(\n            overflow.x.auto,              # Always allow horizontal scroll\n            overflow.y.hidden.md,         # Hide vertical scroll on medium+\n            \"border rounded\"\n        )\n    )\n    assert \"overflow-x-auto\" in table_container.attrs['class']\n    assert \"md:overflow-y-hidden\" in table_container.attrs['class']\n\n    return Div(\n        mobile_nav,\n        dropdown,\n        skip_link,\n        table_container,\n        cls=combine_classes(grid_display, gap(5))\n    )\n\n# Run the tests\ntest_layout_enhanced_factories_fasthtml_examples()\n\n\n&lt;div class=\"grid gap-5\"&gt;\n  &lt;nav&gt;\n&lt;button class=\"md:hidden\"&gt;Menu&lt;/button&gt;    &lt;div class=\"md:none md:fixed w-full md:w-auto\"&gt;Navigation items&lt;/div&gt;\n  &lt;/nav&gt;\n  &lt;div class=\"group relative\"&gt;\n&lt;button class=\"relative\"&gt;Options&lt;/button&gt;    &lt;div class=\"group-hover:none absolute mt-2 bg-white shadow-lg\"&gt;Dropdown content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"focus:sr-only focus:absolute top-4 left-4 bg-white p-2 z-50\"&gt;Skip to content&lt;/div&gt;\n  &lt;div class=\"overflow-x-auto md:overflow-y-hidden border rounded\"&gt;Table content&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_layout_enhanced_factories_fasthtml_examples\napp, rt = create_test_app()\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_layout_modifier_examples\n\n test_layout_modifier_examples ()\n\nTest layout utilities with modifiers for conditional styling.\n\n\nExported source\ndef test_layout_modifier_examples(\n):\n    \"\"\"Test layout utilities with modifiers for conditional styling.\"\"\"\n    # Test display utilities with modifiers (now supported!)\n    assert str(display_tw.hidden) == \"hidden\"\n    assert str(display_tw.block) == \"block\"\n    assert str(display_tw.hidden.hover) == \"hover:hidden\"\n    assert str(display_tw.block.md) == \"md:block\"\n    assert str(display_tw.none.dark) == \"dark:none\"\n    \n    # Test position utilities with modifiers (now supported!)\n    assert str(position.fixed) == \"fixed\"\n    assert str(position.absolute.hover) == \"hover:absolute\"\n    assert str(position.relative.lg) == \"lg:relative\"\n    assert str(position.sticky.md.dark) == \"dark:md:sticky\"\n    \n    # Test inset utilities with modifiers (these already supported modifiers)\n    assert str(inset(0).hover) == \"hover:inset-0\"\n    assert str(top(4).md) == \"md:top-4\"\n    assert str(bottom.auto.lg) == \"lg:bottom-auto\"\n    assert str(left.negative(2).hover) == \"hover:-left-2\"\n    \n    # Test z-index with modifiers\n    assert str(z(10).hover) == \"hover:z-10\"\n    assert str(z(50).lg) == \"lg:z-50\"\n    assert str(z.auto.dark) == \"dark:z-auto\"\n    \n    # Test overflow utilities with modifiers (now supported!)\n    assert str(overflow.hidden) == \"overflow-hidden\"\n    assert str(overflow.auto.hover) == \"hover:overflow-auto\"\n    assert str(overflow.x.scroll.md) == \"md:overflow-x-scroll\"\n    assert str(overflow.y.hidden.dark) == \"dark:overflow-y-hidden\"\n    \n    # Test float utilities with modifiers (now supported!)\n    assert str(float_tw.right) == \"float-right\"\n    assert str(float_tw.left.hover) == \"hover:float-left\"\n    assert str(float_tw.none.lg) == \"lg:float-none\"\n    \n    # Test clear utilities with modifiers (now supported!)\n    assert str(clear.both) == \"clear-both\"\n    assert str(clear.left.md) == \"md:clear-left\"\n    assert str(clear.none.hover) == \"hover:clear-none\"\n    \n    # Test responsive inset\n    assert str(inset.x(4).sm) == \"sm:inset-x-4\"\n    assert str(inset.y(8).md) == \"md:inset-y-8\"\n    \n    # Test group/peer modifiers\n    assert str(z(20).group(\"hover\")) == \"group-hover:z-20\"\n    assert str(position.fixed.group(\"focus\")) == \"group-focus:fixed\"\n    assert str(display_tw.none.peer(\"checked\")) == \"peer-checked:none\"\n    \n    # Test arbitrary modifiers\n    assert str(top(0).aria(\"expanded\")) == \"aria-expanded:top-0\"\n    assert str(position.absolute.data(\"open\")) == \"data-[open]:absolute\"\n    assert str(display_tw.block.has(\":checked\")) == \"has-[:checked]:block\"\n\n# Run the tests\ntest_layout_modifier_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#helper-functions",
    "href": "utilities/layout.html#helper-functions",
    "title": "layout",
    "section": "Helper Functions",
    "text": "Helper Functions\nConvenient functions for common layout patterns:\n\nsource\n\ncenter_absolute\n\n center_absolute ()\n\nCenter an absolutely positioned element.\n\nsource\n\n\nstack_context\n\n stack_context (z_value:int=10)\n\nCreate a stacking context with z-index.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nz_value\nint\n10\nThe z-index value for the stacking context\n\n\nReturns\nstr\n\nCombined CSS classes for creating a stacking context\n\n\n\n\nsource\n\n\nsticky_top\n\n sticky_top (offset:Union[int,float,str]=0)\n\nMake element sticky at top with optional offset.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\noffset\nUnion\n0\nTop offset value (e.g., 0, 4, ‘1rem’)\n\n\nReturns\nstr\n\nCombined CSS classes for sticky positioning\n\n\n\n\nsource\n\n\nfull_bleed\n\n full_bleed ()\n\nMake element break out of container constraints.\n\nsource\n\n\ntest_layout_helper_examples\n\n test_layout_helper_examples ()\n\nTest helper functions for common layout patterns.\n\n\nExported source\ndef test_layout_helper_examples(\n):\n    \"\"\"Test helper functions for common layout patterns.\"\"\"\n    # Test helper functions\n    assert center_absolute() == \"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\"\n    assert stack_context(20) == \"relative z-20\"\n    assert sticky_top(4) == \"sticky top-4\"\n    assert full_bleed() == \"relative left-1/2 right-1/2 -mx-[50vw] w-screen\"\n\n# Run the tests\ntest_layout_helper_examples()",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "utilities/layout.html#export",
    "href": "utilities/layout.html#export",
    "title": "layout",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "utilities",
      "layout"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cjm-fasthtml-tailwind",
    "section": "",
    "text": "pip install cjm-fasthtml-tailwind",
    "crumbs": [
      "cjm-fasthtml-tailwind"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cjm-fasthtml-tailwind",
    "section": "",
    "text": "pip install cjm-fasthtml-tailwind",
    "crumbs": [
      "cjm-fasthtml-tailwind"
    ]
  },
  {
    "objectID": "index.html#project-structure",
    "href": "index.html#project-structure",
    "title": "cjm-fasthtml-tailwind",
    "section": "Project Structure",
    "text": "Project Structure\nnbs/\n├── builders/ (2)\n│   ├── colors.ipynb  # Color system builders for Tailwind CSS utilities\n│   └── scales.ipynb  # Numeric and named scale builders for Tailwind CSS utilities\n├── cli/ (13)\n│   ├── cli_config.ipynb            # Configuration system for multi-library CLI support\n│   ├── core_utils_discovery.ipynb  # Functions to discover and display core utility functions like combine_classes:\n│   ├── display.ipynb               # Functions to format and display the discovered information:\n│   ├── dynamic_examples.ipynb      # Functions to generate dynamic examples for help text:\n│   ├── example_discovery.ipynb     # Functions to discover and extract test example functions:\n│   ├── explorer.ipynb              # CLI tool for API exploration of cjm-fasthtml-tailwind utilities\n│   ├── factory_extraction.ipynb    # Functions to extract BaseFactory instances from modules:\n│   ├── helper_discovery.ipynb      # Functions to discover and extract helper functions:\n│   ├── imports.ipynb               # Functions for getting import statements.\n│   ├── pattern_scanner.ipynb       # Scan Python code for replaceable CSS class patterns\n│   ├── search.ipynb                # Functions to search across all library components:\n│   ├── test_code.ipynb             # Functions to test code snippets using the library:\n│   └── utils.ipynb                 # Utility functions for CLI tools\n├── core/ (3)\n│   ├── base.ipynb       # Base classes, types, and protocols for Tailwind CSS abstractions\n│   ├── resources.ipynb  # CDN resources and headers for Tailwind CSS\n│   └── testing.ipynb    # Standardized test page creation for Jupyter notebooks with FastHTML\n└── utilities/ (15)\n    ├── accessibility.ipynb              # Accessibility utilities for Tailwind CSS\n    ├── backgrounds.ipynb                # Background utilities for Tailwind CSS\n    ├── borders.ipynb                    # Border utilities for Tailwind CSS\n    ├── effects.ipynb                    # Shadow, opacity and other visual effect utilities for Tailwind CSS\n    ├── filters.ipynb                    # Filter utilities for Tailwind CSS\n    ├── flexbox_and_grid.ipynb           # Flexbox and CSS Grid utilities for Tailwind CSS\n    ├── interactivity.ipynb              # Interactivity utilities for Tailwind CSS\n    ├── layout.ipynb                     # Display, position, overflow, z-index and other layout utilities for Tailwind CSS\n    ├── sizing.ipynb                     # Width, height, and min/max sizing utilities for Tailwind CSS\n    ├── spacing.ipynb                    # Padding and margin utilities for Tailwind CSS\n    ├── svg.ipynb                        # SVG utilities for Tailwind CSS\n    ├── tables.ipynb                     # Table utilities for Tailwind CSS\n    ├── transforms.ipynb                 # Transform, rotate, scale, skew, translate and other transformation utilities for Tailwind CSS\n    ├── transitions_and_animation.ipynb  # Transition and animation utilities for Tailwind CSS\n    └── typography.ipynb                 # Typography utilities for Tailwind CSS\nTotal: 33 notebooks across 4 directories",
    "crumbs": [
      "cjm-fasthtml-tailwind"
    ]
  },
  {
    "objectID": "index.html#module-dependencies",
    "href": "index.html#module-dependencies",
    "title": "cjm-fasthtml-tailwind",
    "section": "Module Dependencies",
    "text": "Module Dependencies\ngraph LR\n    builders_colors[builders.colors&lt;br/&gt;colors]\n    builders_scales[builders.scales&lt;br/&gt;scales]\n    cli_cli_config[cli.cli_config&lt;br/&gt;CLI Configuration]\n    cli_core_utils_discovery[cli.core_utils_discovery&lt;br/&gt;Core Utilities Discovery]\n    cli_display[cli.display&lt;br/&gt;Display Functions]\n    cli_dynamic_examples[cli.dynamic_examples&lt;br/&gt;Dynamic Example Helpers]\n    cli_example_discovery[cli.example_discovery&lt;br/&gt;Example Discovery]\n    cli_explorer[cli.explorer&lt;br/&gt;explorer]\n    cli_factory_extraction[cli.factory_extraction&lt;br/&gt;Factory Extraction]\n    cli_helper_discovery[cli.helper_discovery&lt;br/&gt;Helper Function Discovery]\n    cli_imports[cli.imports&lt;br/&gt;imports]\n    cli_pattern_scanner[cli.pattern_scanner&lt;br/&gt;pattern_scanner]\n    cli_search[cli.search&lt;br/&gt;Search Functions]\n    cli_test_code[cli.test_code&lt;br/&gt;Test Code Functionality]\n    cli_utils[cli.utils&lt;br/&gt;utils]\n    core_base[core.base&lt;br/&gt;base]\n    core_resources[core.resources&lt;br/&gt;resources]\n    core_testing[core.testing&lt;br/&gt;testing]\n    utilities_accessibility[utilities.accessibility&lt;br/&gt;accessibility]\n    utilities_backgrounds[utilities.backgrounds&lt;br/&gt;backgrounds]\n    utilities_borders[utilities.borders&lt;br/&gt;borders]\n    utilities_effects[utilities.effects&lt;br/&gt;effects]\n    utilities_filters[utilities.filters&lt;br/&gt;filters]\n    utilities_flexbox_and_grid[utilities.flexbox_and_grid&lt;br/&gt;flexbox_and_grid]\n    utilities_interactivity[utilities.interactivity&lt;br/&gt;interactivity]\n    utilities_layout[utilities.layout&lt;br/&gt;layout]\n    utilities_sizing[utilities.sizing&lt;br/&gt;sizing]\n    utilities_spacing[utilities.spacing&lt;br/&gt;spacing]\n    utilities_svg[utilities.svg&lt;br/&gt;svg]\n    utilities_tables[utilities.tables&lt;br/&gt;tables]\n    utilities_transforms[utilities.transforms&lt;br/&gt;transforms]\n    utilities_transitions_and_animation[utilities.transitions_and_animation&lt;br/&gt;transitions_and_animation]\n    utilities_typography[utilities.typography&lt;br/&gt;typography]\n\n    builders_colors --&gt; core_base\n    builders_scales --&gt; core_base\n    cli_core_utils_discovery --&gt; cli_cli_config\n    cli_display --&gt; cli_utils\n    cli_display --&gt; cli_cli_config\n    cli_display --&gt; cli_example_discovery\n    cli_display --&gt; cli_factory_extraction\n    cli_display --&gt; cli_search\n    cli_display --&gt; cli_pattern_scanner\n    cli_display --&gt; cli_test_code\n    cli_display --&gt; cli_helper_discovery\n    cli_display --&gt; cli_core_utils_discovery\n    cli_display --&gt; cli_imports\n    cli_dynamic_examples --&gt; cli_utils\n    cli_dynamic_examples --&gt; cli_display\n    cli_dynamic_examples --&gt; cli_cli_config\n    cli_dynamic_examples --&gt; cli_example_discovery\n    cli_dynamic_examples --&gt; cli_factory_extraction\n    cli_dynamic_examples --&gt; cli_search\n    cli_dynamic_examples --&gt; cli_pattern_scanner\n    cli_dynamic_examples --&gt; cli_test_code\n    cli_dynamic_examples --&gt; cli_helper_discovery\n    cli_dynamic_examples --&gt; cli_core_utils_discovery\n    cli_dynamic_examples --&gt; cli_imports\n    cli_example_discovery --&gt; cli_utils\n    cli_explorer --&gt; cli_display\n    cli_explorer --&gt; cli_cli_config\n    cli_explorer --&gt; cli_dynamic_examples\n    cli_explorer --&gt; cli_search\n    cli_explorer --&gt; cli_pattern_scanner\n    cli_explorer --&gt; cli_test_code\n    cli_explorer --&gt; cli_utils\n    cli_factory_extraction --&gt; core_base\n    cli_factory_extraction --&gt; cli_utils\n    cli_helper_discovery --&gt; cli_example_discovery\n    cli_helper_discovery --&gt; cli_utils\n    cli_imports --&gt; cli_factory_extraction\n    cli_imports --&gt; cli_cli_config\n    cli_imports --&gt; cli_core_utils_discovery\n    cli_imports --&gt; cli_helper_discovery\n    cli_imports --&gt; cli_utils\n    cli_pattern_scanner --&gt; cli_cli_config\n    cli_pattern_scanner --&gt; cli_example_discovery\n    cli_search --&gt; cli_utils\n    cli_search --&gt; cli_example_discovery\n    cli_search --&gt; cli_helper_discovery\n    cli_search --&gt; cli_factory_extraction\n    cli_test_code --&gt; cli_factory_extraction\n    cli_test_code --&gt; cli_cli_config\n    cli_test_code --&gt; cli_helper_discovery\n    cli_test_code --&gt; cli_utils\n    cli_utils --&gt; cli_cli_config\n    core_testing --&gt; utilities_flexbox_and_grid\n    core_testing --&gt; utilities_transitions_and_animation\n    core_testing --&gt; utilities_borders\n    core_testing --&gt; utilities_backgrounds\n    core_testing --&gt; utilities_typography\n    core_testing --&gt; utilities_layout\n    core_testing --&gt; utilities_sizing\n    core_testing --&gt; utilities_spacing\n    core_testing --&gt; utilities_effects\n    core_testing --&gt; utilities_accessibility\n    core_testing --&gt; core_resources\n    core_testing --&gt; core_base\n    utilities_accessibility --&gt; builders_scales\n    utilities_accessibility --&gt; core_testing\n    utilities_accessibility --&gt; core_base\n    utilities_backgrounds --&gt; builders_colors\n    utilities_backgrounds --&gt; core_base\n    utilities_backgrounds --&gt; builders_scales\n    utilities_backgrounds --&gt; core_testing\n    utilities_borders --&gt; builders_colors\n    utilities_borders --&gt; core_base\n    utilities_borders --&gt; builders_scales\n    utilities_borders --&gt; core_testing\n    utilities_effects --&gt; builders_colors\n    utilities_effects --&gt; core_base\n    utilities_effects --&gt; builders_scales\n    utilities_effects --&gt; core_testing\n    utilities_filters --&gt; builders_colors\n    utilities_filters --&gt; core_base\n    utilities_filters --&gt; builders_scales\n    utilities_filters --&gt; core_testing\n    utilities_flexbox_and_grid --&gt; core_base\n    utilities_flexbox_and_grid --&gt; builders_scales\n    utilities_flexbox_and_grid --&gt; core_testing\n    utilities_interactivity --&gt; builders_colors\n    utilities_interactivity --&gt; core_base\n    utilities_interactivity --&gt; builders_scales\n    utilities_interactivity --&gt; core_testing\n    utilities_layout --&gt; core_base\n    utilities_layout --&gt; builders_scales\n    utilities_layout --&gt; core_testing\n    utilities_sizing --&gt; builders_scales\n    utilities_sizing --&gt; core_testing\n    utilities_sizing --&gt; core_base\n    utilities_spacing --&gt; builders_scales\n    utilities_spacing --&gt; core_testing\n    utilities_spacing --&gt; core_base\n    utilities_svg --&gt; builders_colors\n    utilities_svg --&gt; core_base\n    utilities_svg --&gt; builders_scales\n    utilities_svg --&gt; core_testing\n    utilities_tables --&gt; core_base\n    utilities_tables --&gt; builders_scales\n    utilities_tables --&gt; core_testing\n    utilities_transforms --&gt; core_base\n    utilities_transforms --&gt; builders_scales\n    utilities_transforms --&gt; core_testing\n    utilities_transitions_and_animation --&gt; core_base\n    utilities_transitions_and_animation --&gt; builders_scales\n    utilities_transitions_and_animation --&gt; core_testing\n    utilities_typography --&gt; builders_colors\n    utilities_typography --&gt; core_base\n    utilities_typography --&gt; builders_scales\n    utilities_typography --&gt; core_testing\n116 cross-module dependencies detected",
    "crumbs": [
      "cjm-fasthtml-tailwind"
    ]
  },
  {
    "objectID": "index.html#cli-reference",
    "href": "index.html#cli-reference",
    "title": "cjm-fasthtml-tailwind",
    "section": "CLI Reference",
    "text": "CLI Reference\n\ncjm-tailwind-explore Command\nusage: cjm-tailwind-explore [-h]\n                            {modules,factories,factory,examples,example,helpers,helper,search,test-code,core-utils,core-util,imports,scan}\n                            ...\n\ncjm_fasthtml_tailwind CLI Explorer\n\nThis tool helps you explore the cjm_fasthtml_tailwind library, which provides:\n- Python-native Tailwind CSS v4 utility class builders for FastHTML projects\n- Dynamic CSS class generation without hardcoded strings\n- Comprehensive utility factories (forced_color_adjust, not_sr_only, sr_only, etc.)\n- Helper functions for common patterns\n- Full integration with FastHTML components\n\nPurpose: This CLI tool enables autonomous exploration of the library's API by:\n- Discovering all available utility modules and their documentation\n- Listing factory instances with their built-in documentation\n- Showing usage examples from test functions\n- Providing source code for helper functions\n- Searching across all library components\n- CRITICALLY: Testing code snippets with automatic imports BEFORE implementation\n- Generating recommended import statements\n- Scanning existing code for replaceable CSS patterns\n\nAll information is dynamically extracted from the library itself - nothing is hardcoded.\n\npositional arguments:\n  {modules,factories,factory,examples,example,helpers,helper,search,test-code,core-utils,core-util,imports,scan}\n                        Available commands\n    modules             List all utility modules\n    factories           List factories\n    factory             Show detailed info for a specific factory\n    examples            Show usage examples\n    example             Show source code for a specific example\n    helpers             Show helper functions\n    helper              Show source code for a specific helper\n    search              Search across all library components\n    test-code           ⚠️ CRITICAL: Test code snippets using the library\n                        (ALWAYS use before implementation)\n    core-utils          List core utility functions\n    core-util           Show source code for a core utility\n    imports             Show recommended import statements\n    scan                Scan code for replaceable CSS patterns\n\noptions:\n  -h, --help            show this help message and exit\n\nGetting Started:\n  1. List all modules:     cjm-tailwind-explore modules\n  2. View factories:       cjm-tailwind-explore factories\n  3. Search for patterns:  cjm-tailwind-explore search &lt;query&gt;\n  4. CRITICAL: Test code:  cjm-tailwind-explore test-code \"&lt;code&gt;\"\n  5. Get imports:          cjm-tailwind-explore imports\n  6. Scan existing code:   cjm-tailwind-explore scan &lt;file&gt;\n\nExploration Workflow:\n  - Start with 'modules' to see available utility categories\n  - Use 'factories -m &lt;module&gt;' to explore specific modules\n  - Use 'factory &lt;module&gt; &lt;name&gt;' for detailed factory information\n  - Use 'examples' to see test-based usage patterns\n  - Use 'search' to find specific functionality\n  - CRITICAL: ALWAYS use 'test-code' to validate code BEFORE implementation\n  - Use 'scan' to analyze existing code for migration opportunities\n\nIMPORTANT: Code Validation\n  ⚠️  ALWAYS use 'test-code' to verify generated code before using it\n  ⚠️  This ensures correct syntax, proper imports, and expected output\n  ⚠️  Never skip this step - it prevents errors and saves debugging time\n\nKey Concepts:\n  - Factories: Objects that generate CSS classes (e.g., forced_color_adjust, not_sr_only, sr_only)\n  - Modules: Categories of utilities (accessibility, backgrounds, borders, etc.)\n  - Examples: Test functions demonstrating usage patterns\n  - Helpers: Convenience functions for common patterns\n\nTips for Coding Assistants:\n  - MANDATORY: Use 'test-code' to validate ALL generated code before implementation\n  - Use 'search --include-source' to find usage patterns in code\n  - Use 'imports' to get all necessary import statements\n  - Use 'scan' to identify replaceable hardcoded CSS classes\n  - Factory names are intuitive: forced_color_adjust, not_sr_only, sr_only\n  - Combine utilities with combine_classes() function\n  - All factories support method chaining and attribute access\n\nExample Usage Flow:\n  cjm-tailwind-explore modules                                           # See what's available\n  cjm-tailwind-explore factories -m accessibility                        # Explore accessibility utilities\n  cjm-tailwind-explore factory accessibility forced_color_adjust         # Learn about forced_color_adjust factory\n  cjm-tailwind-explore example accessibility fasthtml                    # See usage examples\n  cjm-tailwind-explore test-code 'print(str(forced_color_adjust.auto))'  # CRITICAL: Test your understanding\n  cjm-tailwind-explore scan app.py                                       # Analyze existing code\n\nFor detailed help on any command, use cjm-tailwind-explore &lt;command&gt; --help.",
    "crumbs": [
      "cjm-fasthtml-tailwind"
    ]
  },
  {
    "objectID": "index.html#module-overview",
    "href": "index.html#module-overview",
    "title": "cjm-fasthtml-tailwind",
    "section": "Module Overview",
    "text": "Module Overview\nDetailed documentation for each module in the project:\n\naccessibility (accessibility.ipynb)\n\nAccessibility utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.accessibility import (\n    forced_color_adjust,\n    sr_only,\n    not_sr_only,\n    ForcedColorAdjust,\n    test_accessibility_forced_color_adjust_examples,\n    test_accessibility_screen_reader_examples,\n    test_accessibility_fasthtml_examples,\n    visually_hidden,\n    high_contrast_safe,\n    test_accessibility_helper_examples\n)\n\n\nFunctions\ndef test_accessibility_forced_color_adjust_examples(\n)\n    \"Test forced color adjust utilities.\"\ndef test_accessibility_screen_reader_examples(\n)\n    \"Test screen reader utilities imported from layout module.\"\ndef test_accessibility_fasthtml_examples(\n)\n    \"Test accessibility utilities in practical FastHTML component examples.\"\ndef visually_hidden(\n    focusable: bool = False  # Whether the element should be visible when focused\n) -&gt; str:  # CSS classes for hiding element visually\n    \"\"\"\n    Hide an element visually but keep it available to screen readers.\n    \n    Args:\n        focusable: If True, element becomes visible when focused (useful for skip links)\n    \n    Returns:\n        CSS classes for visual hiding with optional focus visibility\n    \"\"\"\ndef high_contrast_safe(\n    *classes: str  # Additional CSS classes to combine\n) -&gt; str:  # CSS classes including forced color adjust\n    \"\"\"\n    Create classes that work well with high contrast mode.\n    \n    Args:\n        *classes: Additional CSS classes to include\n    \n    Returns:\n        Combined CSS classes with forced-color-adjust-auto\n    \"\"\"\ndef test_accessibility_helper_examples(\n)\n    \"Test helper functions for common accessibility patterns.\"\n\n\nClasses\nclass ForcedColorAdjust(Enum):\n    \"Forced color utility values\"\n\n\nVariables\nforced_color_adjust  # The forced color adjust factory\n\n\n\nbackgrounds (backgrounds.ipynb)\n\nBackground utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.backgrounds import (\n    bg_attachment,\n    bg_clip,\n    bg,\n    bg_none,\n    bg_linear,\n    bg_radial,\n    bg_conic,\n    from_color,\n    via_color,\n    to_color,\n    bg_origin,\n    bg_position,\n    bg_repeat,\n    bg_size,\n    BackgroundAttachment,\n    test_backgrounds_attachment_examples,\n    BackgroundClip,\n    test_backgrounds_clip_examples,\n    test_backgrounds_color_examples,\n    test_backgrounds_opacity_examples,\n    GradientUtility,\n    GradientFactory,\n    GradientStopUtility,\n    GradientStopFactory,\n    test_backgrounds_gradient_examples,\n    test_backgrounds_gradient_stops_examples,\n    test_backgrounds_gradient_composition_examples,\n    test_backgrounds_origin_examples,\n    test_backgrounds_position_examples,\n    test_backgrounds_repeat_examples,\n    test_backgrounds_size_examples,\n    test_backgrounds_arbitrary_examples,\n    test_backgrounds_fasthtml_examples\n)\n\n\nFunctions\ndef test_backgrounds_attachment_examples()\n    \"Test background attachment utilities.\"\ndef test_backgrounds_clip_examples()\n    \"Test background clip utilities.\"\ndef test_backgrounds_color_examples()\n    \"Test background color utilities with various color values.\"\ndef test_backgrounds_opacity_examples()\n    \"Test background colors with opacity modifiers.\"\ndef test_backgrounds_gradient_examples()\n    \"Test gradient background utilities.\"\ndef test_backgrounds_gradient_stops_examples()\n    \"Test gradient color stop utilities.\"\ndef test_backgrounds_gradient_composition_examples()\n    \"Test composing gradient backgrounds with color stops.\"\ndef test_backgrounds_origin_examples()\n    \"Test background origin utilities.\"\ndef test_backgrounds_position_examples()\n    \"Test background position utilities.\"\ndef test_backgrounds_repeat_examples()\n    \"Test background repeat utilities.\"\ndef test_backgrounds_size_examples()\n    \"Test background size utilities.\"\ndef test_backgrounds_arbitrary_examples()\n    \"Test background utilities with arbitrary values.\"\ndef test_backgrounds_fasthtml_examples()\n    \"Test background utilities in practical FastHTML component examples.\"\n\n\nClasses\nclass BackgroundAttachment(Enum):\n    \"Background attachment utility values\"\nclass BackgroundClip(Enum):\n    \"Background clip utility values\"\nclass GradientUtility:\n    def __init__(\n        self,\n        gradient_type: str,  # Type of gradient (linear, radial, conic)\n        value: Optional[Union[str, int]] = None,  # Direction, angle, or custom value\n        negative: bool = False  # Whether to negate the angle\n    )\n    \"Utility class for gradient backgrounds with angle support.\"\n    \n    def __init__(\n            self,\n            gradient_type: str,  # Type of gradient (linear, radial, conic)\n            value: Optional[Union[str, int]] = None,  # Direction, angle, or custom value\n            negative: bool = False  # Whether to negate the angle\n        )\n        \"Initialize gradient utility.\"\nclass GradientFactory:\n    def __init__(\n        self,\n        gradient_type: str,  # Type of gradient (linear, radial, conic)\n        doc: Optional[str] = None  # Documentation\n    )\n    \"Factory for gradient utilities with angle and direction support.\"\n    \n    def __init__(\n            self,\n            gradient_type: str,  # Type of gradient (linear, radial, conic)\n            doc: Optional[str] = None  # Documentation\n        )\n        \"Initialize gradient factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Factory information\n        \"Get information about this gradient factory.\"\nclass GradientStopUtility:\n    def __init__(\n        self,\n        stop_type: str,  # Type of stop (from, via, to)\n        value: Optional[Union[ColorValue, str, int]] = None,  # Color or percentage\n        is_position: bool = False  # Whether this is a position value\n    )\n    \"Utility class for gradient color stops with percentage support.\"\n    \n    def __init__(\n            self,\n            stop_type: str,  # Type of stop (from, via, to)\n            value: Optional[Union[ColorValue, str, int]] = None,  # Color or percentage\n            is_position: bool = False  # Whether this is a position value\n        )\n        \"Initialize gradient stop utility.\"\nclass GradientStopFactory:\n    def __init__(\n        self,\n        stop_type: str,  # Type of stop (from, via, to)\n        doc: Optional[str] = None  # Documentation\n    )\n    \"Enhanced factory for gradient color stops with percentage support.\"\n    \n    def __init__(\n            self,\n            stop_type: str,  # Type of stop (from, via, to)\n            doc: Optional[str] = None  # Documentation\n        )\n        \"Initialize gradient stop factory.\"\n\n\nVariables\nbg_attachment  # Background attachment factory\nbg_clip  # Background clip factory\nbg  # The background color factory\nbg_none  # Remove background image\n\n\n\nbase (base.ipynb)\n\nBase classes, types, and protocols for Tailwind CSS abstractions\n\n\nImport\nfrom cjm_fasthtml_tailwind.core.base import (\n    TailwindScale,\n    TailwindFraction,\n    TailwindArbitrary,\n    TailwindCustomProperty,\n    TailwindValue,\n    PSEUDO_CLASS_MODIFIERS,\n    PSEUDO_ELEMENT_MODIFIERS,\n    RESPONSIVE_MODIFIERS,\n    THEME_MODIFIERS,\n    MOTION_MODIFIERS,\n    PRINT_MODIFIERS,\n    ORIENTATION_MODIFIERS,\n    CONTRAST_MODIFIERS,\n    DIRECTION_MODIFIERS,\n    STATE_MODIFIERS,\n    CHILD_MODIFIERS,\n    ALL_MODIFIER_GROUPS,\n    CONTAINER_SCALES,\n    BREAKPOINTS,\n    T,\n    DIRECTIONS,\n    is_numeric_scale,\n    is_fraction,\n    is_custom_property,\n    is_arbitrary_value,\n    TailwindBuilder,\n    BaseUtility,\n    ModifierMixin,\n    ModifierGroup,\n    StandardUtility,\n    NamedScale,\n    Breakpoint,\n    BaseFactory,\n    UtilityFactory,\n    combine_classes,\n    SingleValueUtility,\n    SingleValueFactory,\n    Direction,\n    DirectionalUtility,\n    NegativeableUtility\n)\n\n\nFunctions\ndef is_numeric_scale(\n    value: Any  # The value to check - can be int, float, or string\n) -&gt; bool:  # True if the value is a valid numeric scale, False otherwise\n    \"Check if value is a valid numeric scale (int, float, or 'px').\"\ndef is_fraction(\n    value: Any  # The value to check for fraction format\n) -&gt; bool:  # True if the value is a valid fraction string, False otherwise\n    \"Check if value is a valid fraction string (e.g., '1/2', '3/4').\"\ndef is_custom_property(\n    value: Any  # The value to check for CSS custom property format\n) -&gt; bool:  # True if the value is a CSS custom property, False otherwise\n    \"Check if value is a CSS custom property (starts with --).\"\ndef is_arbitrary_value(\n    value: Any  # The value to check for arbitrary CSS value format\n) -&gt; bool:  # True if the value contains CSS units or calc(), False otherwise\n    \"Check if value is an arbitrary value (contains units or special chars).\"\ndef combine_classes(\n    *args: Union[str, BaseUtility, TailwindBuilder, BaseFactory, None]\n) -&gt; str:  # Space-separated class string\n    \"Combine multiple class builders or strings into a single class string.\"\n\n\nClasses\n@runtime_checkable\nclass TailwindBuilder(Protocol):\n    \"Protocol for all Tailwind utility builders.\"\n    \n    def build(\n            self,\n            *args,\n            **kwargs\n        ) -&gt; str:  # The built CSS class string\n        \"Build and return the CSS class string.\"\nclass BaseUtility:\n    def __init__(\n        self,\n        prefix: str  # The utility prefix (e.g., 'w' for width, 'p' for padding)\n    )\n    \"Base class for all Tailwind utility builders.\"\n    \n    def __init__(\n            self,\n            prefix: str  # The utility prefix (e.g., 'w' for width, 'p' for padding)\n        )\n        \"Initialize with a utility prefix.\"\n    \n    def build(\n            self,\n            value: Optional[TailwindValue] = None  # Optional value to override the stored value\n        ) -&gt; str:  # The built CSS class string\n        \"Build and return the CSS class string.\"\n    \n    def with_modifiers(\n            self,\n            *modifiers: str  # Modifier strings to apply (e.g., 'hover', 'focus', 'dark')\n        ) -&gt; 'BaseUtility':  # A new instance with the modifiers applied\n        \"Create a new instance with additional modifiers.\nModifiers are applied in the order they are passed.\"\nclass ModifierMixin:\n    \"Mixin to add modifier support to any utility with convenient property access.\"\n    \n    def hover(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with hover state modifier applied\n        \"Apply hover modifier.\"\n    \n    def focus(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with focus state modifier applied\n        \"Apply focus modifier.\"\n    \n    def active(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with active state modifier applied\n        \"Apply active modifier.\"\n    \n    def visited(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with visited state modifier applied\n        \"Apply visited modifier.\"\n    \n    def disabled(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with disabled state modifier applied\n        \"Apply disabled modifier.\"\n    \n    def checked(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with checked state modifier applied\n        \"Apply checked modifier.\"\n    \n    def required(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with required state modifier applied\n        \"Apply required modifier.\"\n    \n    def invalid(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with invalid state modifier applied\n        \"Apply invalid modifier.\"\n    \n    def valid(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with valid state modifier applied\n        \"Apply valid modifier.\"\n    \n    def before(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with before pseudo-element modifier applied\n        \"Apply before pseudo-element modifier.\"\n    \n    def after(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with after pseudo-element modifier applied\n        \"Apply after pseudo-element modifier.\"\n    \n    def placeholder(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with placeholder modifier applied\n        \"Apply placeholder modifier.\"\n    \n    def selection(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with selection modifier applied\n        \"Apply selection modifier.\"\n    \n    def sm(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with small breakpoint modifier applied\n        \"Apply small breakpoint modifier.\"\n    \n    def max_sm(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with max-sm breakpoint modifier applied\n        \"Apply max small breakpoint modifier variant.\"\n    \n    def md(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with medium breakpoint modifier applied\n        \"Apply medium breakpoint modifier.\"\n    \n    def max_md(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with max-md breakpoint modifier applied\n        \"Apply max medium breakpoint modifier variant.\"\n    \n    def lg(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with large breakpoint modifier applied\n        \"Apply large breakpoint modifier.\"\n    \n    def xl(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with extra large breakpoint modifier applied\n        \"Apply extra large breakpoint modifier.\"\n    \n    def dark(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with dark mode modifier applied\n        \"Apply dark mode modifier.\"\n    \n    def motion_reduce(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with reduced motion modifier applied\n        \"Apply reduced motion modifier.\"\n    \n    def motion_safe(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with safe motion modifier applied\n        \"Apply safe motion modifier.\"\n    \n    def first(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with first child modifier applied\n        \"Apply first child modifier.\"\n    \n    def last(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with last child modifier applied\n        \"Apply last child modifier.\"\n    \n    def odd(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with odd child modifier applied\n        \"Apply odd child modifier.\"\n    \n    def even(\n            self\n        ) -&gt; 'BaseUtility':  # Utility with even child modifier applied\n        \"Apply even child modifier.\"\n    \n    def group(\n            self, \n            state: Optional[str] = None,  # Optional state like 'hover', 'focus'\n            name: Optional[str] = None    # Optional group name for nested groups\n        ) -&gt; 'BaseUtility':  # The utility with group modifier applied\n        \"Apply group modifier with optional state and name.\"\n    \n    def peer(\n            self, \n            state: Optional[str] = None,  # Optional state like 'hover', 'focus'\n            name: Optional[str] = None    # Optional peer name for multiple peers\n        ) -&gt; 'BaseUtility':  # The utility with peer modifier applied\n        \"Apply peer modifier with optional state and name.\"\n    \n    def has(\n            self,\n            selector: str  # CSS selector for :has() pseudo-class\n        ) -&gt; 'BaseUtility':  # The utility with has modifier applied\n        \"Apply has modifier with a selector.\"\n    \n    def aria(\n            self,\n            attribute: str,  # ARIA attribute name\n            value: Optional[str] = None  # Optional value for the attribute\n        ) -&gt; 'BaseUtility':  # The utility with aria modifier applied\n        \"Apply aria modifier with attribute and optional value.\"\n    \n    def data(\n            self,\n            attribute: str,  # Data attribute name\n            value: Optional[str] = None  # Optional value for the attribute\n        ) -&gt; 'BaseUtility':  # The utility with data modifier applied\n        \"Apply data modifier with attribute and optional value.\"\n    \n    def arbitrary(\n            self,\n            selector: str  # Arbitrary CSS selector\n        ) -&gt; 'BaseUtility':  # The utility with arbitrary modifier applied\n        \"Apply arbitrary modifier with custom selector.\"\n@dataclass\nclass ModifierGroup:\n    \"Group of related modifiers with descriptions.\"\n    \n    name: str\n    description: str\n    modifiers: Dict[str, str]  # modifier_name -&gt; tailwind_variant\nclass StandardUtility(BaseUtility, ModifierMixin):\n    \"Standard utility class with common value formatting and modifier support.\"\n    \n@dataclass\nclass NamedScale:\n    \"Represents a named scale with optional CSS variable.\"\n    \n    name: str\n    var: Optional[str]\n    comment: Optional[str]\n    \n    def format(\n            self\n        ) -&gt; str:  # The name of the scale for use in CSS classes\n        \"Format as Tailwind class suffix.\"\n@dataclass\nclass Breakpoint:\n    \"Responsive breakpoint definition.\"\n    \n    name: str\n    min_width: Optional[str]\nclass BaseFactory:\n    def __init__(\n        self,\n        doc: str  # Documentation string describing what this factory creates\n    )\n    \"Base factory class with documentation support.\"\n    \n    def __init__(\n            self,\n            doc: str  # Documentation string describing what this factory creates\n        )\n        \"Initialize with documentation string.\"\n    \n    def describe(\n            self\n        ) -&gt; str:  # A formatted description of the factory\n        \"Return a formatted description of this factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about this factory's options and valid inputs.\n\nShould return a dictionary with keys like:\n- 'description': Factory description\n- 'valid_inputs': List/description of valid input values\n- 'options': Available options or methods\"\nclass UtilityFactory:\n    def __init__(\n        self,\n        utility_class: type[T],  # The utility class to instantiate\n        prefix: str,  # The prefix to use for the utilities\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for creating utility instances with fluent API.\"\n    \n    def __init__(\n            self,\n            utility_class: type[T],  # The utility class to instantiate\n            prefix: str,  # The prefix to use for the utilities\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize factory with a utility class and prefix.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this utility factory.\"\nclass SingleValueUtility:\n    def __init__(\n        self,\n        value: str  # The complete utility class string (e.g., \"container\", \"sr-only\")\n    )\n    \"A utility that represents a single fixed value.\"\n    \n    def __init__(\n            self,\n            value: str  # The complete utility class string (e.g., \"container\", \"sr-only\")\n        )\n        \"Initialize with a complete utility value.\"\nclass SingleValueFactory:\n    def __init__(\n        self,\n        value: str,  # The utility class string (e.g., \"container\")\n        doc: str  # Documentation describing what this utility does\n    )\n    \"Factory for a single utility class with modifier support.\"\n    \n    def __init__(\n            self,\n            value: str,  # The utility class string (e.g., \"container\")\n            doc: str  # Documentation describing what this utility does\n        )\n        \"Initialize with a value and documentation.\"\n    \n    def build(\n            self\n        ) -&gt; str:  # The utility class string\n        \"Build and return the utility class string.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this single-value factory.\"\n@dataclass\nclass Direction:\n    \"Represents a directional variant.\"\n    \n    suffix: str\n    css_suffix: str\nclass DirectionalUtility:\n    def __init__(\n        self,\n        prefix: str,  # Base prefix (e.g., 'p' for padding)\n        direction: Optional[str] = None  # Optional direction ('t', 'r', 'b', 'l', 'x', 'y')\n    )\n    \"Base class for utilities with directional variants.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # Base prefix (e.g., 'p' for padding)\n            direction: Optional[str] = None  # Optional direction ('t', 'r', 'b', 'l', 'x', 'y')\n        )\n        \"Initialize with prefix and optional direction.\"\nclass NegativeableUtility:\n    def __init__(\n        self,\n        prefix: str,  # Base prefix\n        negative: bool = False  # Whether this is a negative variant\n    )\n    \"Utility class that supports negative values.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # Base prefix\n            negative: bool = False  # Whether this is a negative variant\n        )\n        \"Initialize with prefix and negative flag.\"\n\n\nVariables\nTailwindScale  # Numeric scales like 1, 2.5, \"px\"\nTailwindFraction  # Fractions like \"1/2\", \"2/3\"\nTailwindArbitrary  # Arbitrary values like \"123px\", \"10rem\"\nTailwindCustomProperty  # CSS custom properties like \"--spacing-lg\"\nTailwindValue  # Union of all possible value types\nPSEUDO_CLASS_MODIFIERS\nPSEUDO_ELEMENT_MODIFIERS\nRESPONSIVE_MODIFIERS\nTHEME_MODIFIERS\nMOTION_MODIFIERS\nPRINT_MODIFIERS\nORIENTATION_MODIFIERS\nCONTRAST_MODIFIERS\nDIRECTION_MODIFIERS\nSTATE_MODIFIERS\nCHILD_MODIFIERS\nALL_MODIFIER_GROUPS = [11 items]\nCONTAINER_SCALES = [13 items]  # Common named scales used across utilities\nBREAKPOINTS = {5 items}  # Common breakpoints\nSTATE_MODIFIERS = [39 items]  # Common state modifiers\nT\nDIRECTIONS = {6 items}  # Common directions\n\n\n\nborders (borders.ipynb)\n\nBorder utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.borders import (\n    RADIUS_SCALES,\n    RADIUS_CONFIG,\n    rounded,\n    BORDER_WIDTH_CONFIG,\n    border,\n    divide,\n    border_color,\n    divide_color,\n    border_style,\n    divide_style,\n    OUTLINE_WIDTH_CONFIG,\n    outline,\n    outline_color,\n    outline_style,\n    outline_hidden,\n    OUTLINE_OFFSET_CONFIG,\n    outline_offset,\n    RoundedFactory,\n    test_borders_radius_examples,\n    BorderWidthUtility,\n    BorderWidthFactory,\n    BorderDirectionalFactory,\n    test_borders_width_examples,\n    DivideFactory,\n    test_borders_divide_examples,\n    BorderColorFactory,\n    test_borders_color_examples,\n    test_borders_divide_color_examples,\n    test_borders_style_examples,\n    test_borders_divide_style_examples,\n    OutlineWidthFactory,\n    test_borders_outline_width_examples,\n    test_borders_outline_color_examples,\n    test_borders_outline_style_examples,\n    test_borders_outline_offset_examples,\n    test_borders_fasthtml_examples\n)\n\n\nFunctions\ndef test_borders_radius_examples()\n    \"Test border radius utilities with all variants.\"\ndef test_borders_width_examples()\n    \"Test border width utilities with all variants.\"\ndef test_borders_divide_examples()\n    \"Test divide utilities for adding borders between children.\"\ndef test_borders_color_examples()\n    \"Test border color utilities with all variants.\"\ndef test_borders_divide_color_examples()\n    \"Test divide color utilities for borders between children.\"\ndef test_borders_style_examples()\n    \"Test border style utilities.\"\ndef test_borders_divide_style_examples()\n    \"Test divide style utilities.\"\ndef test_borders_outline_width_examples()\n    \"Test outline width utilities.\"\ndef test_borders_outline_color_examples()\n    \"Test outline color utilities.\"\ndef test_borders_outline_style_examples()\n    \"Test outline style utilities.\"\ndef test_borders_outline_offset_examples()\n    \"Test outline offset utilities.\"\ndef test_borders_fasthtml_examples()\n    \"Test border utilities in practical FastHTML component examples.\"\n\n\nClasses\nclass RoundedFactory:\n    def __init__(\n        self,\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for creating border radius utilities with all variants.\"\n    \n    def __init__(\n            self,\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize with documentation and create all sub-factories.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about the rounded factory.\"\nclass BorderWidthUtility:\n    def __init__(\n        self,\n        prefix: str,  # The utility prefix (e.g., 'border', 'border-t')\n        config: ScaleConfig = BORDER_WIDTH_CONFIG,  # Configuration for valid values\n        has_default: bool = True  # Whether this utility has a default value (1px)\n    )\n    \"Utility class for border width with default value support.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # The utility prefix (e.g., 'border', 'border-t')\n            config: ScaleConfig = BORDER_WIDTH_CONFIG,  # Configuration for valid values\n            has_default: bool = True  # Whether this utility has a default value (1px)\n        )\n        \"Initialize with prefix and configuration.\"\nclass BorderWidthFactory:\n    def __init__(\n        self,\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for creating border width utilities with directional variants.\"\n    \n    def __init__(\n            self,\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize with documentation and create all sub-factories.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about the border width factory.\"\nclass BorderDirectionalFactory:\n    def __init__(\n        self,\n        prefix: str,  # The utility prefix (e.g., 'border-t')\n        doc: str  # Documentation\n    )\n    \"Factory for directional border width utilities.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # The utility prefix (e.g., 'border-t')\n            doc: str  # Documentation\n        )\n        \"Initialize with prefix and documentation.\"\n    \n    def describe(\n            self\n        ) -&gt; str: # The documentation string for this directional border factory\n        \"Return the documentation for this factory.\"\nclass DivideFactory:\n    def __init__(self):\n        \"\"\"Initialize with divide utilities and reverse modifiers.\"\"\"\n        super().__init__(\"Divide utilities for adding borders between child elements\")\n        \n        # Create divide width factories\n        self.x = BorderDirectionalFactory(\"divide-x\", \"Horizontal divide between children\")\n        self.y = BorderDirectionalFactory(\"divide-y\", \"Vertical divide between children\")\n        \n        # Create reverse utilities\n        self.x_reverse = SingleValueFactory(\"divide-x-reverse\", \"Reverse the order of horizontal divide\")\n        self.y_reverse = SingleValueFactory(\"divide-y-reverse\", \"Reverse the order of vertical divide\")\n    \n    def get_info(\n        self\n    ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n    \"Factory for creating divide utilities that add borders between children.\"\n    \n    def __init__(self):\n            \"\"\"Initialize with divide utilities and reverse modifiers.\"\"\"\n            super().__init__(\"Divide utilities for adding borders between child elements\")\n            \n            # Create divide width factories\n            self.x = BorderDirectionalFactory(\"divide-x\", \"Horizontal divide between children\")\n            self.y = BorderDirectionalFactory(\"divide-y\", \"Vertical divide between children\")\n            \n            # Create reverse utilities\n            self.x_reverse = SingleValueFactory(\"divide-x-reverse\", \"Reverse the order of horizontal divide\")\n            self.y_reverse = SingleValueFactory(\"divide-y-reverse\", \"Reverse the order of vertical divide\")\n        \n        def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Initialize with divide utilities and reverse modifiers.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the divide factory.\"\nclass BorderColorFactory:\n    def __init__(\n        self,\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for creating border color utilities with directional variants.\"\n    \n    def __init__(\n            self,\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize with documentation and create all sub-factories.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about the border color factory.\"\nclass OutlineWidthFactory:\n    def __init__(\n        self,\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for creating outline width utilities.\"\n    \n    def __init__(\n            self,\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize with documentation.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about the outline width factory.\"\n\n\nVariables\nRADIUS_SCALES = [8 items]  # Border radius named scales\nRADIUS_CONFIG  # Border radius configuration\nBORDER_WIDTH_CONFIG  # Border width configuration\nOUTLINE_WIDTH_CONFIG  # Outline width configuration\nOUTLINE_OFFSET_CONFIG  # Outline offset configuration\n\n\n\nCLI Configuration (cli_config.ipynb)\n\nConfiguration system for multi-library CLI support\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.cli_config import (\n    LibraryConfig,\n    get_tailwind_config,\n    set_active_config,\n    get_active_config,\n    reset_config,\n    get_config_by_name,\n    list_available_configs,\n    get_config_info\n)\n\n\nFunctions\ndef get_tailwind_config() -&gt; LibraryConfig: # Configuration for cjm-fasthtml-tailwind library\n    \"Get configuration for cjm-fasthtml-tailwind library.\"\ndef set_active_config(\n    config:LibraryConfig # The library configuration to set as active\n): # Returns None\n    \"Set the active library configuration.\"\ndef get_active_config() -&gt; LibraryConfig: # The active library configuration (defaults to Tailwind)\n    \"\"\"Get the active library configuration. If no configuration is set, returns the Tailwind config.\"\"\"\n    global _active_config\n    \n    if _active_config is not None\n    \"Get the active library configuration. If no configuration is set, returns the Tailwind config.\"\ndef reset_config(): # Returns None\n    \"Reset the active configuration to force re-detection.\"\ndef get_config_by_name(\n    name:str # Library name ('tailwind')\n) -&gt; Optional[LibraryConfig]: # LibraryConfig or None if not found\n    \"Get a library configuration by name.\"\ndef list_available_configs() -&gt; List[str]: # List of available library configuration names\n    \"List all available library configurations.\"\ndef get_config_info(\n    config:LibraryConfig # The library configuration to get information about\n) -&gt; Dict[str, Any]: # Dictionary with configuration details\n    \"Get information about a configuration.\"\n\n\nClasses\n@dataclass\nclass LibraryConfig:\n    \"Configuration for a specific library's CLI tool.\"\n    \n    package_name: str  # e.g., 'cjm_fasthtml_tailwind'\n    cli_command: str  # e.g., 'cjm-tailwind-explore'\n    display_name: str  # e.g., 'Tailwind'\n    module_discovery_paths: List[str]  # e.g., ['utilities'] or ['components', 'builders']\n    core_package: str  # e.g., 'cjm_fasthtml_tailwind.core'\n    core_utilities: List[Tuple[str, str]]  # [(name, module_path), ...]\n    base_imports: List[str] = field(...)  # Additional base imports\n    css_class_prefix: Optional[str]\n    test_pattern_prefix: str = 'test_'  # Prefix for test functions\n    test_pattern_suffix: str = '_examples'  # Suffix for test functions\n    helper_test_suffix: str = 'helper_examples'  # Suffix for helper test functions\n    \n    def get_test_function_pattern(\n            self,\n            module_name:str, # Name of the module (e.g., 'spacing', 'sizing')\n            feature:str # Feature name (e.g., 'basic', 'directional')\n        ) -&gt; str: # Test function name pattern (e.g., 'test_spacing_basic_examples')\n        \"Get the expected test function name for a module and feature.\"\n    \n    def get_helper_test_function(\n            self,\n            module_name:str # Name of the module (e.g., 'spacing', 'sizing')\n        ) -&gt; str: # Helper test function name (e.g., 'test_spacing_helper_examples')\n        \"Get the expected helper test function name for a module.\"\n\n\nVariables\n_active_config: Optional[LibraryConfig] = None\n\n\n\ncolors (colors.ipynb)\n\nColor system builders for Tailwind CSS utilities\n\n\nImport\nfrom cjm_fasthtml_tailwind.builders.colors import (\n    SPECIAL_COLORS,\n    ColorSpec,\n    ColorValue,\n    ColorFamily,\n    ColorShade,\n    is_valid_color_family,\n    is_valid_shade,\n    parse_color_spec,\n    ColoredUtility,\n    ColoredFactory,\n    ColorFamilyProxy,\n    test_colors_enum_examples,\n    test_colors_validation_examples,\n    test_colors_factory_examples,\n    test_colors_opacity_examples,\n    test_colors_arbitrary_examples,\n    test_colors_proxy_examples,\n    test_colors_multiple_utilities_examples,\n    test_colors_practical_usage_examples,\n    test_colors_modifier_examples,\n    get_all_color_families,\n    get_all_shades,\n    get_all_color_specs,\n    test_colors_factory_documentation\n)\n\n\nFunctions\ndef is_valid_color_family(\n    value: str  # The value to check\n) -&gt; bool:  # True if value is a valid color family\n    \"Check if a value is a valid Tailwind color family.\"\ndef is_valid_shade(\n    value: str  # The value to check\n) -&gt; bool:  # True if value is a valid shade\n    \"Check if a value is a valid Tailwind shade.\"\ndef parse_color_spec(\n    value: ColorSpec  # The color specification to parse\n) -&gt; tuple[str, Optional[str]]:  # Tuple of (color_family, shade) or (special_color, None)\n    \"\"\"\n    Parse a color specification into family and shade.\n    \n    Examples:\n    - \"red-500\" -&gt; (\"red\", \"500\")\n    - (\"red\", \"500\") -&gt; (\"red\", \"500\")\n    - \"transparent\" -&gt; (\"transparent\", None)\n    \"\"\"\ndef test_colors_enum_examples()\n    \"Test color family and shade enums.\"\ndef test_colors_validation_examples()\n    \"Test color validation functions.\"\ndef test_colors_factory_examples()\n    \"Test ColoredFactory with various color specifications.\"\ndef test_colors_opacity_examples()\n    \"Test opacity modifiers with color utilities.\"\ndef test_colors_arbitrary_examples()\n    \"Test arbitrary color values and custom properties.\"\ndef test_colors_proxy_examples()\n    \"Test ColorFamilyProxy for dot notation access.\"\ndef test_colors_multiple_utilities_examples()\n    \"Test color system with multiple utility types.\"\ndef test_colors_practical_usage_examples()\n    \"Test practical usage patterns with FastHTML components.\"\ndef test_colors_modifier_examples()\n    \"Test color utilities with modifiers for conditional styling.\"\ndef get_all_color_families(\n) -&gt; List[str]:  # List of all color family names\n    \"Get list of all Tailwind color family names.\"\ndef get_all_shades(\n) -&gt; List[str]:  # List of all shade values\n    \"Get list of all Tailwind shade values.\"\ndef get_all_color_specs(\n) -&gt; List[str]:  # List of all valid color-shade combinations\n    \"Get list of all valid color-shade combinations.\"\ndef test_colors_factory_documentation()\n    \"Test that color factories have proper documentation.\"\n\n\nClasses\nclass ColorFamily(str, Enum):\n    \"Tailwind CSS color families.\"\nclass ColorShade(str, Enum):\n    \"Tailwind CSS color shade values.\"\nclass ColoredUtility:\n    def __init__(\n        self,\n        prefix: str,  # The utility prefix (e.g., 'bg', 'text', 'border')\n        color: Optional[ColorValue] = None,  # The color value\n        opacity: Optional[Union[int, str]] = None  # Optional opacity value (0-100 or arbitrary)\n    )\n    \"Utility class with color and opacity support.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # The utility prefix (e.g., 'bg', 'text', 'border')\n            color: Optional[ColorValue] = None,  # The color value\n            opacity: Optional[Union[int, str]] = None  # Optional opacity value (0-100 or arbitrary)\n        )\n        \"Initialize with prefix, optional color, and optional opacity.\"\n    \n    def opacity(\n            self,\n            value: Union[int, str]  # Opacity value (0-100 or arbitrary)\n        ) -&gt; 'ColoredUtility':  # A new instance with opacity set\n        \"Return a new ColoredUtility instance with opacity value.\"\nclass ColoredFactory:\n    def __init__(\n        self,\n        prefix: str,  # The utility prefix (e.g., 'bg', 'text', 'border')\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for creating color-based utilities.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # The utility prefix (e.g., 'bg', 'text', 'border')\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize factory with prefix and documentation.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about this color factory.\"\nclass ColorFamilyProxy:\n    def __init__(\n        self,\n        prefix: str,  # The utility prefix\n        color_family: str  # The color family name\n    )\n    \"Proxy for accessing color shades via dot notation.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # The utility prefix\n            color_family: str  # The color family name\n        )\n        \"Initialize with prefix and color family.\"\n\n\nVariables\nSPECIAL_COLORS = {5 items}\n\n\n\nCore Utilities Discovery (core_utils_discovery.ipynb)\n\nFunctions to discover and display core utility functions like combine_classes:\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.core_utils_discovery import (\n    CoreUtilityInfo,\n    get_core_utilities\n)\n\n\nFunctions\ndef get_core_utilities(\n    config:Optional[LibraryConfig]=None # Library configuration (uses active config if not provided)\n) -&gt; List[CoreUtilityInfo]: # List of core utility information objects\n    \"Get information about core utility functions.\"\n\n\nClasses\n@dataclass\nclass CoreUtilityInfo:\n    \"Information about a core utility function.\"\n    \n    name: str  # Function name\n    module: str  # Module path (e.g., 'cjm_fasthtml_tailwind.core.base')\n    function: Any  # The actual function object\n    signature: str  # Function signature\n    docstring: str  # Function docstring\n    source: str  # Source code\n    import_statement: str  # How to import this utility\n\n\n\nDisplay Functions (display.ipynb)\n\nFunctions to format and display the discovered information:\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.display import (\n    safe_print,\n    show_navigation_breadcrumbs,\n    show_related_commands,\n    display_modules,\n    display_module_factories,\n    display_all_factories,\n    display_module_examples,\n    display_all_examples,\n    display_example_source,\n    display_module_helpers,\n    display_helper_source,\n    display_all_helpers,\n    display_factory_info,\n    display_search_results,\n    display_core_utility_source,\n    display_core_utilities,\n    display_imports,\n    display_test_code_result\n)\n\n\nFunctions\ndef _handle_broken_pipe():\n    \"\"\"Set up signal handlers to gracefully handle broken pipes.\"\"\"\n    # Ignore SIGPIPE on Unix-like systems\n    try\n    \"Set up signal handlers to gracefully handle broken pipes.\"\ndef safe_print(*args, **kwargs):\n    \"\"\"Print with broken pipe error handling.\n    \n    This wrapper function catches BrokenPipeError and IOError exceptions\n    that occur when output is piped to commands like head, tail, etc.\n    \"\"\"\n    try\n    \"\"\"\n    Print with broken pipe error handling.\n    \n    This wrapper function catches BrokenPipeError and IOError exceptions\n    that occur when output is piped to commands like head, tail, etc.\n    \"\"\"\ndef show_navigation_breadcrumbs(\n    breadcrumbs: List[str],  # List of breadcrumb items\n    config: Optional[LibraryConfig] = None  # Optional configuration\n)\n    \"Display navigation breadcrumbs.\"\ndef show_related_commands(\n    commands: List[Tuple[str, str]],  # List of (description, command) tuples\n    config: Optional[LibraryConfig] = None  # Optional configuration\n)\n    \"Display related navigation commands.\"\ndef display_modules(\n    config:Optional[LibraryConfig]=None # Library configuration (uses active config if not provided)\n): # Returns None\n    \"Display all available utility modules with their documentation.\"\ndef display_module_factories(\n    module_name:str, # Name of the module to display factories for\n    config:Optional[LibraryConfig]=None # Library configuration (uses active config if not provided)\n): # Returns None\n    \"Display all factories in a specific module.\"\ndef display_all_factories(\n    config:Optional[LibraryConfig]=None # Library configuration (uses active config if not provided)\n): # Returns None\n    \"Display all factories across all modules.\"\ndef display_module_examples(\n    module_name: str,  # Name of the module to display examples for\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display all usage examples in a specific module.\"\ndef display_all_examples(\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display all usage examples across all modules.\"\ndef display_example_source(\n    module_name: str,  # Name of the module containing the example\n    feature: str,  # Feature name identifying the example\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display the source code of a specific example function.\"\ndef display_module_helpers(\n    module_name: str,  # Name of the module to display helpers for\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display helper functions available in a specific module.\"\ndef display_helper_source(\n    module_name: str,  # Name of the module containing the helper\n    helper_name: str,  # Name of the helper function\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display the source code of a specific helper function.\"\ndef display_all_helpers(\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display all helper functions across all modules.\"\ndef display_factory_info(\n    module_name: str,  # Name of the module containing the factory\n    factory_name: str,  # Name of the factory to display info for\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display detailed information about a specific factory.\"\ndef display_search_results(\n    results: List[SearchResult],  # List of search results to display\n    query: str,  # The search query that was executed\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display search results in a formatted way.\"\ndef display_core_utility_source(\n    util_name: str,  # Name of the core utility function\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display the source code of a specific core utility function.\"\ndef display_core_utilities(\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display all core utility functions.\"\ndef display_imports(\n    modules: Optional[List[str]] = None,  # List of specific modules to get imports for (None for all)\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display recommended import statements.\"\ndef display_test_code_result(\n    success: bool,  # Whether the code executed successfully\n    stdout: str,  # Standard output from the code execution\n    stderr: str,  # Standard error from the code execution\n    code: str,  # The code that was executed\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n)\n    \"Display the results of test code execution.\"\n\n\n\nDynamic Example Helpers (dynamic_examples.ipynb)\n\nFunctions to generate dynamic examples for help text:\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.dynamic_examples import (\n    get_example_modules,\n    get_example_factories,\n    get_example_features,\n    get_example_helpers,\n    get_example_core_utils,\n    get_combine_classes_example,\n    get_example_test_code\n)\n\n\nFunctions\ndef get_example_modules(\n    limit: int = 2,  # Maximum number of module names to return\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; str:  # Comma-separated list of module names\n    \"Get example module names dynamically.\"\ndef get_example_factories(\n    module_name: str = None,  # Optional module name to get factories from (uses first module if None)\n    limit: int = 4,  # Maximum number of factory names to return\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; str:  # Comma-separated list of factory names\n    \"Get example factory names dynamically.\"\ndef get_example_features(\n    module_name: str = None,  # Optional module name to get features from (uses first module if None)\n    limit: int = 3,  # Maximum number of feature names to return\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; str:  # Comma-separated list of feature names\n    \"Get example feature names dynamically.\"\ndef get_example_helpers(\n    module_name: str = None,  # Optional module name to get helpers from (uses first module if None)\n    limit: int = 2,  # Maximum number of helper names to return\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; str:  # Comma-separated list of helper function names\n    \"Get example helper function names dynamically.\"\ndef get_example_core_utils(\n    limit: int = 2,  # Maximum number of utility names to return\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; str:  # Comma-separated list of core utility names\n    \"Get example core utility names dynamically.\"\ndef get_combine_classes_example(\n) -&gt; str:  # Example code string using combine_classes\n    \"Get a dynamic example of combine_classes usage.\"\ndef get_example_test_code(\n    limit_chars: int = 50  # Maximum length of the returned code example\n) -&gt; str:  # Example code string extracted from test functions\n    \"Get an actual code example from test functions.\"\n\n\n\neffects (effects.ipynb)\n\nShadow, opacity and other visual effect utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.effects import (\n    SHADOW_SIZE_CONFIG,\n    shadow,\n    shadow_color,\n    INSET_SHADOW_SIZE_CONFIG,\n    inset_shadow,\n    inset_shadow_color,\n    RING_WIDTH_CONFIG,\n    ring,\n    ring_color,\n    INSET_RING_WIDTH_CONFIG,\n    inset_ring,\n    inset_ring_color,\n    TEXT_SHADOW_SIZE_CONFIG,\n    text_shadow,\n    text_shadow_color,\n    OPACITY_CONFIG,\n    opacity,\n    mix_blend,\n    bg_blend,\n    mask_clip,\n    mask_composite,\n    mask,\n    mask_linear,\n    mask_t_from,\n    mask_t_to,\n    mask_r_from,\n    mask_r_to,\n    mask_b_from,\n    mask_b_to,\n    mask_l_from,\n    mask_l_to,\n    mask_x_from,\n    mask_x_to,\n    mask_y_from,\n    mask_y_to,\n    mask_radial,\n    mask_circle,\n    mask_ellipse,\n    mask_radial_closest_corner,\n    mask_radial_closest_side,\n    mask_radial_farthest_corner,\n    mask_radial_farthest_side,\n    mask_radial_at_top_left,\n    mask_radial_at_top,\n    mask_radial_at_top_right,\n    mask_radial_at_left,\n    mask_radial_at_center,\n    mask_radial_at_right,\n    mask_radial_at_bottom_left,\n    mask_radial_at_bottom,\n    mask_radial_at_bottom_right,\n    mask_radial_from,\n    mask_radial_to,\n    mask_conic,\n    mask_conic_from,\n    mask_conic_to,\n    mask_mode,\n    mask_origin,\n    mask_position,\n    mask_repeat,\n    mask_size,\n    mask_type,\n    test_effects_shadow_base_examples,\n    test_effects_shadow_size_examples,\n    test_effects_shadow_arbitrary_examples,\n    test_effects_shadow_color_examples,\n    test_effects_shadow_color_arbitrary_examples,\n    test_effects_inset_shadow_size_examples,\n    test_effects_inset_shadow_arbitrary_examples,\n    test_effects_inset_shadow_color_examples,\n    test_effects_ring_width_examples,\n    test_effects_ring_color_examples,\n    test_effects_inset_ring_width_examples,\n    test_effects_inset_ring_color_examples,\n    test_effects_text_shadow_size_examples,\n    test_effects_text_shadow_arbitrary_examples,\n    test_effects_text_shadow_color_examples,\n    test_effects_opacity_examples,\n    test_effects_mix_blend_examples,\n    test_effects_bg_blend_examples,\n    test_effects_mask_clip_examples,\n    test_effects_mask_composite_examples,\n    MaskImageUtility,\n    MaskImageFactory,\n    MaskLinearUtility,\n    MaskLinearFactory,\n    MaskDirectionalUtility,\n    MaskDirectionalFactory,\n    MaskRadialUtility,\n    MaskRadialFactory,\n    MaskConicUtility,\n    MaskConicFactory,\n    test_effects_mask_basic_examples,\n    test_effects_mask_linear_examples,\n    test_effects_mask_directional_examples,\n    test_effects_mask_radial_examples,\n    test_effects_mask_conic_examples,\n    test_effects_mask_properties_examples,\n    test_effects_shadow_fasthtml_examples,\n    test_effects_shadow_composition_fasthtml_examples,\n    test_effects_comprehensive_fasthtml_examples,\n    test_effects_mask_fasthtml_examples\n)\n\n\nFunctions\ndef test_effects_shadow_base_examples()\n    \"Test shadow size utilities.\"\ndef test_effects_shadow_size_examples()\n    \"Test shadow size utilities.\"\ndef test_effects_shadow_arbitrary_examples()\n    \"Test shadow utilities with arbitrary and custom values.\"\ndef test_effects_shadow_color_examples()\n    \"Test shadow color utilities with various color values.\"\ndef test_effects_shadow_color_arbitrary_examples()\n    \"Test shadow color utilities with arbitrary values.\"\ndef test_effects_inset_shadow_size_examples()\n    \"Test inset shadow size utilities.\"\ndef test_effects_inset_shadow_arbitrary_examples()\n    \"Test inset shadow utilities with arbitrary and custom values.\"\ndef test_effects_inset_shadow_color_examples()\n    \"Test inset shadow color utilities with various color values.\"\ndef test_effects_ring_width_examples()\n    \"Test ring width utilities.\"\ndef test_effects_ring_color_examples()\n    \"Test ring color utilities with various color values.\"\ndef test_effects_inset_ring_width_examples()\n    \"Test inset ring width utilities.\"\ndef test_effects_inset_ring_color_examples()\n    \"Test inset ring color utilities with various color values.\"\ndef test_effects_text_shadow_size_examples()\n    \"Test text shadow size utilities.\"\ndef test_effects_text_shadow_arbitrary_examples()\n    \"Test text shadow utilities with arbitrary and custom values.\"\ndef test_effects_text_shadow_color_examples()\n    \"Test text shadow color utilities with various color values.\"\ndef test_effects_opacity_examples()\n    \"Test opacity utilities with various values.\"\ndef test_effects_mix_blend_examples()\n    \"Test mix blend mode utilities.\"\ndef test_effects_bg_blend_examples()\n    \"Test background blend mode utilities.\"\ndef test_effects_mask_clip_examples()\n    \"Test mask clip utilities.\"\ndef test_effects_mask_composite_examples()\n    \"Test mask composite utilities.\"\ndef test_effects_mask_basic_examples()\n    \"Test basic mask image utilities.\"\ndef test_effects_mask_linear_examples()\n    \"Test linear gradient mask utilities.\"\ndef test_effects_mask_directional_examples()\n    \"Test directional mask gradient utilities.\"\ndef test_effects_mask_radial_examples()\n    \"Test radial gradient mask utilities.\"\ndef test_effects_mask_conic_examples()\n    \"Test conic gradient mask utilities.\"\ndef test_effects_mask_properties_examples()\n    \"Test mask property utilities (mode, origin, position, etc.).\"\ndef test_effects_shadow_fasthtml_examples()\n    \"Test shadow utilities in practical FastHTML component examples.\"\ndef test_effects_shadow_composition_fasthtml_examples()\n    \"Test composing shadow size and color utilities.\"\ndef test_effects_comprehensive_fasthtml_examples()\n    \"Test comprehensive usage of all effect utilities.\"\ndef test_effects_mask_fasthtml_examples()\n    \"Test mask utilities in practical FastHTML component examples.\"\n\n\nClasses\nclass MaskImageUtility:\n    def __init__(\n        self,\n        value: Optional[str] = None,  # Mask image value (none, custom property, or arbitrary)\n    )\n    \"Utility class for mask images.\"\n    \n    def __init__(\n            self,\n            value: Optional[str] = None,  # Mask image value (none, custom property, or arbitrary)\n        )\n        \"Initialize mask image utility with optional value.\"\nclass MaskImageFactory:\n    def __init__(\n        self,\n        doc: Optional[str] = None  # Documentation\n    )\n    \"Factory for basic mask image utilities.\"\n    \n    def __init__(\n            self,\n            doc: Optional[str] = None  # Documentation\n        )\n        \"Initialize mask image factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Factory information\n        \"Get information about the mask image factory.\"\nclass MaskLinearUtility:\n    def __init__(\n        self,\n        angle: Optional[Union[int, str]] = None,  # Angle in degrees or custom value\n        negative: bool = False  # Whether to negate the angle\n    )\n    \"Utility class for linear gradient masks with angle support.\"\n    \n    def __init__(\n            self,\n            angle: Optional[Union[int, str]] = None,  # Angle in degrees or custom value\n            negative: bool = False  # Whether to negate the angle\n        )\n        \"Initialize linear gradient mask utility.\"\nclass MaskLinearFactory:\n    def __init__(\n        self,\n        doc: Optional[str] = None  # Documentation\n    )\n    \"Factory for linear gradient mask utilities with angle support.\"\n    \n    def __init__(\n            self,\n            doc: Optional[str] = None  # Documentation\n        )\n        \"Initialize linear gradient mask factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Factory information\n        \"Get information about the linear gradient mask factory.\"\nclass MaskDirectionalUtility:\n    def __init__(\n        self,\n        direction: str,  # Direction (t, r, b, l, x, y)\n        position: str,  # Position type (from or to)\n        value: Optional[Union[int, str]] = None,  # Value (number, percentage, color, etc.)\n    )\n    \"Utility class for directional mask gradients with from/to support.\"\n    \n    def __init__(\n            self,\n            direction: str,  # Direction (t, r, b, l, x, y)\n            position: str,  # Position type (from or to)\n            value: Optional[Union[int, str]] = None,  # Value (number, percentage, color, etc.)\n        )\n        \"Initialize directional mask gradient utility.\"\nclass MaskDirectionalFactory:\n    def __init__(\n        self,\n        direction: str,  # Direction (t, r, b, l, x, y)\n        position: str,  # Position type (from or to)\n        doc: Optional[str] = None  # Documentation\n    )\n    \"Factory for directional mask gradient utilities.\"\n    \n    def __init__(\n            self,\n            direction: str,  # Direction (t, r, b, l, x, y)\n            position: str,  # Position type (from or to)\n            doc: Optional[str] = None  # Documentation\n        )\n        \"Initialize directional mask factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Factory information\n        \"Get information about this directional mask factory.\"\nclass MaskRadialUtility:\n    def __init__(\n        self,\n        value: Optional[str] = None,  # Arbitrary radial gradient value\n    )\n    \"Utility class for radial gradient masks.\"\n    \n    def __init__(\n            self,\n            value: Optional[str] = None,  # Arbitrary radial gradient value\n        )\n        \"Initialize radial gradient mask utility.\"\nclass MaskRadialFactory:\n    def __init__(\n        self,\n        doc: Optional[str] = None  # Documentation\n    )\n    \"Factory for radial gradient mask utilities.\"\n    \n    def __init__(\n            self,\n            doc: Optional[str] = None  # Documentation\n        )\n        \"Initialize radial gradient mask factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Factory information\n        \"Get information about the radial gradient mask factory.\"\nclass MaskConicUtility:\n    def __init__(\n        self,\n        angle: Optional[Union[int, str]] = None,  # Starting angle in degrees or custom value\n        negative: bool = False  # Whether to negate the angle\n    )\n    \"Utility class for conic gradient masks with angle support.\"\n    \n    def __init__(\n            self,\n            angle: Optional[Union[int, str]] = None,  # Starting angle in degrees or custom value\n            negative: bool = False  # Whether to negate the angle\n        )\n        \"Initialize conic gradient mask utility.\"\nclass MaskConicFactory:\n    def __init__(\n        self,\n        doc: Optional[str] = None  # Documentation\n    )\n    \"Factory for conic gradient mask utilities with angle support.\"\n    \n    def __init__(\n            self,\n            doc: Optional[str] = None  # Documentation\n        )\n        \"Initialize conic gradient mask factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Factory information\n        \"Get information about the conic gradient mask factory.\"\n\n\nVariables\nSHADOW_SIZE_CONFIG\nshadow  # Box shadow factory\nshadow_color  # Create shadow color factory using the existing ColoredFactory\nINSET_SHADOW_SIZE_CONFIG\ninset_shadow  # Inset box shadow factory\ninset_shadow_color  # Create inset shadow color factory using the existing ColoredFactory\nRING_WIDTH_CONFIG\nring  # Ring width factory\nring_color  # Create ring color factory using the existing ColoredFactory\nINSET_RING_WIDTH_CONFIG\ninset_ring  # Inset ring width factory\ninset_ring_color  # Create inset ring color factory using the existing ColoredFactory\nTEXT_SHADOW_SIZE_CONFIG\ntext_shadow  # Text shadow factory\ntext_shadow_color  # Create text shadow color factory using the existing ColoredFactory\nOPACITY_CONFIG\nopacity  # Opacity factory\nmask  # Create the basic mask image factory instance\nmask_linear  # Create the linear gradient mask factory instance\nmask_t_from  # Top direction - from\nmask_t_to  # Top direction - to\nmask_r_from  # Right direction - from\nmask_r_to  # Right direction - to\nmask_b_from  # Bottom direction - from\nmask_b_to  # Bottom direction - to\nmask_l_from  # Left direction - from\nmask_l_to  # Left direction - to\nmask_x_from  # Horizontal (x) direction - from\nmask_x_to  # Horizontal (x) direction - to\nmask_y_from  # Vertical (y) direction - from\nmask_y_to  # Vertical (y) direction - to\nmask_radial  # Create the radial gradient mask factory instance\n\n\n\nExample Discovery (example_discovery.ipynb)\n\nFunctions to discover and extract test example functions:\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.example_discovery import (\n    ExampleInfo,\n    get_example_pattern,\n    extract_test_examples_from_module,\n    list_all_examples,\n    list_module_examples,\n    get_example_by_name\n)\n\n\nFunctions\ndef get_example_pattern(module_name:str):\n    if \".\" in module_name\ndef extract_test_examples_from_module(\n    module: Any,  # The module to extract test examples from\n    module_name: str  # The name of the module\n) -&gt; List[ExampleInfo]:  # List of ExampleInfo objects\n    \"Extract all test example functions from a module.\"\ndef list_all_examples(\n) -&gt; Dict[str, List[ExampleInfo]]:  # Dictionary mapping module names to their examples\n    \"List all test example functions across all utility modules.\"\ndef list_module_examples(\n    module_name: str  # Name of the module to inspect\n) -&gt; List[ExampleInfo]:  # List of ExampleInfo objects\n    \"List all test example functions in a specific utility module.\"\ndef get_example_by_name(\n    module_name: str,  # Name of the module\n    feature: str  # Feature name (e.g., 'basic', 'directional')\n) -&gt; Optional[ExampleInfo]:  # ExampleInfo object or None if not found\n    \"Get a specific example by module name and feature.\"\n\n\nClasses\n@dataclass\nclass ExampleInfo:\n    \"Information about a discovered test example function.\"\n    \n    name: str  # Function name (e.g., 'test_spacing_basic_examples')\n    module_name: str  # Module where it was found (e.g., 'spacing')\n    feature: str  # Feature being demonstrated (e.g., 'basic')\n    function: Any  # The actual function object\n    source: str  # Source code of the function\n    docstring: str  # Docstring of the function\n\n\n\nexplorer (explorer.ipynb)\n\nCLI tool for API exploration of cjm-fasthtml-tailwind utilities\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.explorer import (\n    add_modules_parser,\n    add_factories_parser,\n    add_factory_parser,\n    add_examples_parser,\n    add_example_parser,\n    add_helpers_parser,\n    add_helper_parser,\n    add_search_parser,\n    add_test_code_parser,\n    add_core_utils_parser,\n    add_core_util_parser,\n    add_imports_parser,\n    add_scan_parser,\n    dispatch_command,\n    handle_search_command,\n    handle_test_code_command,\n    handle_scan_command,\n    create_help_description,\n    create_example_usage_flow,\n    create_help_epilogue,\n    setup_argument_parser,\n    main\n)\n\n\nFunctions\ndef add_modules_parser(\n    subparsers:argparse._SubParsersAction # Subparsers object to add the 'modules' command to\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'modules' command\n    \"Add the 'modules' command parser.\"\ndef add_factories_parser(\n    subparsers:argparse._SubParsersAction, # Subparsers object to add the 'factories' command to\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'factories' command\n    \"Add the 'factories' command parser.\"\ndef add_factory_parser(\n    subparsers:argparse._SubParsersAction # Subparsers object to add the 'factory' command to\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'factory' command\n    \"Add the 'factory' command parser.\"\ndef add_examples_parser(\n    subparsers:argparse._SubParsersAction # Subparsers object to add the 'examples' command to\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'examples' command\n    \"Add the 'examples' command parser.\"\ndef add_example_parser(\n    subparsers:argparse._SubParsersAction # Subparsers object to add the 'example' command to\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'example' command\n    \"Add the 'example' command parser.\"\ndef add_helpers_parser(\n    subparsers:argparse._SubParsersAction # Subparsers object to add the 'helpers' command to\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'helpers' command\n    \"Add the 'helpers' command parser.\"\ndef add_helper_parser(\n    subparsers:argparse._SubParsersAction # Subparsers object to add the 'helper' command to\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'helper' command\n    \"Add the 'helper' command parser.\"\ndef add_search_parser(\n    subparsers:argparse._SubParsersAction # Subparsers object to add the 'search' command to\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'search' command\n    \"Add the 'search' command parser.\"\ndef add_test_code_parser(\n    subparsers:argparse._SubParsersAction, # Subparsers object to add the 'test-code' command to\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'test-code' command\n    \"Add the 'test-code' command parser.\"\ndef add_core_utils_parser(\n    subparsers:argparse._SubParsersAction # Subparsers object to add the 'core-utils' command to\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'core-utils' command\n    \"Add the 'core-utils' command parser.\"\ndef add_core_util_parser(\n    subparsers:argparse._SubParsersAction # Subparsers object to add the 'core-util' command to\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'core-util' command\n    \"Add the 'core-util' command parser.\"\ndef add_imports_parser(\n    subparsers:argparse._SubParsersAction, # Subparsers object to add the 'imports' command to\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'imports' command\n    \"Add the 'imports' command parser.\"\ndef add_scan_parser(\n    subparsers:argparse._SubParsersAction, # Subparsers object to add the 'scan' command to\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; argparse.ArgumentParser: # Argument parser for the 'scan' command\n    \"Add the 'scan' command parser.\"\ndef dispatch_command(\n    args:argparse.Namespace # Parsed command-line arguments\n): # Dispatches to the appropriate command handler\n    \"Dispatch the parsed arguments to the appropriate handler.\"\ndef handle_search_command(\n    args:argparse.Namespace # Parsed command-line arguments for the search command\n): # Executes the search command with the provided arguments\n    \"Handle the search command.\"\ndef handle_test_code_command(\n    args:argparse.Namespace, # Parsed command-line arguments for the test-code command\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n): # Executes the test-code command with the provided arguments\n    \"Handle the test-code command.\"\ndef handle_scan_command(\n    args:argparse.Namespace # Parsed command-line arguments for the scan command\n): # Executes the scan command with the provided arguments\n    \"Handle the scan command.\"\ndef create_help_description(\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; str: # Comprehensive description string for the CLI tool's help message\n    \"Create a comprehensive description for the CLI tool's help message\"\ndef create_example_usage_flow(\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; str: # Formatted example usage flow string with aligned comments\n    \"Create an example usage flow\"\ndef create_help_epilogue(\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; str: # Comprehensive epilogue string for the CLI tool's help message\n    \"Create a comprehensive epilogue for the CLI tool's help message\"\ndef setup_argument_parser(\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; argparse.ArgumentParser: # Configured argument parser with all subcommands\n    \"Set up the main argument parser with all subcommands.\"\ndef main() -&gt; None: # Executes the CLI with parsed arguments\n    \"\"\"CLI entry point for exploring cjm-fasthtml-tailwind utilities.\"\"\"\n    # Set up the argument parser\n    parser = setup_argument_parser()\n    \n    # Parse arguments\n    args = parser.parse_args()\n    \n    # If no command specified, show help\n    if args.command is None\n    \"CLI entry point for exploring cjm-fasthtml-tailwind utilities.\"\n\n\n\nFactory Extraction (factory_extraction.ipynb)\n\nFunctions to extract BaseFactory instances from modules:\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.factory_extraction import (\n    FactoryInfo,\n    extract_factories_from_module,\n    list_all_factories,\n    list_module_factories,\n    get_factory_by_name\n)\n\n\nFunctions\ndef extract_factories_from_module(\n    module: Any,  # The module to extract factories from\n    module_name: str  # The name of the module\n) -&gt; List[FactoryInfo]:  # List of FactoryInfo objects\n    \"Extract all BaseFactory instances from a module.\"\ndef list_all_factories(\n) -&gt; Dict[str, List[FactoryInfo]]:  # Dictionary mapping module names to their factories\n    \"List all factory instances across all utility modules.\"\ndef list_module_factories(\n    module_name: str  # Name of the module to inspect (e.g., 'spacing', 'sizing')\n) -&gt; List[FactoryInfo]:  # List of FactoryInfo objects for the module\n    \"List all factory instances in a specific utility module.\"\ndef get_factory_by_name(\n    module_name: str,  # Name of the module\n    factory_name: str  # Name of the factory (e.g., 'p', 'w', 'flex')\n) -&gt; Optional[FactoryInfo]:  # FactoryInfo object or None if not found\n    \"Get a specific factory by module name and factory name.\"\n\n\nClasses\n@dataclass\nclass FactoryInfo:\n    \"Information about a discovered factory instance.\"\n    \n    name: str  # Factory variable name (e.g., 'p', 'w', 'flex')\n    factory: BaseFactory  # The actual factory instance\n    doc: str  # Documentation from the factory\n    module_name: str  # Module where it was found\n\n\n\nfilters (filters.ipynb)\n\nFilter utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.filters import (\n    filter_none,\n    BLUR_SCALES,\n    blur,\n    BRIGHTNESS_VALUES,\n    brightness_config,\n    brightness,\n    CONTRAST_VALUES,\n    contrast,\n    DROP_SHADOW_SCALES,\n    drop_shadow,\n    drop_shadow_color,\n    grayscale,\n    HUE_ROTATE_VALUES,\n    hue_rotate_config,\n    hue_rotate,\n    invert,\n    SATURATE_VALUES,\n    saturate,\n    sepia,\n    backdrop_filter_none,\n    backdrop_blur,\n    backdrop_brightness,\n    backdrop_contrast,\n    backdrop_saturate,\n    backdrop_opacity,\n    backdrop_grayscale,\n    backdrop_sepia,\n    backdrop_hue_rotate,\n    test_filters_control_examples,\n    BlurScale,\n    test_filters_blur_examples,\n    test_filters_brightness_examples,\n    test_filters_contrast_examples,\n    DropShadowScale,\n    test_filters_drop_shadow_examples,\n    test_filters_grayscale_examples,\n    test_filters_hue_rotate_examples,\n    test_filters_invert_examples,\n    test_filters_saturate_examples,\n    test_filters_sepia_examples,\n    test_filters_backdrop_examples,\n    test_filters_fasthtml_examples\n)\n\n\nFunctions\ndef test_filters_control_examples()\n    \"Test filter control utilities.\"\ndef test_filters_blur_examples()\n    \"Test blur filter utilities.\"\ndef test_filters_brightness_examples()\n    \"Test brightness filter utilities.\"\ndef test_filters_contrast_examples()\n    \"Test contrast filter utilities.\"\ndef test_filters_drop_shadow_examples()\n    \"Test drop shadow filter utilities.\"\ndef test_filters_grayscale_examples()\n    \"Test grayscale filter utilities.\"\ndef test_filters_hue_rotate_examples()\n    \"Test hue rotate filter utilities.\"\ndef test_filters_invert_examples()\n    \"Test invert filter utilities.\"\ndef test_filters_saturate_examples()\n    \"Test saturate filter utilities.\"\ndef test_filters_sepia_examples()\n    \"Test sepia filter utilities.\"\ndef test_filters_backdrop_examples()\n    \"Test backdrop filter utilities.\"\ndef test_filters_fasthtml_examples()\n    \"Test filter utilities in practical FastHTML component examples.\"\n\n\nClasses\n@dataclass\nclass BlurScale:\n    \"Represents a blur scale with name and pixel value.\"\n    \n    name: str\n    pixels: str\n    var: str\n    \n    def format(\n            self\n        ) -&gt; str: # The name of this blur scale for use in Tailwind classes\n        \"Format as Tailwind class suffix.\"\n@dataclass\nclass DropShadowScale:\n    \"Represents a drop shadow scale with name and shadow value.\"\n    \n    name: str\n    shadow: str\n    var: str\n    \n    def format(\n            self\n        ) -&gt; str: # The name of this drop shadow scale for use in Tailwind classes\n        \"Format as Tailwind class suffix.\"\n\n\nVariables\nfilter_none  # Remove filters\nBLUR_SCALES = [7 items]\nBRIGHTNESS_VALUES = [11 items]\nCONTRAST_VALUES = [7 items]\nDROP_SHADOW_SCALES = [6 items]\nHUE_ROTATE_VALUES = [6 items]\nSATURATE_VALUES = [5 items]\nbackdrop_filter_none  # Remove backdrop filters\n\n\n\nflexbox_and_grid (flexbox_and_grid.ipynb)\n\nFlexbox and CSS Grid utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.flexbox_and_grid import (\n    flex_display,\n    grid_display,\n    FLEX_BASIS_CONFIG,\n    basis,\n    FLEX_DIRECTION_VALUES,\n    flex_direction,\n    FLEX_WRAP_VALUES,\n    flex_wrap,\n    FLEX_CONFIG,\n    flex,\n    FLEX_GROW_CONFIG,\n    grow,\n    FLEX_SHRINK_CONFIG,\n    shrink,\n    ORDER_CONFIG,\n    order,\n    GRID_COLS_CONFIG,\n    grid_cols,\n    GRID_ROWS_CONFIG,\n    grid_rows,\n    COL_SPAN_CONFIG,\n    COL_START_END_CONFIG,\n    col_span,\n    col_start,\n    col_end,\n    col,\n    ROW_SPAN_CONFIG,\n    ROW_START_END_CONFIG,\n    row_span,\n    row_start,\n    row_end,\n    row,\n    GRID_FLOW_VALUES,\n    grid_flow,\n    AUTO_COLS_VALUES,\n    AUTO_ROWS_VALUES,\n    auto_cols,\n    auto_rows,\n    gap,\n    JUSTIFY_CONTENT_VALUES,\n    justify,\n    JUSTIFY_ITEMS_VALUES,\n    justify_items,\n    JUSTIFY_SELF_VALUES,\n    justify_self,\n    ALIGN_CONTENT_VALUES,\n    content,\n    ALIGN_ITEMS_VALUES,\n    items,\n    ALIGN_SELF_VALUES,\n    self_align,\n    PLACE_CONTENT_VALUES,\n    place_content,\n    PLACE_ITEMS_VALUES,\n    place_items,\n    PLACE_SELF_VALUES,\n    place_self,\n    FlexDisplayFactory,\n    GridDisplayFactory,\n    test_flexbox_and_grid_display_examples,\n    test_flexbox_and_grid_basis_examples,\n    test_flexbox_and_grid_direction_examples,\n    test_flexbox_and_grid_wrap_examples,\n    test_flexbox_and_grid_flex_examples,\n    GrowFactory,\n    test_flexbox_and_grid_grow_examples,\n    ShrinkFactory,\n    test_flexbox_and_grid_shrink_examples,\n    test_flexbox_and_grid_order_examples,\n    test_flexbox_and_grid_template_columns_examples,\n    test_flexbox_and_grid_template_rows_examples,\n    ColFactory,\n    test_flexbox_and_grid_column_examples,\n    RowFactory,\n    test_flexbox_and_grid_row_examples,\n    test_flexbox_and_grid_flow_examples,\n    AutoColsFactory,\n    AutoRowsFactory,\n    test_flexbox_and_grid_auto_cols_rows_examples,\n    GapFactory,\n    test_flexbox_and_grid_gap_examples,\n    test_flexbox_and_grid_justify_examples,\n    test_flexbox_and_grid_align_examples,\n    test_flexbox_and_grid_place_examples,\n    test_flexbox_and_grid_fasthtml_examples,\n    flex_center,\n    flex_between,\n    flex_col_center,\n    grid_center,\n    responsive_grid,\n    test_flexbox_and_grid_helper_examples\n)\n\n\nFunctions\ndef test_flexbox_and_grid_display_examples(\n)\n    \"Test flex and grid display utilities.\"\ndef test_flexbox_and_grid_basis_examples(\n)\n    \"Test flex basis utilities with various scale values.\"\ndef test_flexbox_and_grid_direction_examples(\n)\n    \"Test flex direction utilities.\"\ndef test_flexbox_and_grid_wrap_examples(\n)\n    \"Test flex wrap utilities.\"\ndef test_flexbox_and_grid_flex_examples(\n)\n    \"Test flex utilities for combined grow/shrink properties.\"\ndef test_flexbox_and_grid_grow_examples(\n)\n    \"Test flex grow utilities.\"\ndef test_flexbox_and_grid_shrink_examples(\n)\n    \"Test flex shrink utilities.\"\ndef test_flexbox_and_grid_order_examples(\n)\n    \"Test order utilities for flex and grid items.\"\ndef test_flexbox_and_grid_template_columns_examples(\n)\n    \"Test grid template columns utilities.\"\ndef test_flexbox_and_grid_template_rows_examples(\n)\n    \"Test grid template rows utilities.\"\ndef test_flexbox_and_grid_column_examples(\n)\n    \"Test grid column utilities including span, start, and end.\"\ndef test_flexbox_and_grid_row_examples(\n)\n    \"Test grid row utilities including span, start, and end.\"\ndef test_flexbox_and_grid_flow_examples(\n)\n    \"Test grid auto flow utilities.\"\ndef test_flexbox_and_grid_auto_cols_rows_examples(\n)\n    \"Test grid auto columns and rows utilities.\"\ndef test_flexbox_and_grid_gap_examples(\n)\n    \"Test gap utilities for flexbox and grid containers.\"\ndef test_flexbox_and_grid_justify_examples(\n)\n    \"Test justify utilities for flex and grid containers.\"\ndef test_flexbox_and_grid_align_examples(\n)\n    \"Test align utilities for flex and grid containers.\"\ndef test_flexbox_and_grid_place_examples(\n)\n    \"Test place utilities for grid containers.\"\ndef test_flexbox_and_grid_fasthtml_examples(\n)\n    \"Test flexbox and grid utilities in practical FastHTML component examples.\"\ndef flex_center(\n) -&gt; str:  # Combined CSS classes for centered flex container\n    \"Create classes for a flex container that centers its content.\"\ndef flex_between(\n) -&gt; str:  # Combined CSS classes for flex container with space between\n    \"Create classes for a flex container with space between items.\"\ndef flex_col_center(\n) -&gt; str:  # Combined CSS classes for centered vertical flex container\n    \"Create classes for a vertical flex container that centers its content.\"\ndef grid_center(\n) -&gt; str:  # Combined CSS classes for centered grid container\n    \"Create classes for a grid container that centers its content.\"\ndef responsive_grid(\n    mobile: int = 1,  # Number of columns on mobile devices\n    tablet: int = 2,  # Number of columns on tablet devices\n    desktop: int = 3,  # Number of columns on desktop devices\n    gap_size: TailwindScale = 4  # Gap size between grid items\n) -&gt; str:  # Combined CSS classes for responsive grid\n    \"Create responsive grid classes with customizable breakpoints.\"\ndef test_flexbox_and_grid_helper_examples(\n)\n    \"Test helper functions for common flexbox and grid patterns.\"\n\n\nClasses\nclass FlexDisplayFactory:\n    def __init__(self):\n        \"Initialize with flex display value.\"\n        super().__init__(\"flex\", \"Display utility for creating a flex container\")\n    \n    @property\n    def inline(\n        self\n    ) -&gt; str:  # The 'inline-flex' CSS class\n    \"Factory for flex display utilities.\"\n    \n    def __init__(self):\n            \"Initialize with flex display value.\"\n            super().__init__(\"flex\", \"Display utility for creating a flex container\")\n        \n        @property\n        def inline(\n            self\n        ) -&gt; str:  # The 'inline-flex' CSS class\n        \"Initialize with flex display value.\"\n    \n    def inline(\n            self\n        ) -&gt; str:  # The 'inline-flex' CSS class\n        \"Return the inline-flex utility class.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this flex display factory.\"\nclass GridDisplayFactory:\n    def __init__(self):\n        \"Initialize with grid display value.\"\n        super().__init__(\"grid\", \"Display utility for creating a grid container\")\n    \n    @property\n    def inline(\n        self\n    ) -&gt; str:  # The 'inline-grid' CSS class\n    \"Factory for grid display utilities.\"\n    \n    def __init__(self):\n            \"Initialize with grid display value.\"\n            super().__init__(\"grid\", \"Display utility for creating a grid container\")\n        \n        @property\n        def inline(\n            self\n        ) -&gt; str:  # The 'inline-grid' CSS class\n        \"Initialize with grid display value.\"\n    \n    def inline(\n            self\n        ) -&gt; str:  # The 'inline-grid' CSS class\n        \"Return the inline-grid utility class.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this grid display factory.\"\nclass GrowFactory:\n    def __init__(self):\n        \"Initialize with grow configuration and documentation.\"\n        super().__init__(\"grow\", FLEX_GROW_CONFIG, \"Flex grow utilities for controlling how flex items grow\")\n    \n    def __call__(\n        self,\n        value: Optional[TailwindScale] = None  # The grow value (defaults to 1 if None)\n    ) -&gt; ScaledUtility:  # A new grow utility instance\n    \"Special factory for grow that defaults to grow-1 when called without args.\"\n    \n    def __init__(self):\n            \"Initialize with grow configuration and documentation.\"\n            super().__init__(\"grow\", FLEX_GROW_CONFIG, \"Flex grow utilities for controlling how flex items grow\")\n        \n        def __call__(\n            self,\n            value: Optional[TailwindScale] = None  # The grow value (defaults to 1 if None)\n        ) -&gt; ScaledUtility:  # A new grow utility instance\n        \"Initialize with grow configuration and documentation.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this grow factory.\"\nclass ShrinkFactory:\n    def __init__(self):\n        \"Initialize with shrink configuration and documentation.\"\n        super().__init__(\"shrink\", FLEX_SHRINK_CONFIG, \"Flex shrink utilities for controlling how flex items shrink\")\n    \n    def __call__(\n        self,\n        value: Optional[TailwindScale] = None  # The shrink value (defaults to 1 if None)\n    ) -&gt; ScaledUtility:  # A new shrink utility instance\n    \"Special factory for shrink that defaults to shrink-1 when called without args.\"\n    \n    def __init__(self):\n            \"Initialize with shrink configuration and documentation.\"\n            super().__init__(\"shrink\", FLEX_SHRINK_CONFIG, \"Flex shrink utilities for controlling how flex items shrink\")\n        \n        def __call__(\n            self,\n            value: Optional[TailwindScale] = None  # The shrink value (defaults to 1 if None)\n        ) -&gt; ScaledUtility:  # A new shrink utility instance\n        \"Initialize with shrink configuration and documentation.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this shrink factory.\"\nclass ColFactory:\n    def __init__(self):\n        \"Initialize with 'col' prefix and column configuration.\"\n        super().__init__(\"col\", COL_START_END_CONFIG, \"Grid column utilities for arbitrary grid-column values\")\n    \n    @property\n    def auto(\n        self\n    ) -&gt; str:  # The 'col-auto' CSS class\n    \"Special factory for grid-column shorthand.\"\n    \n    def __init__(self):\n            \"Initialize with 'col' prefix and column configuration.\"\n            super().__init__(\"col\", COL_START_END_CONFIG, \"Grid column utilities for arbitrary grid-column values\")\n        \n        @property\n        def auto(\n            self\n        ) -&gt; str:  # The 'col-auto' CSS class\n        \"Initialize with 'col' prefix and column configuration.\"\n    \n    def auto(\n            self\n        ) -&gt; str:  # The 'col-auto' CSS class\n        \"Return the col-auto utility class.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this column factory.\"\nclass RowFactory:\n    def __init__(self):\n        \"Initialize with 'row' prefix and row configuration.\"\n        super().__init__(\"row\", ROW_START_END_CONFIG, \"Grid row utilities for arbitrary grid-row values\")\n    \n    @property\n    def auto(\n        self\n    ) -&gt; str:  # The 'row-auto' CSS class\n    \"Special factory for grid-row shorthand.\"\n    \n    def __init__(self):\n            \"Initialize with 'row' prefix and row configuration.\"\n            super().__init__(\"row\", ROW_START_END_CONFIG, \"Grid row utilities for arbitrary grid-row values\")\n        \n        @property\n        def auto(\n            self\n        ) -&gt; str:  # The 'row-auto' CSS class\n        \"Initialize with 'row' prefix and row configuration.\"\n    \n    def auto(\n            self\n        ) -&gt; str:  # The 'row-auto' CSS class\n        \"Return the row-auto utility class.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this row factory.\"\nclass AutoColsFactory:\n    def __init__(self):\n        \"Initialize with auto columns values and documentation.\"\n        super().__init__(AUTO_COLS_VALUES, \"Grid auto columns utilities for controlling the size of implicitly-created grid columns\")\n    \n    def __call__(\n        self,\n        value: str  # Custom auto-cols value (e.g., '200px', 'minmax(0, 1fr)')\n    ) -&gt; str:  # The formatted auto-cols CSS class\n    \"Factory for auto-cols with custom value support.\"\n    \n    def __init__(self):\n            \"Initialize with auto columns values and documentation.\"\n            super().__init__(AUTO_COLS_VALUES, \"Grid auto columns utilities for controlling the size of implicitly-created grid columns\")\n        \n        def __call__(\n            self,\n            value: str  # Custom auto-cols value (e.g., '200px', 'minmax(0, 1fr)')\n        ) -&gt; str:  # The formatted auto-cols CSS class\n        \"Initialize with auto columns values and documentation.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this auto columns factory.\"\nclass AutoRowsFactory:\n    def __init__(self):\n        \"Initialize with auto rows values and documentation.\"\n        super().__init__(AUTO_ROWS_VALUES, \"Grid auto rows utilities for controlling the size of implicitly-created grid rows\")\n    \n    def __call__(\n        self,\n        value: str  # Custom auto-rows value (e.g., '200px', 'minmax(0, 1fr)')\n    ) -&gt; str:  # The formatted auto-rows CSS class\n    \"Factory for auto-rows with custom value support.\"\n    \n    def __init__(self):\n            \"Initialize with auto rows values and documentation.\"\n            super().__init__(AUTO_ROWS_VALUES, \"Grid auto rows utilities for controlling the size of implicitly-created grid rows\")\n        \n        def __call__(\n            self,\n            value: str  # Custom auto-rows value (e.g., '200px', 'minmax(0, 1fr)')\n        ) -&gt; str:  # The formatted auto-rows CSS class\n        \"Initialize with auto rows values and documentation.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this auto rows factory.\"\nclass GapFactory:\n    def __init__(self):\n        \"Initialize with base gap and directional gap factories.\"\n        super().__init__(\"Gap utilities for controlling gutters between grid and flexbox items\")\n        # Base gap utility\n        self._base = ScaledFactory(\"gap\", SPACING_CONFIG, \"Gap utilities for controlling gutters between grid and flexbox items\")\n        # Directional gap utilities with hyphens\n        self.x = ScaledFactory(\"gap-x\", SPACING_CONFIG, \"Column gap utilities for controlling gutters between columns\")\n        self.y = ScaledFactory(\"gap-y\", SPACING_CONFIG, \"Row gap utilities for controlling gutters between rows\")\n    \n    def __call__(\n        self,\n        value: Optional[TailwindScale] = None  # The gap value (numeric, px, or arbitrary)\n    ) -&gt; ScaledUtility:  # A new gap utility instance\n    \"Special factory for gap utilities that use hyphenated directions.\"\n    \n    def __init__(self):\n            \"Initialize with base gap and directional gap factories.\"\n            super().__init__(\"Gap utilities for controlling gutters between grid and flexbox items\")\n            # Base gap utility\n            self._base = ScaledFactory(\"gap\", SPACING_CONFIG, \"Gap utilities for controlling gutters between grid and flexbox items\")\n            # Directional gap utilities with hyphens\n            self.x = ScaledFactory(\"gap-x\", SPACING_CONFIG, \"Column gap utilities for controlling gutters between columns\")\n            self.y = ScaledFactory(\"gap-y\", SPACING_CONFIG, \"Row gap utilities for controlling gutters between rows\")\n        \n        def __call__(\n            self,\n            value: Optional[TailwindScale] = None  # The gap value (numeric, px, or arbitrary)\n        ) -&gt; ScaledUtility:  # A new gap utility instance\n        \"Initialize with base gap and directional gap factories.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the gap factory.\"\n\n\nVariables\nflex_display  # The flex display factory\ngrid_display  # The grid display factory\nFLEX_BASIS_CONFIG  # Create configuration for flex basis - similar to width/height but with container scales\nbasis  # The flex basis factory\nFLEX_DIRECTION_VALUES = {4 items}  # Flex direction utilities\nflex_direction  # The flex direction factory\nFLEX_WRAP_VALUES = {3 items}  # Flex wrap utilities\nflex_wrap  # The flex wrap factory\nFLEX_CONFIG  # Flex configuration - supports numeric values and special presets\nflex  # The flex factory\nFLEX_GROW_CONFIG  # Flex grow configuration\ngrow  # The flex grow factory\nFLEX_SHRINK_CONFIG  # Flex shrink configuration (same as grow)\nshrink  # The flex shrink factory\nORDER_CONFIG  # Order configuration - supports numeric values including negative\norder  # The order factory\nGRID_COLS_CONFIG  # Grid template columns configuration\ngrid_cols  # The grid columns factory\nGRID_ROWS_CONFIG  # Grid template rows configuration (same as columns)\ngrid_rows  # The grid rows factory\nCOL_SPAN_CONFIG  # Grid column span configuration\nCOL_START_END_CONFIG  # Grid column start/end configuration\ncol_span  # Column span factory\ncol_start  # Column start factory\ncol_end  # Column end factory\ncol  # The grid column factory\nROW_SPAN_CONFIG  # Grid row span configuration (same as column)\nROW_START_END_CONFIG  # Grid row start/end configuration (same as column)\nrow_span  # Row span factory\nrow_start  # Row start factory\nrow_end  # Row end factory\nrow  # The grid row factory\nGRID_FLOW_VALUES = {5 items}  # Grid auto flow utilities\ngrid_flow  # The grid flow factory\nAUTO_COLS_VALUES = {4 items}  # Grid auto columns values\nAUTO_ROWS_VALUES = {4 items}  # Grid auto rows values\nauto_cols  # The auto columns factory\nauto_rows  # The auto rows factory\ngap  # The gap factory\nJUSTIFY_CONTENT_VALUES = {11 items}  # Justify content values\njustify  # The justify content factory\nJUSTIFY_ITEMS_VALUES = {7 items}  # Justify items values\njustify_items  # The justify items factory\nJUSTIFY_SELF_VALUES = {7 items}  # Justify self values\njustify_self  # The justify self factory\nALIGN_CONTENT_VALUES = {9 items}  # Align content values\ncontent  # The align content factory\nALIGN_ITEMS_VALUES = {8 items}  # Align items values\nitems  # The align items factory\nALIGN_SELF_VALUES = {9 items}  # Align self values\nself_align  # The align self factory (renamed to avoid conflict with Python's self)\nPLACE_CONTENT_VALUES = {10 items}  # Place content values\nplace_content  # The place content factory\nPLACE_ITEMS_VALUES = {7 items}  # Place items values\nplace_items  # The place items factory\nPLACE_SELF_VALUES = {7 items}  # Place self values\nplace_self  # The place self factory\n\n\n\nHelper Function Discovery (helper_discovery.ipynb)\n\nFunctions to discover and extract helper functions:\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.helper_discovery import (\n    HelperInfo,\n    get_helper_examples,\n    get_module_helpers\n)\n\n\nFunctions\ndef get_helper_examples(\n    module_name: str  # Name of the module to inspect\n) -&gt; Optional[ExampleInfo]:  # ExampleInfo object or None if not found\n    \"Get the helper examples test function for a module.\"\ndef get_module_helpers(\n    module_name: str  # Name of the module to inspect\n) -&gt; List[HelperInfo]:  # List of HelperInfo objects\n    \"Get helper functions from a module based on its test_&lt;module&gt;_helper_examples function.\"\n\n\nClasses\n@dataclass\nclass HelperInfo:\n    \"Information about a discovered helper function.\"\n    \n    name: str  # Function name (e.g., 'pad', 'margin', 'combine_classes')\n    module_name: str  # Module where it was found\n    function: Any  # The actual function object\n    signature: str  # Function signature\n    docstring: str  # Function docstring\n    source: str  # Source code of the function\n\n\n\nimports (imports.ipynb)\n\nFunctions for getting import statements.\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.imports import (\n    get_recommended_imports\n)\n\n\nFunctions\ndef get_recommended_imports(\n    modules: Optional[List[str]] = None,  # Specific modules to include, or None for all\n    config: Optional[LibraryConfig] = None  # Optional configuration\n) -&gt; List[str]:  # List of import statements\n    \"Get recommended import statements for using the library.\"\n\n\n\ninteractivity (interactivity.ipynb)\n\nInteractivity utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.interactivity import (\n    accent,\n    appearance,\n    caret,\n    scheme,\n    cursor,\n    field_sizing,\n    pointer_events,\n    resize,\n    scroll,\n    scroll_m,\n    scroll_ms,\n    scroll_me,\n    scroll_p,\n    scroll_ps,\n    scroll_pe,\n    snap_align,\n    snap_stop,\n    snap,\n    touch,\n    select,\n    will_change,\n    test_interactivity_accent_examples,\n    test_interactivity_appearance_examples,\n    test_interactivity_caret_examples,\n    test_interactivity_scheme_examples,\n    CursorFactory,\n    test_interactivity_cursor_examples,\n    test_interactivity_field_sizing_examples,\n    test_interactivity_pointer_events_examples,\n    test_interactivity_resize_examples,\n    test_interactivity_scroll_behavior_examples,\n    test_interactivity_scroll_margin_examples,\n    test_interactivity_scroll_padding_examples,\n    test_interactivity_scroll_snap_examples,\n    test_interactivity_touch_action_examples,\n    test_interactivity_user_select_examples,\n    WillChangeFactory,\n    test_interactivity_will_change_examples,\n    test_interactivity_form_fasthtml_examples,\n    test_interactivity_scroll_snap_fasthtml_examples,\n    test_interactivity_touch_mobile_fasthtml_examples,\n    test_interactivity_advanced_fasthtml_examples\n)\n\n\nFunctions\ndef test_interactivity_accent_examples()\n    \"Test accent color utilities.\"\ndef test_interactivity_appearance_examples()\n    \"Test appearance utilities.\"\ndef test_interactivity_caret_examples()\n    \"Test caret color utilities.\"\ndef test_interactivity_scheme_examples()\n    \"Test color scheme utilities.\"\ndef test_interactivity_cursor_examples()\n    \"Test cursor utilities.\"\ndef test_interactivity_field_sizing_examples()\n    \"Test field sizing utilities.\"\ndef test_interactivity_pointer_events_examples()\n    \"Test pointer events utilities.\"\ndef test_interactivity_resize_examples()\n    \"Test resize utilities.\"\ndef test_interactivity_scroll_behavior_examples()\n    \"Test scroll behavior utilities.\"\ndef test_interactivity_scroll_margin_examples()\n    \"Test scroll margin utilities.\"\ndef test_interactivity_scroll_padding_examples()\n    \"Test scroll padding utilities.\"\ndef test_interactivity_scroll_snap_examples()\n    \"Test scroll snap utilities.\"\ndef test_interactivity_touch_action_examples()\n    \"Test touch action utilities.\"\ndef test_interactivity_user_select_examples()\n    \"Test user select utilities.\"\ndef test_interactivity_will_change_examples()\n    \"Test will-change utilities.\"\ndef test_interactivity_form_fasthtml_examples()\n    \"Test interactivity utilities in form components.\"\ndef test_interactivity_scroll_snap_fasthtml_examples()\n    \"Test scroll snap utilities in carousel/gallery components.\"\ndef test_interactivity_touch_mobile_fasthtml_examples()\n    \"Test touch and mobile interaction utilities.\"\ndef test_interactivity_advanced_fasthtml_examples()\n    \"Test advanced combinations of interactivity utilities.\"\n\n\nClasses\nclass CursorFactory(SimpleFactory):\n    \"Factory for cursor utilities with arbitrary value support.\"\n    \nclass WillChangeFactory(SimpleFactory):\n    \"Factory for will-change utilities with arbitrary value support.\"\n    \n\n\nVariables\naccent  # The accent color factory\ncaret  # The caret color factory\nscroll_m  # The scroll margin factory\nscroll_ms  # scroll-margin-inline-start\nscroll_me  # scroll-margin-inline-end\nscroll_p  # The scroll padding factory\nscroll_ps  # scroll-padding-inline-start\nscroll_pe  # scroll-padding-inline-end\n\n\n\nlayout (layout.ipynb)\n\nDisplay, position, overflow, z-index and other layout utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.layout import (\n    DISPLAY_VALUES,\n    display_tw,\n    POSITION_VALUES,\n    position,\n    inset,\n    top,\n    right,\n    bottom,\n    left,\n    start,\n    end,\n    OVERFLOW_VALUES,\n    overflow,\n    Z_INDEX_CONFIG,\n    z,\n    FLOAT_VALUES,\n    float_tw,\n    CLEAR_VALUES,\n    clear,\n    OBJECT_FIT_VALUES,\n    object_fit,\n    OBJECT_POSITION_VALUES,\n    object_position,\n    VISIBILITY_VALUES,\n    visibility,\n    BOX_SIZING_VALUES,\n    box,\n    ISOLATION_VALUES,\n    isolation,\n    ASPECT_RATIO_VALUES,\n    aspect,\n    COLUMNS_CONFIG,\n    columns,\n    BREAK_BEFORE_VALUES,\n    BREAK_AFTER_VALUES,\n    BREAK_INSIDE_VALUES,\n    break_util,\n    BOX_DECORATION_VALUES,\n    box_decoration,\n    OVERSCROLL_VALUES,\n    overscroll,\n    test_layout_display_examples,\n    test_layout_position_examples,\n    InsetDirectionalFactory,\n    test_layout_inset_examples,\n    OverflowFactory,\n    test_layout_overflow_examples,\n    test_layout_z_index_examples,\n    test_layout_float_clear_examples,\n    ObjectPositionFactory,\n    test_layout_object_examples,\n    test_layout_visibility_examples,\n    AspectRatioFactory,\n    test_layout_aspect_columns_examples,\n    test_layout_columns_examples,\n    BreakFactory,\n    OverscrollFactory,\n    test_layout_other_utilities_examples,\n    test_layout_fasthtml_examples,\n    test_layout_enhanced_factories_fasthtml_examples,\n    test_layout_modifier_examples,\n    center_absolute,\n    stack_context,\n    sticky_top,\n    full_bleed,\n    test_layout_helper_examples\n)\n\n\nFunctions\ndef test_layout_display_examples(\n)\n    \"Test display utilities with various values.\"\ndef test_layout_position_examples(\n)\n    \"Test position utilities.\"\ndef test_layout_inset_examples(\n)\n    \"Test inset utilities for positioning elements.\"\ndef test_layout_overflow_examples(\n)\n    \"Test overflow utilities for content handling.\"\ndef test_layout_z_index_examples(\n)\n    \"Test z-index utilities for stack ordering.\"\ndef test_layout_float_clear_examples(\n)\n    \"Test float and clear utilities for content wrapping.\"\ndef test_layout_object_examples(\n)\n    \"Test object fit and position utilities.\"\ndef test_layout_visibility_examples(\n)\n    \"Test visibility and box sizing utilities.\"\ndef test_layout_aspect_columns_examples(\n)\n    \"Test aspect ratio and columns utilities.\"\ndef test_layout_columns_examples(\n)\n    \"Test columns utilities.\"\ndef test_layout_other_utilities_examples(\n)\n    \"Test isolation, break, box decoration, and overscroll utilities.\"\ndef test_layout_fasthtml_examples(\n)\n    \"Test layout utilities in practical FastHTML component examples.\"\ndef test_layout_enhanced_factories_fasthtml_examples(\n)\n    \"Test enhanced factories with modifier support in practical examples.\"\ndef test_layout_modifier_examples(\n)\n    \"Test layout utilities with modifiers for conditional styling.\"\ndef center_absolute(\n) -&gt; str:  # Combined CSS classes for centering an element\n    \"Center an absolutely positioned element.\"\ndef stack_context(\n    z_value: int = 10  # The z-index value for the stacking context\n) -&gt; str:  # Combined CSS classes for creating a stacking context\n    \"Create a stacking context with z-index.\"\ndef sticky_top(\n    offset: TailwindScale = 0  # Top offset value (e.g., 0, 4, '1rem')\n) -&gt; str:  # Combined CSS classes for sticky positioning\n    \"Make element sticky at top with optional offset.\"\ndef full_bleed(\n) -&gt; str:  # Combined CSS classes for full-bleed layout\n    \"Make element break out of container constraints.\"\ndef test_layout_helper_examples(\n)\n    \"Test helper functions for common layout patterns.\"\n\n\nClasses\nclass InsetDirectionalFactory:\n    def __init__(\n        self,\n        prefix: str,  # The base prefix ('inset')\n        config: ScaleConfig  # Configuration defining valid scales and values\n    )\n    \"Special factory for inset utilities that use hyphenated directions.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # The base prefix ('inset')\n            config: ScaleConfig  # Configuration defining valid scales and values\n        )\n        \"Initialize with prefix and scale configuration.\"\n    \n    def negative(\n            self\n        ) -&gt; 'NegativeFactory':  # A factory for creating negative variants\n        \"Return a negative variant factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about this inset factory.\"\nclass OverflowFactory:\n    def __init__(self):\n        \"Initialize with overflow values and directional sub-factories.\"\n        super().__init__(\"Overflow utilities for controlling how an element handles content that is too large\")\n        # Create base overflow utilities\n        self._values = {value: f\"overflow-{value}\" for value in OVERFLOW_VALUES}\n    \"Factory for overflow utilities with directional support.\"\n    \n    def __init__(self):\n            \"Initialize with overflow values and directional sub-factories.\"\n            super().__init__(\"Overflow utilities for controlling how an element handles content that is too large\")\n            # Create base overflow utilities\n            self._values = {value: f\"overflow-{value}\" for value in OVERFLOW_VALUES}\n        \"Initialize with overflow values and directional sub-factories.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the overflow factory.\"\nclass ObjectPositionFactory(SimpleFactory):\n    \"Factory for object position with both fixed and custom values.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the object position factory.\"\nclass AspectRatioFactory(SimpleFactory):\n    \"Factory for aspect ratio with both fixed and custom values.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the aspect ratio factory.\"\nclass BreakFactory:\n    def __init__(self):\n        \"Initialize with sub-factories for before, after, and inside breaks.\"\n        super().__init__(\"Break utilities for controlling column and page breaks\")\n        self.before = SimpleFactory(BREAK_BEFORE_VALUES, \"Break-before utilities for controlling breaks before an element\")\n        self.after = SimpleFactory(BREAK_AFTER_VALUES, \"Break-after utilities for controlling breaks after an element\")\n        self.inside = SimpleFactory(BREAK_INSIDE_VALUES, \"Break-inside utilities for controlling breaks within an element\")\n    \n    def get_info(\n        self\n    ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n    \"Factory for break utilities with before, after, and inside sub-factories.\"\n    \n    def __init__(self):\n            \"Initialize with sub-factories for before, after, and inside breaks.\"\n            super().__init__(\"Break utilities for controlling column and page breaks\")\n            self.before = SimpleFactory(BREAK_BEFORE_VALUES, \"Break-before utilities for controlling breaks before an element\")\n            self.after = SimpleFactory(BREAK_AFTER_VALUES, \"Break-after utilities for controlling breaks after an element\")\n            self.inside = SimpleFactory(BREAK_INSIDE_VALUES, \"Break-inside utilities for controlling breaks within an element\")\n        \n        def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Initialize with sub-factories for before, after, and inside breaks.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the break factory.\"\nclass OverscrollFactory:\n    def __init__(self):\n        \"Initialize with overscroll values and directional sub-factories.\"\n        super().__init__(\"Overscroll behavior utilities for controlling browser behavior at scroll boundaries\")\n        # Create base overscroll utilities\n        self._values = {value: f\"overscroll-{value}\" for value in OVERSCROLL_VALUES}\n    \"Factory for overscroll behavior utilities with directional support.\"\n    \n    def __init__(self):\n            \"Initialize with overscroll values and directional sub-factories.\"\n            super().__init__(\"Overscroll behavior utilities for controlling browser behavior at scroll boundaries\")\n            # Create base overscroll utilities\n            self._values = {value: f\"overscroll-{value}\" for value in OVERSCROLL_VALUES}\n        \"Initialize with overscroll values and directional sub-factories.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the overscroll factory.\"\n\n\nVariables\nDISPLAY_VALUES = {8 items}  # Display utilities for general display types (not flex/grid/table)\ndisplay_tw  # The display factory for general display types\nPOSITION_VALUES = {5 items}  # Position utilities\nposition  # The position factory\ninset  # The inset factory for positioning\nOVERFLOW_VALUES = [5 items]  # Overflow values\noverflow  # The overflow factory\nZ_INDEX_CONFIG  # Z-index configuration\nz  # The z-index factory\nFLOAT_VALUES = {5 items}\nfloat_tw  # Renamed to avoid conflict with Python's float\nCLEAR_VALUES = {6 items}\nclear  # The clear factory\nOBJECT_FIT_VALUES = {5 items}\nobject_fit  # The object fit factory\nOBJECT_POSITION_VALUES = {9 items}\nVISIBILITY_VALUES = {3 items}\nvisibility  # The visibility factory\nBOX_SIZING_VALUES = {2 items}\nbox  # The box sizing factory\nISOLATION_VALUES = {2 items}\nisolation  # The isolation factory\nASPECT_RATIO_VALUES = {3 items}\naspect  # The aspect ratio factory\nCOLUMNS_CONFIG  # Columns configuration with container sizes\ncolumns  # The columns factory\nBREAK_BEFORE_VALUES = {8 items}\nBREAK_AFTER_VALUES = {8 items}\nBREAK_INSIDE_VALUES = {4 items}\nbreak_util  # The break factory\nBOX_DECORATION_VALUES = {2 items}\nOVERSCROLL_VALUES = [3 items]\noverscroll  # The overscroll factory\n\n\n\npattern_scanner (pattern_scanner.ipynb)\n\nScan Python code for replaceable CSS class patterns\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.pattern_scanner import (\n    ClsPattern,\n    ClsPatternVisitor,\n    scan_python_code,\n    extract_css_classes_from_node,\n    display_patterns,\n    get_unique_css_classes,\n    AssertionPattern,\n    get_available_css_classes,\n    extract_assertion_patterns,\n    collect_all_assertion_patterns,\n    MatchType,\n    CSSClassMatch,\n    tokenize_css_class,\n    find_pattern_matches,\n    match_css_class,\n    match_css_classes,\n    display_match_results,\n    analyze_code_patterns,\n    display_code_analysis,\n    find_assertion_for_class,\n    find_pattern_examples,\n    get_migration_suggestions,\n    display_migration_suggestions,\n    analyze_and_suggest,\n    scan_python_file,\n    scan_jupyter_notebook,\n    InputType,\n    detect_input_type,\n    scan_input,\n    analyze_input,\n    display_input_analysis,\n    analyze_and_suggest_input\n)\n\n\nFunctions\ndef scan_python_code(\n    code: str  # Python source code as a string\n) -&gt; List[ClsPattern]:  # List of ClsPattern objects found in the code\n    \"Scan Python code for cls= patterns.\"\ndef extract_css_classes_from_node(\n    node: ast.AST  # AST node to extract CSS classes from\n) -&gt; List[str]:  # List of CSS class strings found in the node\n    \"Recursively extract CSS classes from an AST node. Handles various patterns including combine_classes calls.\"\ndef display_patterns(\n    patterns: List[ClsPattern],  # List of ClsPattern objects to display\n    show_context: bool = True  # Whether to show the code context\n):  # Displays patterns to stdout, returns nothing\n    \"Display found patterns in a formatted way.\"\ndef get_unique_css_classes(\n    patterns: List[ClsPattern]  # List of ClsPattern objects\n) -&gt; Set[str]:  # Set of unique CSS class strings\n    \"Extract all unique CSS classes from a list of patterns.\"\ndef get_available_css_classes(\n    assertion_patterns: List[AssertionPattern]  # List of assertion patterns from test examples\n) -&gt; Set[str]:  # Set of unique CSS class strings available in the library\n    \"Extract all unique CSS classes from assertion patterns. This handles multi-class assertion strings by splitting them.\"\ndef extract_assertion_patterns(\n    source_code: str,  # Source code of the test function\n    module_name: str,  # Name of the module containing the test\n    example_name: str  # Name of the test function\n) -&gt; List[AssertionPattern]:  # List of AssertionPattern objects\n    \"Extract assertion patterns from test example source code.\"\ndef collect_all_assertion_patterns(\n) -&gt; List[AssertionPattern]:  # List of AssertionPattern objects from all modules\n    \"Collect assertion patterns from all test examples in the library.\"\ndef tokenize_css_class(\n    css_class: str  # CSS class string (e.g., \"bg-blue-500\" or \"hover:text-white\")\n) -&gt; List[str]:  # List of tokens (e.g., [\"bg\", \"blue\", \"500\"] or [\"hover:text\", \"white\"])\n    \"Tokenize a CSS class by splitting on hyphens. Handles modifiers (hover:, focus:, etc.) separately.\"\ndef find_pattern_matches(\n    css_class: str,  # CSS class to match (e.g., \"px-8\" or \"hover:text-white\")\n    available_classes: Set[str]  # Set of available CSS classes from the library\n) -&gt; Tuple[Optional[str], List[str]]:  # Tuple of (matched_pattern, similar_classes) - matched_pattern: Pattern prefix that matches (e.g., \"px\" for \"px-8\") - similar_classes: List of similar classes with the same pattern\n    \"Find pattern matches for a CSS class by progressively reducing tokens.\"\ndef match_css_class(\n    css_class: str,  # CSS class to match\n    available_classes: Set[str]  # Set of available CSS classes from the library\n) -&gt; CSSClassMatch:  # CSSClassMatch object with match details\n    \"Match a CSS class against available library classes.\"\ndef match_css_classes(\n    css_classes: List[str],  # List of CSS classes to match\n    available_classes: Set[str]  # Set of available CSS classes from the library\n) -&gt; Dict[str, CSSClassMatch]:  # Dictionary mapping CSS classes to their match results\n    \"Match multiple CSS classes against available library classes.\"\ndef display_match_results(\n    matches: Dict[str, CSSClassMatch]  # Dictionary of CSS classes to their match results\n):  # Displays match results to stdout, returns nothing\n    \"Display match results in a formatted way.\"\ndef analyze_code_patterns(\n    code: str  # Python source code to analyze\n) -&gt; Dict[str, Any]:  # Dictionary with analysis results including patterns found and suggestions\n    \"Analyze Python code for replaceable CSS patterns.\"\ndef display_code_analysis(\n    code: str  # Python source code to analyze\n):  # Displays analysis report to stdout, returns nothing\n    \"Analyze and display replaceable patterns in Python code.\"\ndef find_assertion_for_class(\n    css_class: str,  # The CSS class to find (e.g., \"px-6\")\n    assertion_patterns: List[AssertionPattern]  # List of all assertion patterns from tests\n) -&gt; Optional[AssertionPattern]:  # AssertionPattern if found, None otherwise\n    \"Find the assertion pattern that demonstrates how to use a specific CSS class. Prioritizes exact single-class matches over multi-class assertions.\"\ndef find_pattern_examples(\n    pattern_prefix: str,  # Pattern prefix to match (e.g., \"px\" for px-* pattern)\n    assertion_patterns: List[AssertionPattern]  # List of all assertion patterns from tests\n) -&gt; List[AssertionPattern]:  # List of AssertionPattern objects that match the pattern\n    \"Find assertion examples that match a pattern prefix.\"\ndef get_migration_suggestions(\n    matches: Dict[str, CSSClassMatch],  # Dictionary of CSS class matches\n    assertion_patterns: List[AssertionPattern],  # List of all assertion patterns from tests\n    config: Optional[LibraryConfig] = None  # Optional configuration\n) -&gt; Dict[str, List[str]]:  # Dictionary mapping CSS classes to their migration suggestions\n    \"Generate migration suggestions for matched CSS classes.\"\ndef display_migration_suggestions(\n    code: str  # Python source code to analyze\n):  # Displays migration suggestions to stdout, returns nothing\n    \"Analyze code and display migration suggestions.\"\ndef analyze_and_suggest(\n    code: str  # Python source code to analyze\n):  # Displays analysis and migration suggestions to stdout, returns nothing\n    \"Perform complete analysis of code with migration suggestions.\"\ndef scan_python_file(\n    file_path: str  # Path to the Python file\n) -&gt; List[ClsPattern]:  # List of ClsPattern objects found in the file\n    \"Scan a Python file for cls= patterns.\"\ndef scan_jupyter_notebook(\n    notebook_path: str  # Path to the Jupyter notebook (.ipynb)\n) -&gt; List[ClsPattern]:  # List of ClsPattern objects found in the notebook\n    \"Scan a Jupyter notebook for cls= patterns.\"\ndef detect_input_type(\n    input_source: str  # Code string or file path\n) -&gt; InputType:  # InputType enum value\n    \"Detect the type of input based on the source string.\"\ndef scan_input(\n    input_source: str,  # Code string, Python file path, or notebook path\n    input_type: Optional[InputType] = None  # Optional explicit input type. If None, will auto-detect.\n) -&gt; List[ClsPattern]:  # List of ClsPattern objects found\n    \"Scan various input types for cls= patterns.\"\ndef analyze_input(\n    input_source: str,  # Code string, Python file path, or notebook path\n    input_type: Optional[InputType] = None  # Optional explicit input type. If None, will auto-detect.\n) -&gt; Dict[str, Any]:  # Dictionary with analysis results\n    \"Analyze any input type for replaceable CSS patterns.\"\ndef display_input_analysis(\n    input_source: str,  # Code string, Python file path, or notebook path\n    input_type: Optional[InputType] = None  # Optional explicit input type. If None, will auto-detect.\n):  # Displays analysis report to stdout, returns nothing\n    \"Analyze and display replaceable patterns from any input type.\"\ndef analyze_and_suggest_input(\n    input_source: str,  # Code string, Python file path, or notebook path\n    input_type: Optional[InputType] = None  # Optional explicit input type. If None, will auto-detect.\n):  # Displays analysis and migration suggestions to stdout, returns nothing\n    \"Perform complete analysis with migration suggestions for any input type.\"\n\n\nClasses\n@dataclass\nclass ClsPattern:\n    \"Represents a cls= pattern found in code.\"\n    \n    line_number: int  # Line number where pattern was found\n    full_expression: str  # The full cls=... expression\n    css_classes: List[str]  # Individual CSS classes extracted\n    context: str  # Code context around the pattern\n    uses_combine_classes: bool  # Whether combine_classes is used\nclass ClsPatternVisitor:\n    def __init__(\n        self,\n        source_lines: List[str]  # Source code lines for extracting context around patterns\n    )\n    \"AST visitor to find cls= patterns in Python code.\"\n    \n    def __init__(\n            self,\n            source_lines: List[str]  # Source code lines for extracting context around patterns\n        )\n        \"Initialize with source code lines for context extraction.\"\n    \n    def visit_Call(\n            self,\n            node: ast.Call  # AST Call node to examine for cls= keyword arguments\n        ):  # Visits the node and updates self.patterns\n        \"Visit function calls to find cls= keyword arguments.\"\n@dataclass\nclass AssertionPattern:\n    \"Represents a pattern extracted from a test assertion.\"\n    \n    css_class: str  # The CSS class string (e.g., \"p-4\")\n    factory_expression: str  # The factory expression (e.g., \"p(4)\")\n    module_name: str  # Module where this was found\n    example_name: str  # Test function name\nclass MatchType(Enum):\n    \"Type of match found for a CSS class.\"\n@dataclass\nclass CSSClassMatch:\n    \"Represents a match result for a CSS class.\"\n    \n    css_class: str  # The CSS class being matched\n    match_type: MatchType  # Type of match found\n    matched_pattern: Optional[str]  # The pattern it matches (for PATTERN type)\n    similar_classes: List[str]  # Similar classes found in library\n    suggested_replacement: Optional[str]  # Suggested replacement from library\nclass InputType(Enum):\n    \"Type of input being scanned.\"\n\n\n\nresources (resources.ipynb)\n\nCDN resources and headers for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.core.resources import (\n    TAILWIND_CDN,\n    get_tailwind_headers\n)\n\n\nFunctions\ndef get_tailwind_headers(\n) -&gt; List[Union[Link, Script]]:  # List of Link and Script elements for Tailwind CSS\n    \"Get the standard Tailwind CSS CDN headers.\"\n\n\nVariables\nTAILWIND_CDN = 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'\n\n\n\nscales (scales.ipynb)\n\nNumeric and named scale builders for Tailwind CSS utilities\n\n\nImport\nfrom cjm_fasthtml_tailwind.builders.scales import (\n    NUMERIC_SCALE,\n    DECIMAL_SCALE,\n    SPACING_SCALE,\n    FRACTION_DENOMINATORS,\n    FRACTIONS,\n    SPACING_CONFIG,\n    SIZE_CONFIG,\n    INSET_CONFIG,\n    generate_fractions,\n    ScaleConfig,\n    ScaledUtility,\n    ScaledFactory,\n    NegativeFactory,\n    DirectionalScaledUtility,\n    DirectionalScaledFactory,\n    list_scale_values,\n    SimpleFactory,\n    enums_to_simple_factory\n)\n\n\nFunctions\ndef generate_fractions(\n) -&gt; List[str]:  # List of all valid Tailwind fraction strings sorted by value\n    \"Generate all valid Tailwind fractions.\"\ndef list_scale_values(\n    config: ScaleConfig  # The scale configuration to extract values from\n) -&gt; Dict[str, List[Union[str, int, float]]]:  # Dictionary mapping scale types to their values\n    \"List all possible values for a scale configuration.\"\ndef enums_to_simple_factory(prefix:str, # The factory prefix\n                            src_enums:List[Enum], # The source enums\n                            doc:Optional[str]=None # The factory docstring.\n                           ) -&gt; SimpleFactory: # The resulting simple factory\n    \"Create a SimpleFactory using a string prefix and the values from a list of enums\"\n\n\nClasses\n@dataclass\nclass ScaleConfig:\n    \"Configuration for a scale builder.\"\n    \n    numeric: bool = True  # Support numeric scales (0-96)\n    decimals: bool = False  # Support decimal scales (0.5, 1.5, etc.)\n    fractions: bool = False  # Support fractions (1/2, 1/3, etc.)\n    named: Optional[List[NamedScale]]  # Named scales (xs, sm, md, etc.)\n    special: Optional[Dict[str, str]]  # Special values (auto, full, screen, etc.)\n    negative: bool = False  # Support negative values\nclass ScaledUtility:\n    def __init__(\n        self, \n        prefix: str,  # The utility prefix (e.g., 'w', 'h', 'p')\n        config: ScaleConfig,  # Configuration defining valid scales and values\n        negative: bool = False  # Whether this is a negative variant\n    )\n    \"Utility class with scale support.\"\n    \n    def __init__(\n            self, \n            prefix: str,  # The utility prefix (e.g., 'w', 'h', 'p')\n            config: ScaleConfig,  # Configuration defining valid scales and values\n            negative: bool = False  # Whether this is a negative variant\n        )\n        \"Initialize with prefix and scale configuration.\"\n    \n    def get_valid_values(\n            self\n        ) -&gt; List[Union[str, int, float]]:  # List of all valid values for this utility\n        \"Get all valid values for this utility.\"\nclass ScaledFactory:\n    def __init__(\n        self, \n        prefix: Optional[str] = None,  # The utility prefix (e.g., 'w', 'h', 'p')\n        config: Optional[ScaleConfig] = None,  # Configuration defining valid scales and values\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for creating scaled utilities with enhanced attribute access.\"\n    \n    def __init__(\n            self, \n            prefix: Optional[str] = None,  # The utility prefix (e.g., 'w', 'h', 'p')\n            config: Optional[ScaleConfig] = None,  # Configuration defining valid scales and values\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize with prefix and scale configuration.\"\n    \n    def negative(\n            self\n        ) -&gt; 'NegativeFactory':  # A factory for creating negative variants\n        \"Return a negative variant factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about this scaled factory.\"\nclass NegativeFactory:\n    def __init__(\n        self,\n        prefix: str,  # The utility prefix (e.g., 'm', 'inset')\n        config: ScaleConfig  # Configuration defining valid scales and values\n    )\n    \"Factory for creating negative variants.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # The utility prefix (e.g., 'm', 'inset')\n            config: ScaleConfig  # Configuration defining valid scales and values\n        )\n        \"Initialize with prefix and scale configuration.\"\nclass DirectionalScaledUtility:\n    def __init__(\n        self, \n        prefix: str,  # The base utility prefix (e.g., 'p' for padding)\n        direction: Optional[str],  # The direction suffix ('t', 'r', 'b', 'l', 'x', 'y')\n        config: ScaleConfig,  # Configuration defining valid scales and values\n        negative: bool = False  # Whether this is a negative variant\n    )\n    \"Directional utility with scale support.\"\n    \n    def __init__(\n            self, \n            prefix: str,  # The base utility prefix (e.g., 'p' for padding)\n            direction: Optional[str],  # The direction suffix ('t', 'r', 'b', 'l', 'x', 'y')\n            config: ScaleConfig,  # Configuration defining valid scales and values\n            negative: bool = False  # Whether this is a negative variant\n        )\n        \"Initialize with prefix, direction, and scale configuration.\"\nclass DirectionalScaledFactory:\n    def __init__(\n        self, \n        prefix: str,  # The base utility prefix (e.g., 'p' for padding, 'm' for margin)\n        config: ScaleConfig,  # Configuration defining valid scales and values\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for creating directional scaled utilities.\"\n    \n    def __init__(\n            self, \n            prefix: str,  # The base utility prefix (e.g., 'p' for padding, 'm' for margin)\n            config: ScaleConfig,  # Configuration defining valid scales and values\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize with prefix and scale configuration.\"\n    \n    def negative(\n            self\n        ) -&gt; 'NegativeFactory':  # A factory for creating negative variants\n        \"Return a negative variant factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about this directional factory.\"\nclass SimpleFactory:\n    def __init__(\n        self,\n        values_dict: Optional[Dict[str, str]] = None,  # Dictionary mapping attribute names to CSS values\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for utilities that are simple string values with modifier support.\"\n    \n    def __init__(\n            self,\n            values_dict: Optional[Dict[str, str]] = None,  # Dictionary mapping attribute names to CSS values\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize with a dictionary of values.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this simple factory.\"\n\n\nVariables\nNUMERIC_SCALE  # Standard spacing scale (0-96)\nDECIMAL_SCALE = [4 items]  # Common decimal scales\nSPACING_SCALE  # Extended spacing scale with decimals\nFRACTION_DENOMINATORS = [6 items]  # Fraction denominators supported by Tailwind\nFRACTIONS  # Pre-generate fractions\nSPACING_CONFIG  # Spacing configuration (padding, margin, gap)\nSIZE_CONFIG  # Size configuration (width, height)\nINSET_CONFIG  # Inset configuration (top, right, bottom, left)\n\n\n\nSearch Functions (search.ipynb)\n\nFunctions to search across all library components:\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.search import (\n    search_factories,\n    search_examples,\n    search_helpers,\n    search_modules,\n    search_all\n)\n\n\nFunctions\ndef search_factories(\n    query: str,  # Search query\n    include_source: bool = False,  # Whether to search in source code\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; List[SearchResult]:  # List of search results\n    \"Search in all factories.\"\ndef search_examples(\n    query: str,  # Search query\n    include_source: bool = False,  # Whether to search in source code\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; List[SearchResult]:  # List of search results\n    \"Search in all test examples.\"\ndef search_helpers(\n    query: str,  # Search query\n    include_source: bool = False,  # Whether to search in source code\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; List[SearchResult]:  # List of search results\n    \"Search in all helper functions.\"\ndef search_modules(\n    query: str,  # Search query\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; List[SearchResult]:  # List of search results\n    \"Search in module names and documentation.\"\ndef search_all(\n    query: str,  # Search query\n    content_types: Optional[List[str]] = None,  # Types to search in ('factories', 'examples', 'helpers', 'modules')\n    include_source: bool = False,  # Whether to search in source code\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; List[SearchResult]:  # List of all search results\n    \"Search across all content types.\"\n\n\n\nsizing (sizing.ipynb)\n\nWidth, height, and min/max sizing utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.sizing import (\n    w,\n    h,\n    min_w,\n    max_w,\n    container,\n    min_h,\n    max_h,\n    size_util,\n    test_sizing_width_examples,\n    test_sizing_width_named_examples,\n    test_sizing_width_viewport_examples,\n    test_sizing_arbitrary_examples,\n    test_sizing_height_examples,\n    test_sizing_height_viewport_examples,\n    test_sizing_min_width_examples,\n    test_sizing_max_width_examples,\n    test_sizing_container_examples,\n    test_sizing_min_height_examples,\n    test_sizing_size_util_examples,\n    test_sizing_max_height_examples,\n    test_sizing_fasthtml_examples,\n    size,\n    square,\n    full_size,\n    full_screen,\n    test_sizing_helper_examples\n)\n\n\nFunctions\ndef test_sizing_width_examples(\n)\n    \"Test width utilities with various scales and values.\"\ndef test_sizing_width_named_examples(\n)\n    \"Test width utilities with named container sizes.\"\ndef test_sizing_width_viewport_examples(\n)\n    \"Test width utilities with viewport units.\"\ndef test_sizing_arbitrary_examples(\n)\n    \"Test sizing utilities with arbitrary and custom values.\"\ndef test_sizing_height_examples(\n)\n    \"Test height utilities with various scales and values.\"\ndef test_sizing_height_viewport_examples(\n)\n    \"Test height utilities with viewport units.\"\ndef test_sizing_min_width_examples(\n)\n    \"Test min-width utilities.\"\ndef test_sizing_max_width_examples(\n)\n    \"Test max-width utilities.\"\ndef test_sizing_container_examples(\n)\n    \"Test continer utility.\"\ndef test_sizing_min_height_examples(\n)\n    \"Test min-height utilities.\"\ndef test_sizing_size_util_examples(\n)\n    \"Test size utilities that set both width and height.\"\ndef test_sizing_max_height_examples(\n)\n    \"Test max-height utilities.\"\ndef test_sizing_fasthtml_examples(\n)\n    \"Test sizing utilities in practical FastHTML component examples.\"\ndef size(\n    w: Optional[TailwindScale] = None,        # Width value\n    h: Optional[TailwindScale] = None,        # Height value\n    min_w: Optional[TailwindScale] = None,    # Minimum width\n    max_w: Optional[TailwindScale] = None,    # Maximum width\n    min_h: Optional[TailwindScale] = None,    # Minimum height\n    max_h: Optional[TailwindScale] = None     # Maximum height\n) -&gt; str:  # Space-separated size classes\n    \"Generate size classes with a convenient API.\"\ndef square(\n    size: TailwindScale  # Size value for both width and height\n) -&gt; str:  # Space-separated width and height classes\n    \"Create a square element with equal width and height.\"\ndef full_size(\n) -&gt; str:  # \"w-full h-full\"\n    \"Make element take full width and height of parent.\"\ndef full_screen(\n) -&gt; str:  # \"w-screen h-screen\"\n    \"Make element take full viewport width and height.\"\ndef test_sizing_helper_examples(\n)\n    \"Test helper functions for common sizing patterns.\"\n\n\nVariables\nw  # The width factory\nh  # The height factory\nmin_w  # The min-width factory\nmax_w  # The max-width factory\nmin_h  # The min-height factory\nmax_h  # The max-height factory\nsize_util  # The size factory (sets both width and height)\n\n\n\nspacing (spacing.ipynb)\n\nPadding and margin utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.spacing import (\n    p,\n    ps,\n    pe,\n    m,\n    ms,\n    me,\n    space,\n    test_spacing_basic_examples,\n    test_spacing_directional_examples,\n    test_spacing_arbitrary_examples,\n    test_spacing_margin_examples,\n    test_spacing_margin_directional_examples,\n    test_spacing_negative_examples,\n    test_spacing_logical_examples,\n    SpaceFactory,\n    test_spacing_space_between_examples,\n    test_spacing_fasthtml_examples,\n    pad,\n    margin,\n    test_spacing_helper_examples,\n    test_spacing_modifier_examples,\n    test_spacing_enhanced_factory_examples\n)\n\n\nFunctions\ndef test_spacing_basic_examples(\n)\n    \"Test basic padding utilities with various scale values.\"\ndef test_spacing_directional_examples(\n)\n    \"Test directional padding utilities.\"\ndef test_spacing_arbitrary_examples(\n)\n    \"Test padding utilities with arbitrary and custom values.\"\ndef test_spacing_margin_examples(\n)\n    \"Test basic margin utilities with various scale values.\"\ndef test_spacing_margin_directional_examples(\n)\n    \"Test directional margin utilities.\"\ndef test_spacing_negative_examples(\n)\n    \"Test negative margin utilities.\"\ndef test_spacing_logical_examples(\n)\n    \"Test logical properties for padding and margin utilities.\"\ndef test_spacing_space_between_examples(\n)\n    \"Test space between child elements utilities.\"\ndef test_spacing_fasthtml_examples(\n)\n    \"Test spacing utilities in practical FastHTML component examples.\"\ndef pad(\n    all: Optional[TailwindScale] = None,  # Padding for all sides\n    x: Optional[TailwindScale] = None,    # Horizontal padding\n    y: Optional[TailwindScale] = None,    # Vertical padding\n    t: Optional[TailwindScale] = None,    # Top padding\n    r: Optional[TailwindScale] = None,    # Right padding\n    b: Optional[TailwindScale] = None,    # Bottom padding\n    l: Optional[TailwindScale] = None     # Left padding\n) -&gt; str:  # Space-separated padding classes\n    \"Generate padding classes with a convenient API.\"\ndef margin(\n    all: Optional[TailwindScale] = None,  # Margin for all sides\n    x: Optional[TailwindScale] = None,    # Horizontal margin\n    y: Optional[TailwindScale] = None,    # Vertical margin\n    t: Optional[TailwindScale] = None,    # Top margin\n    r: Optional[TailwindScale] = None,    # Right margin\n    b: Optional[TailwindScale] = None,    # Bottom margin\n    l: Optional[TailwindScale] = None,    # Left margin\n    negative: bool = False                 # Apply negative margins\n) -&gt; str:  # Space-separated margin classes\n    \"Generate margin classes with a convenient API.\"\ndef test_spacing_helper_examples(\n)\n    \"Test helper functions for common spacing patterns.\"\ndef test_spacing_modifier_examples(\n)\n    \"Test spacing utilities with modifiers for conditional styling.\"\ndef test_spacing_enhanced_factory_examples(\n)\n    \"Test enhanced SingleValueFactory support in spacing utilities.\"\n\n\nClasses\nclass SpaceFactory:\n    def __init__(self):\n        \"\"\"Initialize with scaled factories and reverse utilities.\"\"\"\n        super().__init__(\"Space utilities for adding consistent spacing between child elements\")\n        self.x = ScaledFactory(\"space-x\", SPACING_CONFIG, \"Horizontal spacing between child elements\")\n        self.y = ScaledFactory(\"space-y\", SPACING_CONFIG, \"Vertical spacing between child elements\")\n        self.x_reverse = SingleValueFactory(\"space-x-reverse\", \"Reverse the order of horizontal spacing\")\n        self.y_reverse = SingleValueFactory(\"space-y-reverse\", \"Reverse the order of vertical spacing\")\n    \n    def get_info(\n        self\n    ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n    \"Special factory for space utilities that control spacing between child elements.\"\n    \n    def __init__(self):\n            \"\"\"Initialize with scaled factories and reverse utilities.\"\"\"\n            super().__init__(\"Space utilities for adding consistent spacing between child elements\")\n            self.x = ScaledFactory(\"space-x\", SPACING_CONFIG, \"Horizontal spacing between child elements\")\n            self.y = ScaledFactory(\"space-y\", SPACING_CONFIG, \"Vertical spacing between child elements\")\n            self.x_reverse = SingleValueFactory(\"space-x-reverse\", \"Reverse the order of horizontal spacing\")\n            self.y_reverse = SingleValueFactory(\"space-y-reverse\", \"Reverse the order of vertical spacing\")\n        \n        def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Initialize with scaled factories and reverse utilities.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the space factory.\"\n\n\nVariables\np  # The padding factory\nps  # padding-inline-start\npe  # padding-inline-end\nm  # The margin factory\nms  # margin-inline-start\nme  # margin-inline-end\nspace  # The space factory\n\n\n\nsvg (svg.ipynb)\n\nSVG utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.svg import (\n    fill_none,\n    fill,\n    stroke_none,\n    stroke,\n    STROKE_WIDTH_CONFIG,\n    stroke_width,\n    test_svg_fill_examples,\n    test_svg_fill_opacity_examples,\n    test_svg_fill_arbitrary_examples,\n    test_svg_stroke_examples,\n    test_svg_stroke_opacity_examples,\n    StrokeWidthFactory,\n    test_svg_stroke_width_examples,\n    test_svg_stroke_width_arbitrary_examples,\n    test_svg_fasthtml_examples,\n    test_svg_icon_fasthtml_examples,\n    test_svg_progress_ring_fasthtml_examples,\n    test_svg_edge_cases,\n    svg_icon_classes,\n    test_svg_helper_functions\n)\n\n\nFunctions\ndef test_svg_fill_examples()\n    \"Test fill color utilities with various color values.\"\ndef test_svg_fill_opacity_examples()\n    \"Test fill colors with opacity modifiers.\"\ndef test_svg_fill_arbitrary_examples()\n    \"Test fill utilities with arbitrary and custom values.\"\ndef test_svg_stroke_examples()\n    \"Test stroke color utilities with various color values.\"\ndef test_svg_stroke_opacity_examples()\n    \"Test stroke colors with opacity modifiers.\"\ndef test_svg_stroke_width_examples()\n    \"Test stroke width utilities with various values.\"\ndef test_svg_stroke_width_arbitrary_examples()\n    \"Test stroke width utilities with arbitrary and custom values.\"\ndef test_svg_fasthtml_examples()\n    \"Test SVG utilities in practical FastHTML component examples.\"\ndef test_svg_icon_fasthtml_examples():\n    \"\"\"Test creating reusable SVG icon components.\"\"\"\n    from fasthtml.common import Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import items, justify, gap, grid_display, flex_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    \n    # Helper function to create an icon\n    def Icon(path_d: str, size: int = 6, color_cls: str = \"\")\n    \"Test creating reusable SVG icon components.\"\ndef test_svg_progress_ring_fasthtml_examples():\n    \"\"\"Test creating a progress ring component.\"\"\"\n    from fasthtml.common import Div\n    from fasthtml.svg import Svg, Circle\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw, position\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display, flex_display\n    \n    # Progress ring component\n    def ProgressRing(percentage: int, size: int = 120)\n    \"Test creating a progress ring component.\"\ndef test_svg_edge_cases()\n    \"Test edge cases and special values for SVG utilities.\"\ndef svg_icon_classes(\n    fill_color: Optional[Union[str, ColoredUtility]] = None,  # Fill color class or utility\n    stroke_color: Optional[Union[str, ColoredUtility]] = None,  # Stroke color class or utility\n    width: Union[int, str] = 2,  # Stroke width value\n    size: int = 6,  # Icon size (numeric value for w and h)\n    extra_classes: str = \"\"  # Additional classes to include\n) -&gt; str:  # Combined class string for SVG icon\n    \"Generate common SVG icon classes.\"\ndef test_svg_helper_functions()\n    \"Test SVG helper functions.\"\n\n\nClasses\nclass StrokeWidthFactory:\n    def __init__(self):\n        \"\"\"Initialize with stroke width configuration.\"\"\"\n        super().__init__(\"stroke\", STROKE_WIDTH_CONFIG, \"Stroke width utilities for styling the stroke width of SVG elements\")\n        # Override the numeric scale to only include 0, 1, 2\n        self._valid_values = [0, 1, 2]\n    \n    def __call__(\n        self,\n        value: Optional[TailwindValue] = None,  # The stroke width value\n        negative: bool = False  # Not applicable for stroke width\n    ) -&gt; StandardUtility:  # A stroke width utility instance\n    \"Factory for stroke-width utilities with restricted numeric scale (0-2).\"\n    \n    def __init__(self):\n            \"\"\"Initialize with stroke width configuration.\"\"\"\n            super().__init__(\"stroke\", STROKE_WIDTH_CONFIG, \"Stroke width utilities for styling the stroke width of SVG elements\")\n            # Override the numeric scale to only include 0, 1, 2\n            self._valid_values = [0, 1, 2]\n        \n        def __call__(\n            self,\n            value: Optional[TailwindValue] = None,  # The stroke width value\n            negative: bool = False  # Not applicable for stroke width\n        ) -&gt; StandardUtility:  # A stroke width utility instance\n        \"Initialize with stroke width configuration.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about the stroke width factory.\"\n\n\nVariables\nfill_none  # Remove fill\nfill  # The fill color factory\nstroke_none  # Remove stroke\nstroke  # The stroke color factory\nSTROKE_WIDTH_CONFIG\nstroke_width  # The stroke width factory\n\n\n\ntables (tables.ipynb)\n\nTable utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.tables import (\n    table_display,\n    border_collapse,\n    border_spacing,\n    table_layout,\n    caption_side,\n    TableDisplayFactory,\n    test_tables_display_examples,\n    test_tables_border_collapse_examples,\n    BorderSpacingFactory,\n    test_tables_border_spacing_basic_examples,\n    test_tables_border_spacing_directional_examples,\n    test_tables_border_spacing_arbitrary_examples,\n    test_tables_layout_examples,\n    test_tables_caption_side_examples,\n    test_tables_all_utilities,\n    test_tables_fasthtml_examples,\n    test_tables_complex_fasthtml_examples\n)\n\n\nFunctions\ndef test_tables_display_examples()\n    \"Test table display utilities.\"\ndef test_tables_border_collapse_examples()\n    \"Test border collapse utilities.\"\ndef test_tables_border_spacing_basic_examples()\n    \"Test basic border spacing utilities.\"\ndef test_tables_border_spacing_directional_examples()\n    \"Test directional border spacing utilities.\"\ndef test_tables_border_spacing_arbitrary_examples()\n    \"Test border spacing utilities with arbitrary values.\"\ndef test_tables_layout_examples()\n    \"Test table layout utilities.\"\ndef test_tables_caption_side_examples()\n    \"Test caption side utilities.\"\ndef test_tables_all_utilities()\n    \"Comprehensive test of all table utilities.\"\ndef test_tables_fasthtml_examples()\n    \"Test table utilities in practical FastHTML component examples.\"\ndef test_tables_complex_fasthtml_examples()\n    \"Test a complex table example with various styling.\"\n\n\nClasses\nclass TableDisplayFactory:\n    def __init__(self):\n        \"Initialize with table display value.\"\n        super().__init__(\"table\", \"Display utility for creating a table element\")\n    \n    @property\n    def inline(\n        self\n    ) -&gt; str:  # The 'inline-table' CSS class\n    \"Factory for table display utilities.\"\n    \n    def __init__(self):\n            \"Initialize with table display value.\"\n            super().__init__(\"table\", \"Display utility for creating a table element\")\n        \n        @property\n        def inline(\n            self\n        ) -&gt; str:  # The 'inline-table' CSS class\n        \"Initialize with table display value.\"\n    \n    def inline(\n            self\n        ) -&gt; str:  # The 'inline-table' CSS class\n        \"Return the inline-table utility class.\"\n    \n    def caption(\n            self\n        ) -&gt; str:  # The 'table-caption' CSS class\n        \"Return the table-caption utility class.\"\n    \n    def cell(\n            self\n        ) -&gt; str:  # The 'table-cell' CSS class\n        \"Return the table-cell utility class.\"\n    \n    def column(\n            self\n        ) -&gt; str:  # The 'table-column' CSS class\n        \"Return the table-column utility class.\"\n    \n    def column_group(\n            self\n        ) -&gt; str:  # The 'table-column-group' CSS class\n        \"Return the table-column-group utility class.\"\n    \n    def footer_group(\n            self\n        ) -&gt; str:  # The 'table-footer-group' CSS class\n        \"Return the table-footer-group utility class.\"\n    \n    def header_group(\n            self\n        ) -&gt; str:  # The 'table-header-group' CSS class\n        \"Return the table-header-group utility class.\"\n    \n    def row_group(\n            self\n        ) -&gt; str:  # The 'table-row-group' CSS class\n        \"Return the table-row-group utility class.\"\n    \n    def row(\n            self\n        ) -&gt; str:  # The 'table-row' CSS class\n        \"Return the table-row utility class.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about this table display factory.\"\nclass BorderSpacingFactory:\n    def __init__(self):\n        \"\"\"Initialize with scaled factories for directional variants.\"\"\"\n        super().__init__(\"Border spacing utilities for controlling the spacing between table borders\")\n        # Create scaled factories with properly hyphenated prefixes\n        self._base = ScaledFactory(\"border-spacing\", SPACING_CONFIG, \"All sides border spacing\")\n        self.x = ScaledFactory(\"border-spacing-x\", SPACING_CONFIG, \"Horizontal border spacing\")\n        self.y = ScaledFactory(\"border-spacing-y\", SPACING_CONFIG, \"Vertical border spacing\")\n    \n    def __call__(\n        self,\n        value: Optional[TailwindScale] = None  # The spacing value\n    ) -&gt; StandardUtility:  # A border spacing utility for all sides\n    \"Factory for border-spacing utilities with directional support.\"\n    \n    def __init__(self):\n            \"\"\"Initialize with scaled factories for directional variants.\"\"\"\n            super().__init__(\"Border spacing utilities for controlling the spacing between table borders\")\n            # Create scaled factories with properly hyphenated prefixes\n            self._base = ScaledFactory(\"border-spacing\", SPACING_CONFIG, \"All sides border spacing\")\n            self.x = ScaledFactory(\"border-spacing-x\", SPACING_CONFIG, \"Horizontal border spacing\")\n            self.y = ScaledFactory(\"border-spacing-y\", SPACING_CONFIG, \"Vertical border spacing\")\n        \n        def __call__(\n            self,\n            value: Optional[TailwindScale] = None  # The spacing value\n        ) -&gt; StandardUtility:  # A border spacing utility for all sides\n        \"Initialize with scaled factories for directional variants.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the border spacing factory.\"\n\n\nVariables\ntable_display  # The table display factory\nborder_spacing  # The border spacing factory\n\n\n\nTest Code Functionality (test_code.ipynb)\n\nFunctions to test code snippets using the library:\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.test_code import (\n    create_test_script,\n    execute_test_code\n)\n\n\nFunctions\ndef create_test_script(\n    code: str, # The Python code snippet to wrap in a test script\n    config: Optional[LibraryConfig] = None  # Optional configuration\n) -&gt; str: # A complete Python script with imports and the provided code\n    \"Create a test script with necessary imports and the provided code.\"\ndef execute_test_code(\n    code: str,  # The code to test\n    show_imports: bool = False,  # Whether to show the generated imports\n    timeout: int = 10  # Timeout in seconds\n) -&gt; Tuple[bool, str, str]:  # (success, stdout, stderr)\n    \"Execute test code in a safe environment.\"\n\n\n\ntesting (testing.ipynb)\n\nStandardized test page creation for Jupyter notebooks with FastHTML\n\n\nImport\nfrom cjm_fasthtml_tailwind.core.testing import (\n    create_test_app,\n    create_test_page,\n    start_test_server\n)\n\n\nFunctions\ndef create_test_app(\n    debug: bool = True  # Enable debug mode\n) -&gt; tuple: # Tuple containing (app, rt) - FastHTML app instance and route decorator\n    \"Create a standardized test app for Jupyter notebooks with Tailwind.\"\ndef create_test_page(\n    title: str,  # Page title\n    *content,  # Page content elements\n    container: bool = True,  # Wrap in container\n    custom_theme_names: Optional[List[str]] = None  # Custom themes for selector\n) -&gt; Div:  # Div containing complete page layout with navbar and content\n    \"Create a standardized test page layout with optional theme selector.\"\ndef start_test_server(\n    app: FastHTML,    # FastHTML app instance created by create_test_app or fast_app\n    port: int = 8000,  # Port\n) -&gt; JupyUvi:  # JupyUvi server instance for Jupyter notebook testing\n    \"\"\"\n    Start a test server and return the JupyUvi instance.\n    \n    Usage:\n        server = start_test_server(app)\n        HTMX()  # Display the app\n        \n        # Later, in another cell:\n        server.stop()\n    \"\"\"\n\n\n\ntransforms (transforms.ipynb)\n\nTransform, rotate, scale, skew, translate and other transformation utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.transforms import (\n    BACKFACE_VALUES,\n    backface,\n    PERSPECTIVE_VALUES,\n    perspective,\n    PERSPECTIVE_ORIGIN_VALUES,\n    perspective_origin,\n    ROTATE_ANGLES,\n    ROTATE_CONFIG,\n    rotate,\n    SCALE_VALUES,\n    SCALE_CONFIG,\n    scale_tw,\n    SKEW_ANGLES,\n    skew,\n    TRANSFORM_VALUES,\n    transform,\n    TRANSFORM_ORIGIN_VALUES,\n    origin,\n    TRANSFORM_STYLE_VALUES,\n    transform_style,\n    TRANSLATE_CONFIG,\n    translate,\n    test_transforms_backface_examples,\n    PerspectiveFactory,\n    test_transforms_perspective_examples,\n    PerspectiveOriginFactory,\n    test_transforms_perspective_origin_examples,\n    RotateUtility,\n    RotateFactory,\n    NegativeRotateFactory,\n    test_transforms_rotate_examples,\n    ScaleUtility,\n    ScaleFactory,\n    NegativeScaleFactory,\n    test_transforms_scale_examples,\n    SkewUtility,\n    SkewFactory,\n    NegativeSkewFactory,\n    test_transforms_skew_examples,\n    TransformFactory,\n    test_transforms_transform_examples,\n    TransformOriginFactory,\n    test_transforms_origin_examples,\n    test_transforms_style_examples,\n    TranslateFactory,\n    test_transforms_translate_examples,\n    test_transforms_fasthtml_examples,\n    center_transform,\n    hover_scale,\n    flip_card_3d,\n    parallax_transform,\n    test_transforms_helper_examples\n)\n\n\nFunctions\ndef test_transforms_backface_examples()\n    \"Test backface visibility utilities.\"\ndef test_transforms_perspective_examples()\n    \"Test perspective utilities.\"\ndef test_transforms_perspective_origin_examples()\n    \"Test perspective origin utilities.\"\ndef test_transforms_rotate_examples()\n    \"Test rotate utilities.\"\ndef test_transforms_scale_examples()\n    \"Test scale utilities.\"\ndef test_transforms_skew_examples()\n    \"Test skew utilities.\"\ndef test_transforms_transform_examples()\n    \"Test transform utilities.\"\ndef test_transforms_origin_examples()\n    \"Test transform origin utilities.\"\ndef test_transforms_style_examples()\n    \"Test transform style utilities.\"\ndef test_transforms_translate_examples()\n    \"Test translate utilities.\"\ndef test_transforms_fasthtml_examples()\n    \"Test transform utilities in practical FastHTML component examples.\"\ndef center_transform(\n) -&gt; str: # Classes to center an element using translate transformations\n    \"Center an element using transform translate.\"\ndef hover_scale(\n    scale: int = 110 # The scale percentage to apply on hover (e.g., 110 for 110%)\n) -&gt; str: # Classes to create a hover scale effect with transitions\n    \"Create a hover scale effect.\"\ndef flip_card_3d(\n    perspective_value: str = \"normal\" # The perspective value for the 3D effect (e.g., 'normal', 'dramatic', 'distant')\n) -&gt; Dict[str, str]: # Dictionary with class strings for container, inner, front, and back elements\n    \"Get classes for a 3D flip card effect.\"\ndef parallax_transform(\n    speed: float = 0.5 # The parallax scroll speed multiplier (e.g., 0.5 for half speed)\n) -&gt; str: # Classes to create a parallax transform effect based on scroll position\n    \"Create a parallax transform effect.\"\ndef test_transforms_helper_examples()\n    \"Test helper functions for common transform patterns.\"\n\n\nClasses\nclass PerspectiveFactory(SimpleFactory):\n    \"Factory for perspective with both named and custom values.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the perspective factory.\"\nclass PerspectiveOriginFactory(SimpleFactory):\n    \"Factory for perspective origin with both fixed and custom values.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the perspective origin factory.\"\nclass RotateUtility(StandardUtility):\n    \"Utility class for rotation with angle support.\"\n    \nclass RotateFactory:\n    def __init__(self):\n        \"\"\"Initialize with directional sub-factories.\"\"\"\n        super().__init__(\"Rotate utilities for rotating elements\")\n        self.x = ScaledFactory(\"rotate-x\", ROTATE_CONFIG, \"Rotate around X axis\")\n        self.y = ScaledFactory(\"rotate-y\", ROTATE_CONFIG, \"Rotate around Y axis\")\n        self.z = ScaledFactory(\"rotate-z\", ROTATE_CONFIG, \"Rotate around Z axis\")\n    \n    def __call__(self, value: TailwindValue, negative: bool = False) -&gt; RotateUtility\n    \"Factory for rotation utilities with directional support.\"\n    \n    def __init__(self):\n            \"\"\"Initialize with directional sub-factories.\"\"\"\n            super().__init__(\"Rotate utilities for rotating elements\")\n            self.x = ScaledFactory(\"rotate-x\", ROTATE_CONFIG, \"Rotate around X axis\")\n            self.y = ScaledFactory(\"rotate-y\", ROTATE_CONFIG, \"Rotate around Y axis\")\n            self.z = ScaledFactory(\"rotate-z\", ROTATE_CONFIG, \"Rotate around Z axis\")\n        \n        def __call__(self, value: TailwindValue, negative: bool = False) -&gt; RotateUtility\n        \"Initialize with directional sub-factories.\"\n    \n    def negative(self) -&gt; 'NegativeRotateFactory':\n            \"\"\"Return a negative variant factory.\"\"\"\n            return NegativeRotateFactory()\n        \n        def get_info(self) -&gt; Dict[str, Any]\n        \"Return a negative variant factory.\"\n    \n    def get_info(self) -&gt; Dict[str, Any]:\n            \"\"\"Get information about the rotate factory.\"\"\"\n            return {\n                'description': self._doc,\n        \"Get information about the rotate factory.\"\nclass NegativeRotateFactory:\n    \"Factory for negative rotation utilities.\"\n    \nclass ScaleUtility(StandardUtility):\n    \"Utility class for scaling with percentage support.\"\n    \nclass ScaleFactory:\n    def __init__(self)\n    \"Factory for scale utilities with directional and 3D support.\"\n    \n    def __init__(self)\n        \"Initialize with directional sub-factories.\"\n    \n    def negative(self) -&gt; 'NegativeScaleFactory':\n            \"\"\"Return a negative variant factory.\"\"\"\n            return NegativeScaleFactory()\n        \n        def get_info(self) -&gt; Dict[str, Any]\n        \"Return a negative variant factory.\"\n    \n    def get_info(self) -&gt; Dict[str, Any]:\n            \"\"\"Get information about the scale factory.\"\"\"\n            return {\n                'description': self._doc,\n        \"Get information about the scale factory.\"\nclass NegativeScaleFactory:\n    \"Factory for negative scale utilities.\"\n    \nclass SkewUtility(StandardUtility):\n    \"Utility class for skewing with angle support.\"\n    \nclass SkewFactory:\n    def __init__(self)\n    \"Factory for skew utilities with directional support.\"\n    \n    def __init__(self)\n        \"Initialize with directional sub-factories.\"\n    \n    def negative(self) -&gt; 'NegativeSkewFactory':\n            \"\"\"Return a negative variant factory.\"\"\"\n            return NegativeSkewFactory()\n        \n        def get_info(self) -&gt; Dict[str, Any]\n        \"Return a negative variant factory.\"\n    \n    def get_info(self) -&gt; Dict[str, Any]:\n            \"\"\"Get information about the skew factory.\"\"\"\n            return {\n                'description': self._doc,\n        \"Get information about the skew factory.\"\nclass NegativeSkewFactory:\n    \"Factory for negative skew utilities.\"\n    \nclass TransformFactory(SimpleFactory):\n    \"Factory for transform utilities with special and custom values.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the transform factory.\"\nclass TransformOriginFactory(SimpleFactory):\n    \"Factory for transform origin with both fixed and custom values.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the transform origin factory.\"\nclass TranslateFactory:\n    def __init__(self):\n        \"\"\"Initialize with directional sub-factories.\"\"\"\n        super().__init__(\"Translate utilities for translating elements\")\n        # Create directional translate factories\n        self.x = ScaledFactory(\"translate-x\", TRANSLATE_CONFIG, \"Translate along X axis\")\n        self.y = ScaledFactory(\"translate-y\", TRANSLATE_CONFIG, \"Translate along Y axis\")\n        self.z = ScaledFactory(\"translate-z\", TRANSLATE_CONFIG, \"Translate along Z axis\")\n    \n    def __call__(self, value: TailwindScale, negative: bool = False) -&gt; ScaledUtility\n    \"Factory for translate utilities with directional and 3D support.\"\n    \n    def __init__(self):\n            \"\"\"Initialize with directional sub-factories.\"\"\"\n            super().__init__(\"Translate utilities for translating elements\")\n            # Create directional translate factories\n            self.x = ScaledFactory(\"translate-x\", TRANSLATE_CONFIG, \"Translate along X axis\")\n            self.y = ScaledFactory(\"translate-y\", TRANSLATE_CONFIG, \"Translate along Y axis\")\n            self.z = ScaledFactory(\"translate-z\", TRANSLATE_CONFIG, \"Translate along Z axis\")\n        \n        def __call__(self, value: TailwindScale, negative: bool = False) -&gt; ScaledUtility\n        \"Initialize with directional sub-factories.\"\n    \n    def negative(self) -&gt; 'NegativeFactory':\n            \"\"\"Return a negative variant factory.\"\"\"\n            return NegativeFactory(\"translate\", TRANSLATE_CONFIG)\n        \n        def get_info(self) -&gt; Dict[str, Any]\n        \"Return a negative variant factory.\"\n    \n    def get_info(self) -&gt; Dict[str, Any]:\n            \"\"\"Get information about the translate factory.\"\"\"\n            from cjm_fasthtml_tailwind.builders.scales import NUMERIC_SCALE, DECIMAL_SCALE\n            return {\n                'description': self._doc,\n        \"Get information about the translate factory.\"\n\n\nVariables\nBACKFACE_VALUES = {2 items}\nbackface  # The backface visibility factory\nPERSPECTIVE_VALUES = {6 items}\nperspective  # The perspective factory\nPERSPECTIVE_ORIGIN_VALUES = {9 items}\nROTATE_ANGLES  # Common rotation angles in degrees\nROTATE_CONFIG\nrotate  # The rotate factory\nSCALE_VALUES = [10 items]  # Common scale percentages\nSCALE_CONFIG\nscale_tw  # The scale factory (renamed to avoid conflict with built-in scale)\nSKEW_ANGLES = [6 items]  # Common skew angles in degrees\nskew  # The skew factory\nTRANSFORM_VALUES = {3 items}\ntransform  # The transform factory\nTRANSFORM_ORIGIN_VALUES = {9 items}\nTRANSFORM_STYLE_VALUES = {2 items}\ntransform_style  # The transform style factory\nTRANSLATE_CONFIG\ntranslate  # The translate factory\n\n\n\ntransitions_and_animation (transitions_and_animation.ipynb)\n\nTransition and animation utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.transitions_and_animation import (\n    transition,\n    transition_behavior,\n    DURATION_SCALE,\n    DURATION_CONFIG,\n    duration,\n    ease,\n    DELAY_SCALE,\n    DELAY_CONFIG,\n    delay,\n    animate,\n    TransitionPropertyFactory,\n    test_transitions_and_animation_property_examples,\n    test_transitions_and_animation_behavior_examples,\n    DurationFactory,\n    test_transitions_and_animation_duration_examples,\n    EaseFactory,\n    test_transitions_and_animation_timing_examples,\n    DelayFactory,\n    test_transitions_and_animation_delay_examples,\n    AnimationFactory,\n    test_transitions_and_animation_examples,\n    test_transitions_and_animation_fasthtml_examples,\n    test_transitions_and_animation_animation_fasthtml_examples,\n    test_transitions_and_animation_composition_fasthtml_examples,\n    smooth_transition,\n    hover_effect,\n    fade_in,\n    loading_spinner,\n    skeleton_loader,\n    test_transitions_and_animation_helper_examples\n)\n\n\nFunctions\ndef test_transitions_and_animation_property_examples()\n    \"Test transition property utilities.\"\ndef test_transitions_and_animation_behavior_examples()\n    \"Test transition behavior utilities.\"\ndef test_transitions_and_animation_duration_examples()\n    \"Test transition duration utilities.\"\ndef test_transitions_and_animation_timing_examples():\n    \"\"\"Test transition timing function utilities.\"\"\"\n    # Test predefined easing functions\n    assert str(ease.linear) == \"ease-linear\"\n    assert str(ease._in) == \"ease-in\"  # Note: 'in' is a Python keyword, so we use 'in_'\n    \"Test transition timing function utilities.\"\ndef test_transitions_and_animation_delay_examples()\n    \"Test transition delay utilities.\"\ndef test_transitions_and_animation_examples()\n    \"Test animation utilities.\"\ndef test_transitions_and_animation_fasthtml_examples()\n    \"Test transition and animation utilities in practical FastHTML component examples.\"\ndef test_transitions_and_animation_animation_fasthtml_examples()\n    \"Test animation utilities in practical FastHTML component examples.\"\ndef test_transitions_and_animation_composition_fasthtml_examples()\n    \"Test composing multiple transition utilities together.\"\ndef smooth_transition(\n    properties: str = \"all\",  # Which properties to transition (default: all)\n    duration_ms: int = 300,  # Duration in milliseconds\n    easing: str = \"in-out\"  # Easing function\n) -&gt; str:  # Combined CSS classes for smooth transitions\n    \"Create a smooth transition with common defaults.\"\ndef hover_effect(\n    duration_ms: int = 200  # Duration in milliseconds\n) -&gt; str:  # Combined CSS classes for hover effects\n    \"Standard hover effect transition for interactive elements.\"\ndef fade_in(\n    duration_ms: int = 500,  # Duration in milliseconds\n    delay_ms: Optional[int] = None  # Optional delay in milliseconds\n) -&gt; str:  # Combined CSS classes for fade-in effect\n    \"Fade-in transition for entering elements.\"\ndef loading_spinner(\n) -&gt; str:  # Combined CSS classes for a loading spinner\n    \"Create a loading spinner animation.\"\ndef skeleton_loader(\n) -&gt; str:  # Combined CSS classes for a skeleton loader\n    \"Create a skeleton loader animation for content placeholders.\"\ndef test_transitions_and_animation_helper_examples()\n    \"Test helper functions for common transition patterns.\"\n\n\nClasses\nclass TransitionPropertyFactory(SimpleFactory):\n    \"Factory for transition property utilities with custom value support.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the transition property factory.\"\nclass TransitionPropertyFactory(SimpleFactory):\n    \"Factory for transition property utilities with custom value support.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the transition property factory.\"\nclass DurationFactory:\n    def __init__(\n        self,\n        prefix: str,\n        config: ScaleConfig,\n        doc: Optional[str] = None\n    )\n    \"Factory for duration utilities with millisecond support.\"\n    \n    def __init__(\n            self,\n            prefix: str,\n            config: ScaleConfig,\n            doc: Optional[str] = None\n        )\n        \"Initialize duration factory with autocomplete properties.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the duration factory.\"\nclass EaseFactory(SimpleFactory):\n    \"Factory for easing/timing function utilities with custom value support.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the ease factory.\"\nclass DelayFactory:\n    def __init__(\n        self,\n        prefix: str,\n        config: ScaleConfig,\n        doc: Optional[str] = None\n    )\n    \"Factory for delay utilities with millisecond support.\"\n    \n    def __init__(\n            self,\n            prefix: str,\n            config: ScaleConfig,\n            doc: Optional[str] = None\n        )\n        \"Initialize delay factory with autocomplete properties.\"\nclass AnimationFactory(SimpleFactory):\n    \"Factory for animation utilities with custom value support.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get information about the animation factory.\"\n\n\nVariables\nDURATION_SCALE = [9 items]  # Standard Tailwind duration scale\nDURATION_CONFIG  # Duration configuration\nduration  # The duration factory\nDELAY_SCALE = [9 items]  # Standard Tailwind delay scale\nDELAY_CONFIG  # Delay configuration\ndelay  # The delay factory\n\n\n\ntypography (typography.ipynb)\n\nTypography utilities for Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_tailwind.utilities.typography import (\n    font_family,\n    FONT_SCALES,\n    FONT_SIZE_CONFIG,\n    font_size,\n    antialiased,\n    subpixel_antialiased,\n    italic,\n    not_italic,\n    font_weight,\n    font_stretch,\n    normal_nums,\n    ordinal,\n    slashed_zero,\n    lining_nums,\n    oldstyle_nums,\n    proportional_nums,\n    tabular_nums,\n    diagonal_fractions,\n    stacked_fractions,\n    TRACKING_CONFIG,\n    tracking,\n    LINE_CLAMP_CONFIG,\n    line_clamp,\n    LEADING_CONFIG,\n    leading,\n    list_image,\n    list_position,\n    list_style,\n    text_align,\n    text_color,\n    underline,\n    overline,\n    line_through,\n    no_underline,\n    decoration_color,\n    decoration_style,\n    DECORATION_THICKNESS_CONFIG,\n    decoration_thickness,\n    UNDERLINE_OFFSET_CONFIG,\n    underline_offset,\n    uppercase,\n    lowercase,\n    capitalize,\n    normal_case,\n    truncate,\n    text_ellipsis,\n    text_clip,\n    text_wrap,\n    text_nowrap,\n    text_balance,\n    text_pretty,\n    indent,\n    align,\n    whitespace,\n    break_normal,\n    break_all,\n    break_keep,\n    wrap_break_word,\n    wrap_anywhere,\n    wrap_normal,\n    hyphens,\n    content,\n    FontFamily,\n    test_typography_font_family_examples,\n    test_typography_font_size_examples,\n    test_typography_font_smoothing_examples,\n    test_typography_font_style_examples,\n    FontWeight,\n    test_typography_font_weight_examples,\n    FontStretch,\n    test_typography_font_stretch_examples,\n    test_typography_font_variant_numeric_examples,\n    test_typography_spacing_examples,\n    test_typography_line_clamp_examples,\n    test_typography_line_height_examples,\n    ListImageUtility,\n    ListImageFactory,\n    test_typography_list_image_examples,\n    ListStylePosition,\n    ListStyleType,\n    test_typography_list_styles_examples,\n    TextAlign,\n    test_typography_text_alignment_examples,\n    test_typography_text_color_examples,\n    DecorationStyle,\n    test_typography_text_decoration_examples,\n    test_typography_underline_offset_examples,\n    test_typography_text_transform_examples,\n    test_typography_text_overflow_examples,\n    test_typography_text_wrap_examples,\n    test_typography_text_indent_examples,\n    test_typography_vertical_align_examples,\n    test_typography_whitespace_examples,\n    test_typography_word_break_examples,\n    test_typography_overflow_wrap_examples,\n    test_typography_hyphens_examples,\n    ContentUtility,\n    ContentFactory,\n    test_typography_content_examples,\n    test_typography_fasthtml_examples\n)\n\n\nFunctions\ndef test_typography_font_family_examples()\n    \"Test font family utilities.\"\ndef test_typography_font_size_examples()\n    \"Test font size utilities.\"\ndef test_typography_font_smoothing_examples()\n    \"Test font smoothing utilities.\"\ndef test_typography_font_style_examples()\n    \"Test font style utilities.\"\ndef test_typography_font_weight_examples()\n    \"Test font weight utilities.\"\ndef test_typography_font_stretch_examples()\n    \"Test font stretch utilities.\"\ndef test_typography_font_variant_numeric_examples()\n    \"Test font variant numeric utilities.\"\ndef test_typography_spacing_examples()\n    \"Test letter spacing utilities.\"\ndef test_typography_line_clamp_examples()\n    \"Test line clamp utilities.\"\ndef test_typography_line_height_examples()\n    \"Test line height utilities.\"\ndef test_typography_list_image_examples()\n    \"Test list style image utilities.\"\ndef test_typography_list_styles_examples()\n    \"Test list styles utilities.\"\ndef test_typography_text_alignment_examples()\n    \"Test text alignment utilities.\"\ndef test_typography_text_color_examples()\n    \"Test text color utilities.\"\ndef test_typography_text_decoration_examples()\n    \"Test text decoration utilities.\"\ndef test_typography_underline_offset_examples()\n    \"Test underline offset utilities.\"\ndef test_typography_text_transform_examples()\n    \"Test text transform utilities.\"\ndef test_typography_text_overflow_examples()\n    \"Test text overflow utilities.\"\ndef test_typography_text_wrap_examples()\n    \"Test text wrap utilities.\"\ndef test_typography_text_indent_examples()\n    \"Test text indent utilities.\"\ndef test_typography_vertical_align_examples()\n    \"Test vertical align utilities.\"\ndef test_typography_whitespace_examples()\n    \"Test whitespace utilities.\"\ndef test_typography_word_break_examples()\n    \"Test word break utilities.\"\ndef test_typography_overflow_wrap_examples()\n    \"Test overflow wrap utilities.\"\ndef test_typography_hyphens_examples()\n    \"Test hyphens utilities.\"\ndef test_typography_content_examples()\n    \"Test content utilities for pseudo-elements.\"\ndef test_typography_fasthtml_examples()\n    \"Test typography utilities in practical FastHTML component examples.\"\n\n\nClasses\nclass FontFamily(str, Enum):\n    \"Font family options for controlling typography.\"\nclass FontWeight(str, Enum):\n    \"Font weight options from thin to black.\"\nclass FontStretch(str, Enum):\n    \"Font stretch options for controlling font width.\"\nclass ListImageUtility(BaseUtility):\n    \"Utility class for list-style-image with arbitrary value support.\"\n    \nclass ListImageFactory:\n    def __init__(self):\n        \"\"\"Initialize list image factory.\"\"\"\n        super().__init__(\"List style image utilities for controlling list item marker images\")\n        self.none = ListImageUtility(\"list-image\")\n        self.none._value = \"none\"\n    \n    def __call__(\n        self,\n        value: str  # Image URL or value\n    ) -&gt; ListImageUtility:  # A list image utility instance\n    \"Factory for list-style-image utilities.\"\n    \n    def __init__(self):\n            \"\"\"Initialize list image factory.\"\"\"\n            super().__init__(\"List style image utilities for controlling list item marker images\")\n            self.none = ListImageUtility(\"list-image\")\n            self.none._value = \"none\"\n        \n        def __call__(\n            self,\n            value: str  # Image URL or value\n        ) -&gt; ListImageUtility:  # A list image utility instance\n        \"Initialize list image factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Factory information\n        \"Get information about the list image factory.\"\nclass ListStylePosition(str, Enum):\n    \"List marker position options.\"\nclass ListStyleType(str, Enum):\n    \"List marker type options.\"\nclass TextAlign(str, Enum):\n    \"Text alignment options.\"\nclass DecorationStyle(str, Enum):\n    \"Text decoration style options.\"\nclass ContentUtility(BaseUtility):\n    \"Utility class for content with arbitrary value support.\"\n    \nclass ContentFactory:\n    def __init__(self):\n        \"\"\"Initialize content factory.\"\"\"\n        super().__init__(\"Content utilities for controlling before and after pseudo-element content\")\n        self.none = ContentUtility(\"content\")\n        self.none._value = \"none\"\n    \n    def __call__(\n        self,\n        value: str  # Content value\n    ) -&gt; ContentUtility:  # A content utility instance\n    \"Factory for content utilities for pseudo-elements.\"\n    \n    def __init__(self):\n            \"\"\"Initialize content factory.\"\"\"\n            super().__init__(\"Content utilities for controlling before and after pseudo-element content\")\n            self.none = ContentUtility(\"content\")\n            self.none._value = \"none\"\n        \n        def __call__(\n            self,\n            value: str  # Content value\n        ) -&gt; ContentUtility:  # A content utility instance\n        \"Initialize content factory.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Factory information\n        \"Get information about the content factory.\"\n\n\nVariables\nfont_family  # Font family utilities\nFONT_SCALES = [13 items]  # Font size named scales\nFONT_SIZE_CONFIG  # Font size configuration\nfont_size  # Font size factory\nantialiased  # Antialiased font smoothing\nsubpixel_antialiased  # Subpixel antialiased font smoothing\nitalic  # Italic font style\nnot_italic  # Normal font style\nfont_weight  # Font weight utilities\nfont_stretch  # Font stretch utilities\nnormal_nums  # Normal numbers\nordinal  # Ordinal numbers\nslashed_zero  # Slashed zero\nlining_nums  # Lining numbers\noldstyle_nums  # Old-style numbers\nproportional_nums  # Proportional numbers\ntabular_nums  # Tabular numbers\ndiagonal_fractions  # Diagonal fractions\nstacked_fractions  # Stacked fractions\nTRACKING_CONFIG\ntracking  # Letter spacing factory\nLINE_CLAMP_CONFIG\nline_clamp  # Line clamp factory\nLEADING_CONFIG\nleading  # Line height factory\nlist_image  # List image factory\nlist_position  # List position factory\nlist_style  # List type factory\ntext_align  # Text alignment factory\ntext_color  # Text color factory\nunderline  # Underline text\noverline  # Overline text\nline_through  # Line through text\nno_underline  # No text decoration\ndecoration_color  # Text decoration color factory\ndecoration_style  # Text decoration style factory\nDECORATION_THICKNESS_CONFIG\ndecoration_thickness  # Text decoration thickness factory\nUNDERLINE_OFFSET_CONFIG\nunderline_offset  # Text underline offset factory\nuppercase  # Uppercase text\nlowercase  # Lowercase text\ncapitalize  # Capitalize text\nnormal_case  # Normal case text\ntruncate  # Truncate overflow text\ntext_ellipsis  # Text ellipsis\ntext_clip  # Text clip\ntext_wrap  # Text wrap\ntext_nowrap  # Text no wrap\ntext_balance  # Text balance\ntext_pretty  # Text pretty\nindent  # Text indent factory\nbreak_normal  # Normal word break\nbreak_all  # Break all\nbreak_keep  # Keep words together\nwrap_break_word  # Break word wrap\nwrap_anywhere  # Wrap anywhere\nwrap_normal  # Normal wrap\ncontent  # Content factory\n\n\n\nutils (utils.ipynb)\n\nUtility functions for CLI tools\n\n\nImport\nfrom cjm_fasthtml_tailwind.cli.utils import (\n    SearchResult,\n    print_header,\n    print_not_found,\n    print_total,\n    print_helpful_instructions,\n    display_items_generic,\n    handle_module_not_found,\n    simple_item_formatter,\n    indented_item_formatter,\n    extract_match_context,\n    extract_source_line_context,\n    create_search_result,\n    search_in_text,\n    search_in_name_and_text,\n    check_factory_usage_patterns,\n    search_in_fields,\n    search_in_source_code,\n    find_variable_usages,\n    find_usage_in_items,\n    get_view_command,\n    format_usage_examples,\n    discover_utility_modules,\n    iterate_all_modules_with_items,\n    extract_helper_names_from_test,\n    load_code_from_file,\n    list_utility_modules\n)\n\n\nFunctions\ndef print_header(\n    title: str,  # Header title to display\n    width: int = 60  # Width of separator line in characters\n) -&gt; None:  # No return value\n    \"Print a formatted header with title and separator.\"\ndef print_not_found(\n    item_type: str,  # Type of item that wasn't found (e.g., 'factory', 'example')\n    item_name: str,  # Name of the item that wasn't found\n    module_name: Optional[str] = None,  # Optional module name where search was performed\n    config: Optional[LibraryConfig] = None  # Optional configuration\n) -&gt; None:  # No return value\n    \"Print a standardized not found message.\"\ndef print_total(\n    item_type: str,  # Type of items being counted (e.g., 'factories', 'examples')\n    count: int,  # Number of items found\n    across_modules: bool = False  # Whether count spans multiple modules\n) -&gt; None:  # No return value\n    \"Print a standardized total count message.\"\ndef print_helpful_instructions(\n    instructions: List[Tuple[str, Optional[str]]]  # List of (description, example) tuples\n)\n    \"Print helpful instructions section.\"\ndef display_items_generic(\n    items: Union[Dict, List],  # Items to display (dict of lists or list)\n    title: str,  # Title for the display\n    item_formatter: Callable[[Any], str],  # Function to format each item\n    item_type: str,  # Type of items for the total message\n    instructions: Optional[List[Tuple[str, Optional[str]]]] = None,  # Help instructions\n    not_found_message: Optional[str] = None  # Custom not found message\n)\n    \"Generic function to display a collection of items with consistent formatting.\"\ndef handle_module_not_found(\n    \"Print standardized error message for module not found.\"\ndef simple_item_formatter(\n    name_field: str,  # Name of the field containing the item name\n    doc_field: str  # Name of the field containing the documentation\n) -&gt; Callable[[Any], str]:  # Formatter function\n    \"Create a simple formatter for items with name and documentation fields.\"\ndef indented_item_formatter(\n    prefix: str = \"  \"  # Indentation prefix\n) -&gt; Callable[[Any], Callable[[Any], str]]:  # Returns a formatter factory\n    \"Create a formatter that indents items with a prefix.\"\ndef extract_match_context(\n    text: str,  # Text to extract context from\n    query: str,  # Query string to find\n    case_sensitive: bool = False,  # Whether to perform case-sensitive search\n    context_size: int = 30  # Number of characters to show before and after match\n) -&gt; str:  # Context string with match highlighted\n    \"Extract context around a match in text.\"\ndef extract_source_line_context(\n    source: str,  # Source code to search\n    query: str,  # Query string to find\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; str:  # Line context showing where match was found\n    \"Extract line context for a match in source code.\"\ndef create_search_result(\n    content_type: str,  # Type of content ('factory', 'example', 'helper', 'module')\n    module_name: str,  # Module where match was found\n    item_name: str,  # Name of the item that matched\n    match_context: str,  # Context showing the match\n    match_location: str  # Where in the item the match was found ('name', 'doc', 'source')\n) -&gt; SearchResult:  # SearchResult instance with provided fields\n    \"Create a SearchResult with standard fields.\"\ndef search_in_text(\n    query: str,  # Search query\n    text: str,  # Text to search in\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; bool:  # True if match found\n    \"Check if query exists in text.\"\ndef search_in_name_and_text(\n    query: str,  # Search query to find\n    item_name: str,  # Item name to search in\n    text: str,  # Text (documentation, docstring) to search in\n    content_type: str,  # Type of content being searched\n    module_name: str,  # Module containing the item\n    text_location: str,  # Description of text field (e.g., 'documentation', 'docstring')\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; List[SearchResult]:  # List of search results for matches found\n    \"Search in both name and text fields, returning search results.\"\ndef check_factory_usage_patterns(\n    factory_name: str  # Name of factory to create patterns for\n) -&gt; List[str]:  # List of regex patterns matching factory usage\n    \"Get regex patterns to match common factory usage patterns.\"\ndef search_in_fields(\n    item: Any,  # The item to search in\n    query: str,  # Search query\n    fields: Dict[str, Callable[[Any], str]],  # field_name -&gt; getter function\n    content_type: str,  # Type of content being searched\n    module_name: str,  # Module containing the item\n    item_name: str,  # Name of the item\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; List[SearchResult]:  # List of search results\n    \"Search for query in multiple fields of an item.\"\ndef search_in_source_code(\n    source: str,  # Source code to search in\n    query: str,  # Search query\n    content_type: str,  # Type of content being searched\n    module_name: str,  # Module containing the source\n    item_name: str,  # Name of the item\n    case_sensitive: bool = False  # Whether to perform case-sensitive search\n) -&gt; Optional[SearchResult]:  # Search result or None\n    \"Search in source code and return result with line context.\"\ndef find_variable_usages(\n    func_src: str,  # Source code to search\n    var_name: str  # Variable name to find\n) -&gt; List[Tuple[int, int, str]]:  # List of (line_number, column, context_type) tuples\n    \"Find variable usages by parsing function into an AST.\"\ndef find_usage_in_items(\n    target_name: str,  # Name of the target (factory/helper) to find usage for\n    items: Dict[str, List[Any]],  # Dictionary of module_name -&gt; list of items\n    source_getter: Callable[[Any], str],  # Function to get source code from item\n    item_type: str  # Type of items being searched (for display)\n) -&gt; List[Tuple[str, Any]]:  # List of (module_name, item) tuples\n    \"Find items that use a specific target (factory/helper).\"\ndef get_view_command(\n    content_type: str,  # Type of content ('factory', 'example', 'helper', 'module')\n    module_name: str,  # Module name\n    item_name: str,  # Item name (or feature name for examples)\n    config: Optional[LibraryConfig] = None  # Optional configuration\n) -&gt; str:  # CLI command to view the item\n    \"Get the CLI command to view a specific item.\"\ndef format_usage_examples(\n    usage_items: List[Tuple[str, Any]],  # List of (module_name, item) tuples\n    item_name_getter: Callable[[Any], str],  # Function to get item name\n    item_type: str,  # Type of items ('examples' or 'helpers')\n    view_command_type: str  # Type for get_view_command ('example' or 'helper')\n) -&gt; List[str]:  # List of formatted strings\n    \"Format usage examples for display.\"\ndef discover_utility_modules(\n    config: Optional[LibraryConfig] = None,  # Optional configuration, uses active if not provided\n    include_submodules: bool = True  # Whether to include submodules\n) -&gt; List[Tuple[str, Any]]:  # List of (module_name, module) tuples\n    \"Discover all utility modules based on configuration, including submodules.\"\ndef iterate_all_modules_with_items(\n    extractor_func: Callable[[Any, str], List[Any]],  # Function to extract items from a module\n    module_filter: Optional[str] = None,  # Optional specific module to filter for\n    config: Optional[LibraryConfig] = None  # Optional configuration\n) -&gt; Dict[str, List[Any]]:  # Dictionary mapping module names to their items\n    \"Generic iterator for extracting items from all modules.\"\ndef extract_helper_names_from_test(\n    source: str  # Source code of the test_&lt;module&gt;_helper_examples function\n) -&gt; List[str]:  # List of helper function names\n    \"Extract helper function names from test source code.\"\ndef load_code_from_file(\n    filepath: str  # Path to file to load\n) -&gt; Optional[str]:  # File contents as string, or None if error\n    \"Load code from a file.\"\ndef list_utility_modules(\n    config: Optional[LibraryConfig] = None  # Optional configuration\n) -&gt; Dict[str, str]:  # Dictionary mapping module names to their docstrings\n    \"List all available utility modules with their docstrings.\"\n\n\nClasses\n@dataclass\nclass SearchResult:\n    \"Represents a single search result.\"\n    \n    content_type: str  # 'factory', 'example', 'helper', 'module'\n    module_name: str  # Module where found\n    item_name: str  # Name of the item (factory name, function name, etc.)\n    match_context: str  # The context where the match was found\n    match_location: str  # Where the match was found (name, doc, source)\n    score: float = 1.0  # Relevance score for fuzzy matching",
    "crumbs": [
      "cjm-fasthtml-tailwind"
    ]
  },
  {
    "objectID": "core/testing.html",
    "href": "core/testing.html",
    "title": "testing",
    "section": "",
    "text": "A standardized way to create test apps in Jupyter notebooks:\n\nsource\n\n\n\n create_test_app (debug:bool=True)\n\nCreate a standardized test app for Jupyter notebooks with Tailwind.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndebug\nbool\nTrue\nEnable debug mode\n\n\nReturns\ntuple\n\nTuple containing (app, rt) - FastHTML app instance and route decorator",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#test-app-creation",
    "href": "core/testing.html#test-app-creation",
    "title": "testing",
    "section": "",
    "text": "A standardized way to create test apps in Jupyter notebooks:\n\nsource\n\n\n\n create_test_app (debug:bool=True)\n\nCreate a standardized test app for Jupyter notebooks with Tailwind.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndebug\nbool\nTrue\nEnable debug mode\n\n\nReturns\ntuple\n\nTuple containing (app, rt) - FastHTML app instance and route decorator",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#test-page-wrapper",
    "href": "core/testing.html#test-page-wrapper",
    "title": "testing",
    "section": "Test Page Wrapper",
    "text": "Test Page Wrapper\nA wrapper for creating consistent test pages:\n\nsource\n\ncreate_test_page\n\n create_test_page (title:str, *content, container:bool=True,\n                   custom_theme_names:Optional[List[str]]=None)\n\nCreate a standardized test page layout with optional theme selector.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntitle\nstr\n\nPage title\n\n\ncontent\nVAR_POSITIONAL\n\nPage content elements\n\n\ncontainer\nbool\nTrue\nWrap in container\n\n\ncustom_theme_names\nOptional\nNone\nCustom themes for selector\n\n\nReturns\nfunctools.partial(&lt;function ft_hx at 0x7fef182b3880&gt;, ‘div’)\n\nDiv containing complete page layout with navbar and content",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#jupyter-notebook-utilities",
    "href": "core/testing.html#jupyter-notebook-utilities",
    "title": "testing",
    "section": "Jupyter Notebook Utilities",
    "text": "Jupyter Notebook Utilities\nHelper functions for working with FastHTML in Jupyter:\n\nsource\n\nstart_test_server\n\n start_test_server (app:fasthtml.core.FastHTML, port:int=8000)\n\n*Start a test server and return the JupyUvi instance.\nUsage: server = start_test_server(app) HTMX() # Display the app\n# Later, in another cell:\nserver.stop()*\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napp\nFastHTML\n\nFastHTML app instance created by create_test_app or fast_app\n\n\nport\nint\n8000\nPort\n\n\nReturns\nJupyUvi\n\nJupyUvi server instance for Jupyter notebook testing",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#example-usage",
    "href": "core/testing.html#example-usage",
    "title": "testing",
    "section": "Example Usage",
    "text": "Example Usage\nHere’s how to use the testing utilities in a notebook:\n\nfrom cjm_fasthtml_tailwind.core.base import combine_classes\nfrom cjm_fasthtml_tailwind.utilities.spacing import *\nfrom cjm_fasthtml_tailwind.utilities.sizing import *\nfrom cjm_fasthtml_tailwind.utilities.layout import *\nfrom cjm_fasthtml_tailwind.utilities.flexbox_and_grid import *\nfrom cjm_fasthtml_tailwind.utilities.backgrounds import bg\nfrom cjm_fasthtml_tailwind.utilities.typography import font_size, text_color\n\n\n# Create a test app with default settings\napp, rt = create_test_app()\n\npadding_val = 2\ngap_val = 2\n\n# Define a test route\n@rt\ndef index():\n    return create_test_page(\n        \"Tailwind Test Page\",\n        Div(\n            # Header spans full width\n            Header(\"Dashboard\", cls=combine_classes(col_span.full, p(padding_val), bg.blue._500, text_color.white)),\n            \n            # Sidebar\n            Aside(\"Sidebar\", cls=combine_classes(row_span(2), p(padding_val), bg.gray._200)),\n            \n            # Main content\n            Main(\"Main Content\", cls=combine_classes(col_span(2), p(padding_val))),\n            \n            # Stats cards\n            Div(\"Stat 1\", cls= combine_classes(p(padding_val), bg.green._100)),\n            Div(\"Stat 2\", cls= combine_classes(p(padding_val), bg.yellow._100)),\n            \n            cls=combine_classes(\n                grid_display,\n                grid_cols(3),\n                grid_rows(3),\n                gap(gap_val),\n                h.screen\n            )\n        )\n    )\n\n# Start the server\nserver = start_test_server(app)\nHTMX()\n\n\n\n\n\n \n\n\n\n# Stop the server when done\nserver.stop()",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#comprehensive-example---modern-dashboard-layout",
    "href": "core/testing.html#comprehensive-example---modern-dashboard-layout",
    "title": "testing",
    "section": "Comprehensive Example - Modern Dashboard Layout",
    "text": "Comprehensive Example - Modern Dashboard Layout\nA more comprehensive example demonstrating various Tailwind utilities to create a modern dashboard:\n\n# Import all utilities we'll use\nfrom fasthtml.common import *\nfrom cjm_fasthtml_tailwind.utilities.accessibility import not_sr_only, sr_only\nfrom cjm_fasthtml_tailwind.utilities.flexbox_and_grid import (\n    auto_cols, auto_rows, basis, col, col_end, col_span, col_start, \n    content, flex, flex_between, flex_center, flex_col_center, \n    flex_direction, flex_wrap, gap, grid_center, grid_cols, grid_flow, \n    grid_rows, grow, items, justify, justify_items, justify_self, \n    order, place_content, place_items, place_self, responsive_grid, \n    row, row_end, row_span, row_start, self_align, shrink\n)\nfrom cjm_fasthtml_tailwind.utilities.layout import (\n    aspect, bottom, box, box_decoration, break_util, center_absolute, \n    clear, columns, display_tw, end, float_tw, full_bleed, inset, \n    isolation, left, object_fit, object_position, \n    overflow, overscroll, position, right, stack_context, \n    start, sticky_top, top, visibility, z\n)\nfrom cjm_fasthtml_tailwind.utilities.sizing import (\n    container, full_screen, full_size, h, max_h, max_w, min_h, \n    min_w, size, size_util, square, w\n)\nfrom cjm_fasthtml_tailwind.utilities.spacing import (\n    m, margin, me, ms, p, pad, pe, ps, space\n)\nfrom cjm_fasthtml_tailwind.core.base import combine_classes\nfrom cjm_fasthtml_tailwind.core.resources import get_tailwind_headers\n\n\n# Create a new test app\nfrom cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\nfrom cjm_fasthtml_tailwind.utilities.backgrounds import bg\nfrom cjm_fasthtml_tailwind.utilities.borders import rounded, border\nfrom cjm_fasthtml_tailwind.utilities.effects import shadow\nfrom cjm_fasthtml_tailwind.utilities.transitions_and_animation import transition\n\napp, rt = create_test_app()\n\n@rt\ndef index():\n    # Navbar component\n    navbar = Nav(\n        Div(\n            # Logo section\n            Div(\n                H1(\"Dashboard\", cls=combine_classes(font_size.xl, font_weight.bold, text_color.white)),\n                cls=combine_classes(flex_display, items.center)\n            ),\n            \n            # Navigation links\n            Div(\n                A(\"Home\", href=\"#\", cls=combine_classes(p.x(4), p.y(2), text_color.white, bg.blue._700.hover, rounded.full)),\n                A(\"Analytics\", href=\"#\", cls=combine_classes(p.x(4), p.y(2), text_color.white, bg.blue._700.hover, rounded.full)),\n                A(\"Reports\", href=\"#\", cls=combine_classes(p.x(4), p.y(2), text_color.white, bg.blue._700.hover, rounded.full)),\n                A(\"Settings\", href=\"#\", cls=combine_classes(p.x(4), p.y(2), text_color.white, bg.blue._700.hover, rounded.full)),\n                cls=combine_classes(flex_display, gap(2))\n            ),\n            \n            # User profile section\n            Div(\n                Div(\n                    Span(\"John Doe\", cls=text_color.white),\n                    Div(cls=combine_classes(square(10), bg.white, rounded.full)),\n                    cls=combine_classes(flex_display, items.center, gap(3))\n                ),\n                cls=combine_classes(m.l.auto)\n            ),\n            \n            cls=combine_classes(\n                flex_between(),\n                container(),\n                m.x.auto,\n                p.x(4)\n            )\n        ),\n        cls=combine_classes(\n            w.full,\n            bg.blue._600,\n            sticky_top(),\n            z(50)\n        )\n    )\n    \n    # Main layout with sidebar and content\n    main_layout = Div(\n        # Sidebar\n        Aside(\n            # Sidebar header\n            H2(\"Menu\", cls=combine_classes(p(4), font_size.lg, font_weight.semibold, border.b())),\n            \n            # Menu items\n            Ul(\n                Li(\n                    A(\n                        I(cls=combine_classes(\"fas fa-chart-line\", m.r(0.5))),\n                        \"Dashboard\",\n                        href=\"#\",\n                        cls=combine_classes(\n                            flex_display,\n                            items.center,\n                            p(4),\n                            bg.gray._100.hover,\n                            transition.colors\n                        )\n                    )\n                ),\n                Li(\n                    A(\n                        I(cls=combine_classes(\"fas fa-users\", m.r(0.5))),\n                        \"Users\",\n                        href=\"#\",\n                        cls=combine_classes(\n                            flex_display,\n                            items.center,\n                            p(4),\n                            bg.gray._100.hover,\n                            transition.colors\n                        )\n                    )\n                ),\n                Li(\n                    A(\n                        I(cls=combine_classes(\"fas fa-cog\", m.r(0.5))),\n                        \"Settings\",\n                        href=\"#\",\n                        cls=combine_classes(\n                            flex_display,\n                            items.center,\n                            p(4),\n                            bg.gray._100.hover,\n                            transition.colors\n                        )\n                    )\n                ),\n                cls=space.y(1)\n            ),\n            \n            cls=combine_classes(\n                w(64),\n                min_h.screen,\n                bg.white,\n                border.r(),\n                position.sticky,\n                top(16),  # Account for navbar height\n                overflow.y.auto\n            )\n        ),\n        \n        # Main content area\n        Main(\n            # Page header\n            Header(\n                H1(\"Analytics Dashboard\", cls=combine_classes(font_size._3xl, font_weight.bold)),\n                P(\"Last updated: \" + \"December 2024\", cls=text_color.gray._600),\n                cls=combine_classes(p(6), bg.white, rounded.lg, shadow(), m.b(6))\n            ),\n            \n            # Stats grid\n            Div(\n                # Stat card 1\n                Div(\n                    Div(\n                        H3(\"Total Users\", cls=combine_classes(text_color.gray._600, font_size.sm)),\n                        P(\"12,345\", cls=combine_classes(font_size._3xl, font_weight.bold, text_color.blue._600)),\n                        P(\"↑ 12.5%\", cls=combine_classes(text_color.green._500, font_size.sm)),\n                        cls=pad(x=6, y=4)\n                    ),\n                    cls=combine_classes(bg.white, rounded.lg, shadow(), overflow.hidden)\n                ),\n                \n                # Stat card 2\n                Div(\n                    Div(\n                        H3(\"Revenue\", cls=combine_classes(text_color.gray._600, font_size.sm)),\n                        P(\"$45,678\", cls=combine_classes(font_size._3xl, font_weight.bold, text_color.green._600)),\n                        P(\"↑ 8.2%\", cls=combine_classes(text_color.green._500, font_size.sm)),\n                        cls=pad(x=6, y=4)\n                    ),\n                    cls=combine_classes(bg.white, rounded.lg, shadow(), overflow.hidden)\n                ),\n                \n                # Stat card 3\n                Div(\n                    Div(\n                        H3(\"Active Sessions\", cls=combine_classes(text_color.gray._600, font_size.sm)),\n                        P(\"892\", cls=combine_classes(font_size._3xl, font_weight.bold, text_color.purple._600)),\n                        P(\"↓ 3.1%\", cls=combine_classes(text_color.red._500, font_size.sm)),\n                        cls=pad(x=6, y=4)\n                    ),\n                    cls=combine_classes(bg.white, rounded.lg, shadow(), overflow.hidden)\n                ),\n                \n                # Stat card 4\n                Div(\n                    Div(\n                        H3(\"Conversion Rate\", cls=combine_classes(text_color.gray._600, font_size.sm)),\n                        P(\"3.42%\", cls=combine_classes(font_size._3xl, font_weight.bold, text_color.orange._600)),\n                        P(\"↑ 0.8%\", cls=combine_classes(text_color.green._500, font_size.sm)),\n                        cls=pad(x=6, y=4)\n                    ),\n                    cls=combine_classes(bg.white, rounded.lg, shadow(), overflow.hidden)\n                ),\n                \n                cls=responsive_grid(\n                    mobile=1,\n                    tablet=2,\n                    desktop=4,\n                    gap_size=6\n                )\n            ),\n            \n            # Charts section\n            Div(\n                # Main chart\n                Div(\n                    H2(\"Revenue Overview\", cls=combine_classes(font_size.xl, font_weight.semibold, m.b(4))),\n                    Div(\n                        \"Chart placeholder - Revenue trends over time\",\n                        cls=combine_classes(\n                            h(64),\n                            bg.gray._100,\n                            rounded(),\n                            flex_center()\n                        )\n                    ),\n                    cls=combine_classes(\n                        col_span(2),\n                        bg.white,\n                        rounded.lg,\n                        shadow(),\n                        p(6)\n                    )\n                ),\n                \n                # Side panel\n                Div(\n                    H2(\"Top Products\", cls=combine_classes(font_size.xl, font_weight.semibold, m.b(4))),\n                    Ul(\n                        Li(\"Product A - $12,345\", cls=pad(y=2)),\n                        Li(\"Product B - $10,234\", cls=pad(y=2)),\n                        Li(\"Product C - $8,912\", cls=pad(y=2)),\n                        Li(\"Product D - $7,234\", cls=pad(y=2)),\n                        Li(\"Product E - $5,123\", cls=pad(y=2)),\n                        cls=space.y(2)\n                    ),\n                    cls=combine_classes(\n                        bg.white,\n                        rounded.lg,\n                        shadow(),\n                        p(6)\n                    )\n                ),\n                \n                cls=combine_classes(\n                    grid_display,\n                    grid_cols(3),\n                    gap(6),\n                    m.t(6)\n                )\n            ),\n            \n            # Table section\n            Div(\n                H2(\"Recent Transactions\", cls=combine_classes(font_size.xl, font_weight.semibold, m.b(4))),\n                Div(\n                    Table(\n                        Thead(\n                            Tr(\n                                Th(\"ID\", cls=pad(x=6, y=3)),\n                                Th(\"Customer\", cls=pad(x=6, y=3)),\n                                Th(\"Amount\", cls=pad(x=6, y=3)),\n                                Th(\"Status\", cls=pad(x=6, y=3)),\n                                Th(\"Date\", cls=pad(x=6, y=3)),\n                                cls=bg.gray._50\n                            )\n                        ),\n                        Tbody(\n                            Tr(\n                                Td(\"#001\", cls=pad(x=6, y=4)),\n                                Td(\"John Smith\", cls=pad(x=6, y=4)),\n                                Td(\"$234.50\", cls=pad(x=6, y=4)),\n                                Td(\n                                    Span(\"Completed\", cls=combine_classes(p.x(2), p.y(1), bg.green._100, text_color.green._800, rounded.full, font_size.sm)),\n                                    cls=pad(x=6, y=4)\n                                ),\n                                Td(\"Dec 1, 2024\", cls=pad(x=6, y=4)),\n                                cls=border.t()\n                            ),\n                            Tr(\n                                Td(\"#002\", cls=pad(x=6, y=4)),\n                                Td(\"Jane Doe\", cls=pad(x=6, y=4)),\n                                Td(\"$567.80\", cls=pad(x=6, y=4)),\n                                Td(\n                                    Span(\"Pending\", cls=combine_classes(p.x(2), p.y(1), bg.yellow._100, text_color.yellow._800, rounded.full, font_size.sm)),\n                                    cls=pad(x=6, y=4)\n                                ),\n                                Td(\"Dec 1, 2024\", cls=pad(x=6, y=4)),\n                                cls=border.t()\n                            ),\n                            Tr(\n                                Td(\"#003\", cls=pad(x=6, y=4)),\n                                Td(\"Bob Johnson\", cls=pad(x=6, y=4)),\n                                Td(\"$123.45\", cls=pad(x=6, y=4)),\n                                Td(\n                                    Span(\"Failed\", cls=combine_classes(p.x(2), p.y(1), bg.red._100, text_color.red._800, rounded.full, font_size.sm)),\n                                    cls=pad(x=6, y=4)\n                                ),\n                                Td(\"Dec 1, 2024\", cls=pad(x=6, y=4)),\n                                cls=border.t()\n                            )\n                        ),\n                        cls=str(min_w.full)\n                    ),\n                    cls=overflow.x.auto\n                ),\n                cls=combine_classes(\n                    bg.white,\n                    rounded.lg,\n                    shadow(),\n                    p(6),\n                    m.t(6)\n                )\n            ),\n            \n            cls=combine_classes(\n                flex(1),\n                p(6),\n                bg.gray._50,\n                min_h.screen\n            )\n        ),\n        \n        cls=combine_classes(flex_display, min_h.screen)\n    )\n    \n    return Div(\n        navbar,\n        main_layout,\n        cls=font_family.sans\n    )\n\n# Start the server\nserver = start_test_server(app, port=8001)\nHTMX(port=8001)\n\n\n\n\n\n \n\n\n\n# Stop the server when done\nserver.stop()",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#comprehensive-example---card-based-layout",
    "href": "core/testing.html#comprehensive-example---card-based-layout",
    "title": "testing",
    "section": "Comprehensive Example - Card-Based Layout",
    "text": "Comprehensive Example - Card-Based Layout\nAnother example showing a card-based layout with various utility combinations:\n\n# Create another test app for the card-based layout\nfrom cjm_fasthtml_tailwind.utilities.backgrounds import bg_linear, from_color, to_color\nfrom cjm_fasthtml_tailwind.utilities.typography import font_size, font_family, font_weight, text_color, text_align, line_through\nfrom cjm_fasthtml_tailwind.utilities.effects import shadow, ring, ring_color, shadow_color\nfrom cjm_fasthtml_tailwind.utilities.transitions_and_animation import transition, ease, duration, animate\nfrom cjm_fasthtml_tailwind.utilities.borders import outline, outline_offset, outline_style\n\napp2, rt2 = create_test_app()\n\n@rt2\ndef index():\n    # Header with centered content\n    header = Header(\n        Div(\n            H1(\"Product Showcase\", cls=combine_classes(font_size._4xl, font_weight.bold, text_color.white)),\n            P(\"Discover our amazing products\", cls=combine_classes(font_size.xl, text_color.gray._200)),\n            cls=combine_classes(\n                container(),\n                m.x.auto,\n                pad(x=4, y=16),\n                text_align.center\n            )\n        ),\n        cls=combine_classes(bg_linear.to_r, from_color.blue._600, to_color.purple._600)\n    )\n    \n    # Filter section\n    filter_section = Section(\n        Div(\n            # Filter title\n            H2(\"Filter by Category\", cls=combine_classes(font_size.lg, font_weight.semibold, m.b(4))),\n            \n            # Filter buttons\n            Div(\n                Button(\"All\", cls=combine_classes(\n                    p.x(6), p.y(2),\n                    bg.blue._600, text_color.white, rounded.full,\n                    bg.blue._700.hover, transition.colors\n                )),\n                Button(\"Electronics\", cls=combine_classes(\n                    p.x(6), p.y(2),\n                    bg.gray._200, text_color.gray._700, rounded.full,\n                    bg.gray._300.hover, transition.colors\n                )),\n                Button(\"Clothing\", cls=combine_classes(\n                    p.x(6), p.y(2),\n                    bg.gray._200, text_color.gray._700, rounded.full,\n                    bg.gray._300.hover, transition.colors\n                )),\n                Button(\"Books\", cls=combine_classes(\n                    p.x(6), p.y(2),\n                    bg.gray._200, text_color.gray._700, rounded.full,\n                    bg.gray._300.hover, transition.colors\n                )),\n                cls=combine_classes(\n                    flex_display,\n                    flex_wrap.wrap,\n                    gap(3),\n                    justify.center\n                )\n            ),\n            cls=combine_classes(\n                container(),\n                m.x.auto,\n                pad(x=4, y=8)\n            )\n        ),\n        cls=combine_classes(bg.gray._50, border.b())\n    )\n    \n    # Product cards grid\n    products_grid = Main(\n        Div(\n            # Product Card 1\n            Article(\n                # Image placeholder with aspect ratio\n                Div(\n                    Img(src=\"https://via.placeholder.com/400x300\", \n                        alt=\"Product 1\",\n                        cls=combine_classes(w.full, h.full, object_fit.cover)),\n                    cls=combine_classes(aspect.video, overflow.hidden, bg.gray._200)\n                ),\n                \n                # Card content\n                Div(\n                    # Product title and price\n                    Div(\n                        H3(\"Premium Headphones\", cls=combine_classes(font_size.lg, font_weight.semibold)),\n                        P(\"$199.99\", cls=combine_classes(font_size.xl, font_weight.bold, text_color.blue._600)),\n                        cls=combine_classes(flex_display, justify.between, items.start, m.b(2))\n                    ),\n                    \n                    # Product description\n                    P(\"High-quality wireless headphones with noise cancellation\", \n                      cls=combine_classes(text_color.gray._600, font_size.sm, m.b(4))),\n                    \n                    # Rating\n                    Div(\n                        Span(\"⭐⭐⭐⭐⭐\", cls=text_color.yellow._400),\n                        Span(\"(4.8)\", cls=combine_classes(text_color.gray._500, font_size.sm, m.l(2))),\n                        cls=combine_classes(flex_display, items.center, m.b(4))\n                    ),\n                    \n                    # Action buttons\n                    Div(\n                        Button(\"Add to Cart\", cls=combine_classes(\n                            flex(1),\n                            pad(x=4, y=2),\n                            bg.blue._600, text_color.white, rounded(),\n                            bg.blue._700.hover, transition.colors\n                        )),\n                        Button(\"♥\", cls=combine_classes(\n                            square(10),\n                            bg.gray._100, rounded(),\n                            bg.red._100.hover, text_color.red._600.hover, transition.colors,\n                            m.l(2)\n                        )),\n                        cls=combine_classes(flex_display, items.center)\n                    ),\n                    \n                    cls=p(6)\n                ),\n                \n                cls=combine_classes(\n                    bg.white, rounded.lg, shadow.md,\n                    overflow.hidden,\n                    shadow.xl.hover, transition.shadow,\n                    flex_display,\n                    flex_direction.col\n                )\n            ),\n            \n            # Product Card 2 - Featured\n            Article(\n                # Featured badge\n                Div(\n                    Span(\"Featured\", cls=combine_classes(p.x(3), p.y(1), bg.yellow._400, text_color.yellow._900, font_size.sm, font_weight.semibold, rounded.full)),\n                    cls=combine_classes(position.absolute, top(4), right(4), z(10))\n                ),\n                \n                # Image with overlay\n                Div(\n                    Img(src=\"https://via.placeholder.com/400x300\", \n                        alt=\"Product 2\",\n                        cls=combine_classes(w.full, h.full, object_fit.cover)),\n                    # Gradient overlay\n                    Div(cls=combine_classes(\n                        position.absolute,\n                        inset(0),\n                        bg_linear.to_t, from_color.black.opacity(50), to_color.transparent\n                    )),\n                    cls=combine_classes(\n                        aspect.video, \n                        overflow.hidden, \n                        bg.gray._200,\n                        position.relative\n                    )\n                ),\n                \n                # Card content\n                Div(\n                    H3(\"Smart Watch Pro\", cls=combine_classes(font_size.lg, font_weight.semibold)),\n                    P(\"$349.99\", cls=combine_classes(font_size.xl, font_weight.bold, text_color.blue._600, m.b(2))),\n                    P(\"Advanced fitness tracking with GPS and heart rate monitor\", \n                      cls=combine_classes(text_color.gray._600, font_size.sm, m.b(4))),\n                    \n                    # Features list\n                    Ul(\n                        Li(\"✓ Water resistant\", cls=combine_classes(font_size.sm, text_color.gray._600)),\n                        Li(\"✓ 7-day battery life\", cls=combine_classes(font_size.sm, text_color.gray._600)),\n                        Li(\"✓ Multiple sport modes\", cls=combine_classes(font_size.sm, text_color.gray._600)),\n                        cls=space.y(1)\n                    ),\n                    \n                    # CTA button\n                    Button(\"View Details\", cls=combine_classes(\n                        w.full,\n                        pad(x=4, y=3),\n                        m.t(4),\n                        bg_linear.to_r, from_color.purple._600, to_color.blue._600,\n                        text_color.white, rounded(),\n                        from_color.purple._700.hover, to_color.blue._700.hover, transition.all\n                    )),\n                    \n                    cls=p(6)\n                ),\n                \n                cls=combine_classes(\n                    bg.white, rounded.lg, shadow.lg,\n                    overflow.hidden,\n                    position.relative,\n                    shadow._2xl.hover, transition.shadow, shadow_color.amber._400.hover, \n                    ease._in, duration._500,\n                    flex_display,\n                    flex_direction.col\n                )\n            ),\n            \n            # Product Card 3 - Sale item\n            Article(\n                # Sale badge\n                Div(\n                    Span(\"-30%\", cls=combine_classes(p.x(3), p.y(1), bg.red._500, text_color.white, font_size.sm, font_weight.bold, rounded.full)),\n                    cls=combine_classes(position.absolute, top(4), left(4), z(10))\n                ),\n                \n                Div(\n                    Img(src=\"https://via.placeholder.com/400x300\", \n                        alt=\"Product 3\",\n                        cls=combine_classes(w.full, h.full, object_fit.cover)),\n                    cls=combine_classes(aspect.video, overflow.hidden, bg.gray._200, position.relative)\n                ),\n                \n                Div(\n                    H3(\"Laptop Backpack\", cls=combine_classes(font_size.lg, font_weight.semibold)),\n                    Div(\n                        P(\"$69.99\", cls=combine_classes(font_size.xl, font_weight.bold, text_color.red._600)),\n                        P(\"$99.99\", cls=combine_classes(font_size.sm, text_color.gray._400, line_through)),\n                        cls=combine_classes(flex_display, items.baseline, gap(2), m.b(2))\n                    ),\n                    P(\"Durable backpack with laptop compartment and USB charging port\", \n                      cls=combine_classes(text_color.gray._600, font_size.sm, m.b(4))),\n                    \n                    # Stock indicator\n                    Div(\n                        Div(cls=combine_classes(size(2), bg.green._500, rounded.full)),\n                        Span(\"In Stock\", cls=combine_classes(font_size.sm, text_color.gray._600)),\n                        cls=combine_classes(flex_display, items.center, gap(2), m.b(4))\n                    ),\n                    \n                    Button(\"Quick Buy\", cls=combine_classes(\n                        w.full,\n                        pad(x=4, y=2),\n                        bg.red._600, text_color.white, rounded(),\n                        bg.red._700.hover, transition.colors\n                    )),\n                    \n                    cls=p(6)\n                ),\n                \n                cls=combine_classes(\n                    bg.white, rounded.lg, shadow.md,\n                    overflow.hidden,\n                    position.relative,\n                    shadow.xl.hover, transition.shadow,\n                    flex_display,\n                    flex_direction.col\n                )\n            ),\n            \n            # More product cards...\n            *[\n                Article(\n                    Div(\n                        Img(src=\"https://via.placeholder.com/400x300\", \n                            alt=f\"Product {i}\",\n                            cls=combine_classes(w.full, h.full, object_fit.cover)),\n                        cls=combine_classes(aspect.video, overflow.hidden, bg.gray._200)\n                    ),\n                    Div(\n                        H3(f\"Product {i}\", cls=combine_classes(font_size.lg, font_weight.semibold)),\n                        P(f\"${49.99 + i * 10}\", cls=combine_classes(font_size.xl, font_weight.bold, text_color.blue._600, m.b(2))),\n                        P(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\", \n                          cls=combine_classes(text_color.gray._600, font_size.sm, m.b(4))),\n                        Button(\"Add to Cart\", cls=combine_classes(\n                            w.full,\n                            pad(x=4, y=2),\n                            bg.blue._600, text_color.white, rounded(),\n                            bg.blue._700.hover, transition.colors\n                        )),\n                        cls=p(6)\n                    ),\n                    cls=combine_classes(\n                        bg.white, rounded.lg, shadow.md,\n                        overflow.hidden,\n                        shadow.xl.hover, transition.shadow,\n                        flex_display,\n                        flex_direction.col\n                    )\n                ) for i in range(4, 7)\n            ],\n            \n            cls=responsive_grid(\n                mobile=1,\n                tablet=2,\n                desktop=3,\n                gap_size=8\n            )\n        ),\n        cls=combine_classes(\n            container(),\n            m.x.auto,\n            pad(x=4, y=12)\n        )\n    )\n    \n    # Newsletter section\n    newsletter = Section(\n        Div(\n            # Content wrapper\n            Div(\n                H2(\"Stay Updated\", cls=combine_classes(font_size._2xl, font_weight.bold, text_color.white, m.b(2))),\n                P(\"Get the latest products and exclusive offers\", cls=combine_classes(text_color.gray._200, m.b(6))),\n                \n                # Form\n                Form(\n                    Div(\n                        Input(\n                            type=\"email\",\n                            placeholder=\"Enter your email\",\n                            cls=combine_classes(\n                                flex(1),\n                                p(3),\n                                bg.white, rounded.l.lg,\n                                outline_style.none.focus, ring(2).focus, ring_color.blue._400.focus\n                            )\n                        ),\n                        Button(\n                            \"Subscribe\",\n                            type=\"submit\",\n                            cls=combine_classes(\n                                p.x(8), p(3),\n                                bg.yellow._400, text_color.gray._900, font_weight.semibold, rounded.r.lg,\n                                bg.yellow._300.hover, transition.colors\n                            )\n                        ),\n                        cls=combine_classes(flex_display, max_w.md, m.x.auto)\n                    ),\n                    cls=str(w.full)\n                ),\n                \n                cls=combine_classes(\n                    max_w._2xl,\n                    m.x.auto,\n                    text_align.center\n                )\n            ),\n            cls=combine_classes(\n                container(),\n                m.x.auto,\n                pad(x=4, y=16)\n            )\n        ),\n        cls=combine_classes(bg_linear.to_r, from_color.blue._600, to_color.purple._600)\n    )\n    \n    # Footer\n    footer = Footer(\n        Div(\n            P(\"© 2024 Product Showcase. All rights reserved.\", \n              cls=combine_classes(text_color.gray._600, text_align.center)),\n            cls=combine_classes(\n                container(),\n                m.x.auto,\n                pad(x=4, y=8)\n            )\n        ),\n        cls=combine_classes(bg.gray._100, border.t())\n    )\n    \n    return Div(\n        header,\n        filter_section,\n        products_grid,\n        newsletter,\n        footer,\n        cls=combine_classes(min_h.screen, bg.gray._50)\n    )\n\n# Start the server\nserver2 = start_test_server(app2, port=8002)\nHTMX(port=8002)\n\n\n\n\n\n \n\n\n\n# Stop the server when done\nserver2.stop()",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#export",
    "href": "core/testing.html#export",
    "title": "testing",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "core",
      "testing"
    ]
  }
]