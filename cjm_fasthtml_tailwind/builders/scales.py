"""Numeric and named scale builders for Tailwind CSS utilities"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/builders/scales.ipynb.

# %% auto 0
__all__ = ['NUMERIC_SCALE', 'DECIMAL_SCALE', 'SPACING_SCALE', 'FRACTION_DENOMINATORS', 'FRACTIONS', 'SPACING_CONFIG',
           'SIZE_CONFIG', 'INSET_CONFIG', 'generate_fractions', 'ScaleConfig', 'ScaledUtility', 'ScaledFactory',
           'NegativeFactory', 'DirectionalScaledUtility', 'DirectionalScaledFactory', 'list_scale_values',
           'SimpleFactory']

# %% ../../nbs/builders/scales.ipynb 3
from typing import Dict, List, Union, Optional, Tuple, Callable, Any
from dataclasses import dataclass
from cjm_fasthtml_tailwind.core.base import (
    NamedScale, CONTAINER_SCALES, TailwindScale, 
    BaseUtility, StandardUtility, DirectionalUtility,
    UtilityFactory, is_numeric_scale
)

# %% ../../nbs/builders/scales.ipynb 5
NUMERIC_SCALE = list(range(97)) # Standard spacing scale (0-96)

DECIMAL_SCALE = [0.5, 1.5, 2.5, 3.5] # Common decimal scales

SPACING_SCALE = sorted(set(NUMERIC_SCALE + DECIMAL_SCALE)) # Extended spacing scale with decimals

FRACTION_DENOMINATORS = [2, 3, 4, 5, 6, 12] # Fraction denominators supported by Tailwind

# %% ../../nbs/builders/scales.ipynb 6
def generate_fractions(
) -> List[str]:  # List of all valid Tailwind fraction strings sorted by value
    """Generate all valid Tailwind fractions."""
    fractions = []
    for denominator in FRACTION_DENOMINATORS:
        for numerator in range(1, denominator):
            fractions.append(f"{numerator}/{denominator}")
    return sorted(set(fractions), key=lambda x: eval(x))  # Sort by actual value

FRACTIONS = generate_fractions() # Pre-generate fractions

# %% ../../nbs/builders/scales.ipynb 8
@dataclass
class ScaleConfig:
    """Configuration for a scale builder."""
    numeric: bool = True  # Support numeric scales (0-96)
    decimals: bool = False  # Support decimal scales (0.5, 1.5, etc.)
    fractions: bool = False  # Support fractions (1/2, 1/3, etc.)
    named: Optional[List[NamedScale]] = None  # Named scales (xs, sm, md, etc.)
    special: Optional[Dict[str, str]] = None  # Special values (auto, full, screen, etc.)
    negative: bool = False  # Support negative values

# %% ../../nbs/builders/scales.ipynb 9
class ScaledUtility(StandardUtility):
    """Utility class with scale support."""
    
    def __init__(
        self, 
        prefix: str,  # The utility prefix (e.g., 'w', 'h', 'p')
        config: ScaleConfig,  # Configuration defining valid scales and values
        negative: bool = False  # Whether this is a negative variant
    ):
        """Initialize with prefix and scale configuration."""
        self.config = config
        self.negative = negative
        full_prefix = f"-{prefix}" if negative else prefix
        super().__init__(full_prefix)
    
    def _format_value(
        self,
        value: TailwindScale  # The value to format (can be numeric, fraction, or string)
    ) -> str:  # The formatted value string with appropriate wrapping
        """
        Format value according to Tailwind conventions with scale awareness:
        - Values with spaces: wrapped in brackets (arbitrary)
        - String numbers not in scale: wrapped in brackets
        - Otherwise: use standard formatting
        """
        # First check if it's a string containing spaces
        if isinstance(value, str) and ' ' in value:
            return f"[{value}]"
        
        # Check if it's a string number that should be arbitrary
        if isinstance(value, str) and value.isdigit():
            # Check if this number is in the valid numeric scale for this utility
            if self.config.numeric and int(value) in NUMERIC_SCALE:
                # It's a valid numeric scale value, format normally
                return value
            else:
                # It's outside the scale, treat as arbitrary
                return f"[{value}]"
        
        # Otherwise use the standard formatting from parent class
        return super()._format_value(value)
    
    def get_valid_values(
        self
    ) -> List[Union[str, int, float]]:  # List of all valid values for this utility
        """Get all valid values for this utility."""
        values = []
        
        # Add numeric scales
        if self.config.numeric:
            values.extend(NUMERIC_SCALE)
        
        # Add decimal scales
        if self.config.decimals:
            values.extend(DECIMAL_SCALE)
        
        # Add fractions
        if self.config.fractions:
            values.extend(FRACTIONS)
        
        # Add named scales
        if self.config.named:
            values.extend([scale.name for scale in self.config.named])
        
        # Add special values
        if self.config.special:
            values.extend(self.config.special.keys())
        
        return values

# %% ../../nbs/builders/scales.ipynb 11
class ScaledFactory(UtilityFactory[ScaledUtility]):
    """Factory for creating scaled utilities with enhanced attribute access."""
    
    def __init__(
        self, 
        prefix: str,  # The utility prefix (e.g., 'w', 'h', 'p')
        config: ScaleConfig  # Configuration defining valid scales and values
    ):
        """Initialize with prefix and scale configuration."""
        self.config = config
        super().__init__(ScaledUtility, prefix)
    
    def __call__(
        self, 
        value: Optional[TailwindScale] = None,  # The value to apply to the utility
        negative: bool = False  # Whether to create a negative variant
    ) -> ScaledUtility:  # A new scaled utility instance
        """Create a utility instance with optional value."""
        instance = ScaledUtility(self.prefix, self.config, negative)
        if value is not None:
            instance._value = instance._format_value(value)
        return instance
    
    def __getattr__(
        self,
        name: str  # The attribute name to convert to a utility value
    ) -> ScaledUtility:  # A new scaled utility instance with the attribute as value
        """
        Handle attribute access for named values.
        Examples: w.full, h.screen, p.auto, w._2xl
        """
        # Handle negative prefix
        if name.startswith("neg_"):
            actual_name = name[4:]  # Remove "neg_" prefix
            # Handle leading underscore for negative values too
            if actual_name.startswith("_") and len(actual_name) > 1:
                actual_name = actual_name[1:]
            instance = ScaledUtility(self.prefix, self.config, negative=True)
            instance._value = actual_name.replace("_", "-")
            return instance
        
        # Handle leading underscore (for values that start with numbers)
        if name.startswith("_") and len(name) > 1:
            # Remove the leading underscore
            actual_name = name[1:]
        else:
            actual_name = name
        
        # Regular attribute access
        instance = ScaledUtility(self.prefix, self.config)
        instance._value = actual_name.replace("_", "-")
        return instance
    
    @property
    def negative(
        self
    ) -> 'NegativeFactory':  # A factory for creating negative variants
        """Return a negative variant factory."""
        return NegativeFactory(self.prefix, self.config)

# %% ../../nbs/builders/scales.ipynb 12
class NegativeFactory:
    """Factory for creating negative variants."""
    
    def __init__(
        self,
        prefix: str,  # The utility prefix (e.g., 'm', 'inset')
        config: ScaleConfig  # Configuration defining valid scales and values
    ):
        "Initialize with prefix and scale configuration."
        self.prefix = prefix
        self.config = config
    
    def __call__(
        self,
        value: TailwindScale  # The value to apply to the negative utility
    ) -> ScaledUtility:  # A new negative scaled utility instance
        """Create a negative utility instance."""
        instance = ScaledUtility(self.prefix, self.config, negative=True)
        instance._value = instance._format_value(value)
        return instance
    
    def __getattr__(
        self,
        name: str  # The attribute name to convert to a negative utility value
    ) -> ScaledUtility:  # A new negative scaled utility instance
        """Handle attribute access for negative named values."""
        instance = ScaledUtility(self.prefix, self.config, negative=True)
        instance._value = name.replace("_", "-")
        return instance

# %% ../../nbs/builders/scales.ipynb 14
class DirectionalScaledUtility(DirectionalUtility):
    """Directional utility with scale support."""
    
    def __init__(
        self, 
        prefix: str,  # The base utility prefix (e.g., 'p' for padding)
        direction: Optional[str],  # The direction suffix ('t', 'r', 'b', 'l', 'x', 'y')
        config: ScaleConfig,  # Configuration defining valid scales and values
        negative: bool = False  # Whether this is a negative variant
    ):
        """Initialize with prefix, direction, and scale configuration."""
        self.config = config
        self.negative = negative
        # Apply negative prefix before direction
        base_prefix = f"-{prefix}" if negative else prefix
        super().__init__(base_prefix, direction)

# %% ../../nbs/builders/scales.ipynb 15
class DirectionalScaledFactory:
    """Factory for creating directional scaled utilities."""
    
    def __init__(
        self, 
        prefix: str,  # The base utility prefix (e.g., 'p' for padding, 'm' for margin)
        config: ScaleConfig  # Configuration defining valid scales and values
    ):
        """Initialize with prefix and scale configuration."""
        self.prefix = prefix
        self.config = config
        
        # Create direction-specific factories
        self.t = ScaledFactory(f"{prefix}t", config)  # top
        self.r = ScaledFactory(f"{prefix}r", config)  # right
        self.b = ScaledFactory(f"{prefix}b", config)  # bottom
        self.l = ScaledFactory(f"{prefix}l", config)  # left
        self.x = ScaledFactory(f"{prefix}x", config)  # horizontal
        self.y = ScaledFactory(f"{prefix}y", config)  # vertical
    
    def __call__(
        self, 
        value: Optional[TailwindScale] = None,  # The value to apply to all directions
        negative: bool = False  # Whether to create a negative variant
    ) -> ScaledUtility:  # A new scaled utility for all directions
        """Create a utility instance for all directions."""
        return ScaledFactory(self.prefix, self.config)(value, negative)
    
    def __getattr__(
        self,
        name: str  # The attribute name to convert to a utility value
    ) -> ScaledUtility:  # A new scaled utility instance
        """Handle attribute access for named values."""
        return ScaledFactory(self.prefix, self.config).__getattr__(name)
    
    @property
    def negative(
        self
    ) -> 'NegativeFactory':  # A factory for creating negative variants
        """Return a negative variant factory."""
        return NegativeFactory(self.prefix, self.config)

# %% ../../nbs/builders/scales.ipynb 17
SPACING_CONFIG = ScaleConfig( # Spacing configuration (padding, margin, gap)
    numeric=True,
    decimals=True,
    fractions=False,
    named=None,
    special={"px": "px", "auto": "auto"},
    negative=True
)

SIZE_CONFIG = ScaleConfig( # Size configuration (width, height)
    numeric=True,
    decimals=True,
    fractions=True,
    named=CONTAINER_SCALES,
    special={
        "auto": "auto",
        "px": "px", 
        "full": "full",
        "screen": "screen",
        "svw": "svw",
        "svh": "svh",
        "lvw": "lvw", 
        "lvh": "lvh",
        "dvw": "dvw",
        "dvh": "dvh",
        "min": "min",
        "max": "max",
        "fit": "fit",
        "lh": "lh"  # line-height unit for height
    },
    negative=False
)

INSET_CONFIG = ScaleConfig( # Inset configuration (top, right, bottom, left)
    numeric=True,
    decimals=True,
    fractions=True,
    named=None,
    special={
        "auto": "auto",
        "px": "px",
        "full": "full"
    },
    negative=True
)

# %% ../../nbs/builders/scales.ipynb 39
def list_scale_values(
    config: ScaleConfig  # The scale configuration to extract values from
) -> Dict[str, List[Union[str, int, float]]]:  # Dictionary mapping scale types to their values
    """List all possible values for a scale configuration."""
    values = {
        "numeric": [],
        "decimals": [],
        "fractions": [],
        "named": [],
        "special": []
    }
    
    if config.numeric:
        values["numeric"] = NUMERIC_SCALE
    
    if config.decimals:
        values["decimals"] = DECIMAL_SCALE
    
    if config.fractions:
        values["fractions"] = FRACTIONS
    
    if config.named:
        values["named"] = [scale.name for scale in config.named]
    
    if config.special:
        values["special"] = list(config.special.keys())
    
    return values

# %% ../../nbs/builders/scales.ipynb 42
class SimpleFactory:
    """Factory for utilities that are simple string values."""
    
    def __init__(
        self,
        values_dict: Dict[str, str]  # Dictionary mapping attribute names to CSS values
    ):
        "Initialize with a dictionary of values."
        self._values = values_dict
    
    def __getattr__(
        self,
        name: str  # The attribute name to look up
    ) -> str:  # The corresponding CSS value from the dictionary
        "Get CSS value by attribute name, converting underscores to hyphens."
        # Handle underscore to hyphen conversion for multi-word values
        key = name.replace("_", "-")
        if key in self._values:
            return self._values[key]
        # Also check without conversion
        if name in self._values:
            return self._values[name]
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")
