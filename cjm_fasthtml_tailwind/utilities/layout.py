"""Display, position, overflow, z-index and other layout utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/layout.ipynb.

# %% auto 0
__all__ = ['DISPLAY_VALUES', 'display_tw', 'sr_only', 'not_sr_only', 'POSITION_VALUES', 'position', 'inset', 'top', 'right',
           'bottom', 'left', 'start', 'end', 'OVERFLOW_VALUES', 'overflow', 'Z_INDEX_CONFIG', 'z', 'FLOAT_VALUES',
           'float_tw', 'CLEAR_VALUES', 'clear', 'OBJECT_FIT_VALUES', 'object_fit', 'OBJECT_POSITION_VALUES',
           'object_position', 'VISIBILITY_VALUES', 'visibility', 'BOX_SIZING_VALUES', 'box', 'ISOLATION_VALUES',
           'isolation', 'ASPECT_RATIO_VALUES', 'aspect', 'COLUMNS_CONFIG', 'columns', 'BREAK_BEFORE_VALUES',
           'BREAK_AFTER_VALUES', 'BREAK_INSIDE_VALUES', 'break_util', 'BOX_DECORATION_VALUES', 'box_decoration',
           'OVERSCROLL_VALUES', 'overscroll', 'InsetDirectionalFactory', 'OverflowFactory', 'FloatFactory',
           'ObjectPositionFactory', 'AspectRatioFactory', 'BreakFactory', 'OverscrollFactory', 'center_absolute',
           'stack_context', 'sticky_top', 'full_bleed']

# %% ../../nbs/utilities/layout.ipynb 3
from typing import Optional, Union, Literal, List, Dict
from dataclasses import dataclass
from cjm_fasthtml_tailwind.core.base import (
    TailwindScale, combine_classes, StandardUtility, UtilityFactory,
    is_numeric_scale, is_fraction, is_custom_property, is_arbitrary_value
)
from cjm_fasthtml_tailwind.builders.scales import (
    ScaledFactory, DirectionalScaledFactory, ScaleConfig, INSET_CONFIG,
    ScaledUtility, NegativeFactory, SimpleFactory
)

# %% ../../nbs/utilities/layout.ipynb 5
DISPLAY_VALUES = { # Display utilities
    "inline": "inline",
    "block": "block", 
    "inline-block": "inline-block",
    "flow-root": "flow-root",
    "flex": "flex",
    "inline-flex": "inline-flex",
    "grid": "grid",
    "inline-grid": "inline-grid",
    "contents": "contents",
    "table": "table",
    "inline-table": "inline-table",
    "table-caption": "table-caption",
    "table-cell": "table-cell",
    "table-column": "table-column",
    "table-column-group": "table-column-group",
    "table-footer-group": "table-footer-group",
    "table-header-group": "table-header-group",
    "table-row-group": "table-row-group",
    "table-row": "table-row",
    "list-item": "list-item",
    "hidden": "hidden",
    "none": "none"
}

display_tw = SimpleFactory(DISPLAY_VALUES) # The display factory

# Special display utilities
sr_only = "sr-only"  # Screen reader only
not_sr_only = "not-sr-only"  # Not screen reader only

# %% ../../nbs/utilities/layout.ipynb 8
POSITION_VALUES = { # Position utilities
    "static": "static",
    "fixed": "fixed",
    "absolute": "absolute",
    "relative": "relative",
    "sticky": "sticky"
}

position = SimpleFactory(POSITION_VALUES) # The position factory

# %% ../../nbs/utilities/layout.ipynb 11
# For inset, we need special handling because it uses hyphens in directional variants
class InsetDirectionalFactory:
    """Special factory for inset utilities that use hyphenated directions."""
    
    def __init__(
        self,
        prefix: str,  # The base prefix ('inset')
        config: ScaleConfig  # Configuration defining valid scales and values
    ):
        "Initialize with prefix and scale configuration."
        self.prefix = prefix
        self.config = config
        
        # Create direction-specific factories with hyphens
        self.x = ScaledFactory(f"{prefix}-x", config)  # horizontal
        self.y = ScaledFactory(f"{prefix}-y", config)  # vertical
    
    def __call__(
        self,
        value: Optional[TailwindScale] = None,  # The value to apply to the inset
        negative: bool = False  # Whether to create a negative variant
    ) -> ScaledUtility:  # A new scaled utility instance
        """Create a utility instance for all directions."""
        return ScaledFactory(self.prefix, self.config)(value, negative)
    
    def __getattr__(
        self,
        name: str  # The attribute name to convert to a utility value
    ) -> ScaledUtility:  # A new scaled utility instance
        """Handle attribute access for named values."""
        return ScaledFactory(self.prefix, self.config).__getattr__(name)
    
    @property
    def negative(
        self
    ) -> 'NegativeFactory':  # A factory for creating negative variants
        """Return a negative variant factory."""
        return NegativeFactory(self.prefix, self.config)

# Inset utilities (top, right, bottom, left)
inset = InsetDirectionalFactory("inset", INSET_CONFIG) # The inset factory for positioning

# Individual direction utilities don't need special handling
top = ScaledFactory("top", INSET_CONFIG) # The top factory
right = ScaledFactory("right", INSET_CONFIG) # The right factory
bottom = ScaledFactory("bottom", INSET_CONFIG) # The bottom factory
left = ScaledFactory("left", INSET_CONFIG) # The left factory
start = ScaledFactory("start", INSET_CONFIG) # The start factory (logical)
end = ScaledFactory("end", INSET_CONFIG) # The end factory (logical)

# %% ../../nbs/utilities/layout.ipynb 14
OVERFLOW_VALUES = ["auto", "hidden", "clip", "visible", "scroll"] # Overflow values

class OverflowFactory:
    """Factory for overflow utilities with directional support."""
    
    def __init__(self):
        "Initialize with overflow values and directional sub-factories."
        # Create base overflow utilities
        self._values = {value: f"overflow-{value}" for value in OVERFLOW_VALUES}
        
        # Create x and y sub-factories
        self.x = type('OverflowX', (), {
            value: f"overflow-x-{value}" for value in OVERFLOW_VALUES
        })()
        self.y = type('OverflowY', (), {
            value: f"overflow-y-{value}" for value in OVERFLOW_VALUES
        })()
    
    def __getattr__(
        self,
        name: str  # The attribute name to look up in overflow values
    ) -> str:  # The corresponding overflow CSS class
        "Get overflow utility by attribute name."
        if name in self._values:
            return self._values[name]
        raise AttributeError(f"'OverflowFactory' object has no attribute '{name}'")

overflow = OverflowFactory() # The overflow factory

# %% ../../nbs/utilities/layout.ipynb 17
Z_INDEX_CONFIG = ScaleConfig( # Z-index configuration
    numeric=True,  # Support numeric values 0-50
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto"
    },
    negative=True  # Support negative z-index
)

# Create z-index factory
z = ScaledFactory("z", Z_INDEX_CONFIG) # The z-index factory

# %% ../../nbs/utilities/layout.ipynb 20
# Float utilities
FLOAT_VALUES = {
    "right": "float-right",
    "left": "float-left",
    "start": "float-start",
    "end": "float-end",
    "none": "float-none"
}

# Create float factory with special prefix handling
class FloatFactory(SimpleFactory):
    """Special factory for float utilities that prepends 'float-' to values."""
    def __getattr__(
        self,
        name: str  # The attribute name to look up in float values
    ) -> str:  # The corresponding float CSS class
        "Get float utility by attribute name."
        return super().__getattr__(name)

float_tw = FloatFactory(FLOAT_VALUES)  # Renamed to avoid conflict with Python's float

# %% ../../nbs/utilities/layout.ipynb 22
# Clear utilities
CLEAR_VALUES = {
    "left": "clear-left",
    "right": "clear-right",
    "both": "clear-both",
    "start": "clear-start",
    "end": "clear-end",
    "none": "clear-none"
}

# Create clear factory
clear = SimpleFactory(CLEAR_VALUES) # The clear factory

# %% ../../nbs/utilities/layout.ipynb 24
# Object fit utilities
OBJECT_FIT_VALUES = {
    "contain": "object-contain",
    "cover": "object-cover",
    "fill": "object-fill",
    "none": "object-none",
    "scale-down": "object-scale-down"
}

# Create object fit factory
object_fit = SimpleFactory(OBJECT_FIT_VALUES) # The object fit factory

# %% ../../nbs/utilities/layout.ipynb 26
# Object position utilities - combines fixed positions with custom value support
OBJECT_POSITION_VALUES = {
    "top-left": "object-top-left",
    "top": "object-top",
    "top-right": "object-top-right",
    "left": "object-left",
    "center": "object-center",
    "right": "object-right",
    "bottom-left": "object-bottom-left",
    "bottom": "object-bottom",
    "bottom-right": "object-bottom-right"
}

# Enhanced factory that supports both fixed values and custom positions
class ObjectPositionFactory(SimpleFactory):
    """Factory for object position with both fixed and custom values."""
    
    def __call__(
        self,
        value: str  # Custom position value (e.g., '50% 25%' or CSS variable)
    ) -> str:  # The formatted object position CSS class
        """Handle custom position values like '50% 25%'."""
        if is_custom_property(value):
            return f"object-({value})"
        elif is_arbitrary_value(value) or " " in value:
            return f"object-[{value}]"
        return f"object-{value}"

# Create object position factory
object_position = ObjectPositionFactory(OBJECT_POSITION_VALUES) # The object position factory

# %% ../../nbs/utilities/layout.ipynb 29
# Visibility utilities
VISIBILITY_VALUES = {
    "visible": "visible",
    "invisible": "invisible",
    "collapse": "collapse"
}

# Create visibility factory
visibility = SimpleFactory(VISIBILITY_VALUES) # The visibility factory

# %% ../../nbs/utilities/layout.ipynb 31
# Box sizing utilities
BOX_SIZING_VALUES = {
    "border": "box-border",
    "content": "box-content"
}

# Create box sizing factory
box = SimpleFactory(BOX_SIZING_VALUES) # The box sizing factory

# %% ../../nbs/utilities/layout.ipynb 33
# Isolation utilities
ISOLATION_VALUES = {
    "isolate": "isolate",
    "auto": "isolation-auto"
}

# Create isolation factory
isolation = SimpleFactory(ISOLATION_VALUES) # The isolation factory

# %% ../../nbs/utilities/layout.ipynb 35
# Aspect ratio utilities - fixed values with custom ratio support
ASPECT_RATIO_VALUES = {
    "auto": "aspect-auto",
    "square": "aspect-square",
    "video": "aspect-video"
}

# Enhanced factory that supports both fixed values and custom ratios
class AspectRatioFactory(SimpleFactory):
    """Factory for aspect ratio with both fixed and custom values."""
    
    def __call__(
        self,
        value: str  # Custom aspect ratio (e.g., '16/9', '4/3', or CSS variable)
    ) -> str:  # The formatted aspect ratio CSS class
        """Handle custom ratio values like '16/9' or '4/3'."""
        # Handle ratio format
        if "/" in value and not is_arbitrary_value(value):
            return f"aspect-{value}"
        # Handle custom properties
        elif is_custom_property(value):
            return f"aspect-({value})"
        # Handle arbitrary values
        elif is_arbitrary_value(value):
            return f"aspect-[{value}]"
        return f"aspect-{value}"

# Create aspect ratio factory
aspect = AspectRatioFactory(ASPECT_RATIO_VALUES) # The aspect ratio factory

# %% ../../nbs/utilities/layout.ipynb 38
from ..core.base import CONTAINER_SCALES

COLUMNS_CONFIG = ScaleConfig( # Columns configuration with container sizes
    numeric=True,  # Support columns-1 through columns-12
    decimals=False,
    fractions=False,
    named=CONTAINER_SCALES,  # Use all container scales (3xs through 7xl)
    special={
        "auto": "auto"
    },
    negative=False
)

# Create columns factory
columns = ScaledFactory("columns", COLUMNS_CONFIG) # The columns factory

# %% ../../nbs/utilities/layout.ipynb 41
# Break utilities - organized by type
BREAK_BEFORE_VALUES = {
    "auto": "break-before-auto",
    "avoid": "break-before-avoid",
    "all": "break-before-all",
    "avoid-page": "break-before-avoid-page",
    "page": "break-before-page",
    "left": "break-before-left",
    "right": "break-before-right",
    "column": "break-before-column"
}

BREAK_AFTER_VALUES = {
    "auto": "break-after-auto",
    "avoid": "break-after-avoid",
    "all": "break-after-all",
    "avoid-page": "break-after-avoid-page",
    "page": "break-after-page",
    "left": "break-after-left",
    "right": "break-after-right",
    "column": "break-after-column"
}

BREAK_INSIDE_VALUES = {
    "auto": "break-inside-auto",
    "avoid": "break-inside-avoid",
    "avoid-page": "break-inside-avoid-page",
    "avoid-column": "break-inside-avoid-column"
}

# Create break factories with sub-properties
class BreakFactory:
    """Factory for break utilities with before, after, and inside sub-factories."""
    
    def __init__(self):
        "Initialize with sub-factories for before, after, and inside breaks."
        self.before = SimpleFactory(BREAK_BEFORE_VALUES)
        self.after = SimpleFactory(BREAK_AFTER_VALUES)
        self.inside = SimpleFactory(BREAK_INSIDE_VALUES)

# Create the break factory
break_util = BreakFactory() # The break factory

# %% ../../nbs/utilities/layout.ipynb 43
# Box decoration break utilities
BOX_DECORATION_VALUES = {
    "clone": "box-decoration-clone",
    "slice": "box-decoration-slice"
}

# Create box decoration factory
box_decoration = SimpleFactory(BOX_DECORATION_VALUES) # The box decoration factory

# %% ../../nbs/utilities/layout.ipynb 45
# Overscroll behavior values
OVERSCROLL_VALUES = ["auto", "contain", "none"]

class OverscrollFactory:
    """Factory for overscroll behavior utilities with directional support."""
    
    def __init__(self):
        "Initialize with overscroll values and directional sub-factories."
        # Create base overscroll utilities
        self._values = {value: f"overscroll-{value}" for value in OVERSCROLL_VALUES}
        
        # Create x and y sub-factories
        self.x = type('OverscrollX', (), {
            value: f"overscroll-x-{value}" for value in OVERSCROLL_VALUES
        })()
        self.y = type('OverscrollY', (), {
            value: f"overscroll-y-{value}" for value in OVERSCROLL_VALUES
        })()
    
    def __getattr__(
        self,
        name: str  # The attribute name to look up in overscroll values
    ) -> str:  # The corresponding overscroll CSS class
        "Get overscroll utility by attribute name."
        if name in self._values:
            return self._values[name]
        raise AttributeError(f"'OverscrollFactory' object has no attribute '{name}'")

# Create the overscroll factory
overscroll = OverscrollFactory() # The overscroll factory

# %% ../../nbs/utilities/layout.ipynb 54
def center_absolute(
) -> str:  # Combined CSS classes for centering an element
    """Center an absolutely positioned element."""
    return combine_classes(
        position.absolute, 
        top("1/2"), 
        left("1/2"), 
        "-translate-x-1/2",
        "-translate-y-1/2"
    )

# %% ../../nbs/utilities/layout.ipynb 55
def stack_context(
    z_value: int = 10  # The z-index value for the stacking context
) -> str:  # Combined CSS classes for creating a stacking context
    """Create a stacking context with z-index."""
    return combine_classes(position.relative, z(z_value))

# %% ../../nbs/utilities/layout.ipynb 56
def sticky_top(
    offset: TailwindScale = 0  # Top offset value (e.g., 0, 4, '1rem')
) -> str:  # Combined CSS classes for sticky positioning
    """Make element sticky at top with optional offset."""
    return combine_classes(position.sticky, top(offset))

# %% ../../nbs/utilities/layout.ipynb 57
def full_bleed(
) -> str:  # Combined CSS classes for full-bleed layout
    """Make element break out of container constraints."""
    return combine_classes(position.relative, left("1/2"), right("1/2"), "-mx-[50vw]", "w-screen")
