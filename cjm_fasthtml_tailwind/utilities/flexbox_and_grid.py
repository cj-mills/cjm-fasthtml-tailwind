"""Flexbox and CSS Grid utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/flexbox_and_grid.ipynb.

# %% auto 0
__all__ = ['FLEX_BASIS_CONFIG', 'basis', 'FLEX_DIRECTION_VALUES', 'flex_direction', 'FLEX_WRAP_VALUES', 'flex_wrap',
           'FLEX_CONFIG', 'flex', 'FLEX_GROW_CONFIG', 'grow', 'FLEX_SHRINK_CONFIG', 'shrink', 'ORDER_CONFIG', 'order',
           'GRID_COLS_CONFIG', 'grid_cols', 'GRID_ROWS_CONFIG', 'grid_rows', 'COL_SPAN_CONFIG', 'COL_START_END_CONFIG',
           'col_span', 'col_start', 'col_end', 'col', 'ROW_SPAN_CONFIG', 'ROW_START_END_CONFIG', 'row_span',
           'row_start', 'row_end', 'row', 'GRID_FLOW_VALUES', 'grid_flow', 'AUTO_COLS_VALUES', 'AUTO_ROWS_VALUES',
           'auto_cols', 'auto_rows', 'gap', 'JUSTIFY_CONTENT_VALUES', 'justify', 'JUSTIFY_ITEMS_VALUES',
           'justify_items', 'JUSTIFY_SELF_VALUES', 'justify_self', 'ALIGN_CONTENT_VALUES', 'content',
           'ALIGN_ITEMS_VALUES', 'items', 'ALIGN_SELF_VALUES', 'self_align', 'PLACE_CONTENT_VALUES', 'place_content',
           'PLACE_ITEMS_VALUES', 'place_items', 'PLACE_SELF_VALUES', 'place_self', 'GrowFactory', 'ShrinkFactory',
           'ColFactory', 'RowFactory', 'AutoColsFactory', 'AutoRowsFactory', 'GapFactory', 'flex_center',
           'flex_between', 'flex_col_center', 'grid_center', 'responsive_grid']

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 3
from typing import Optional, Union, Literal, List, Dict
from dataclasses import dataclass
from cjm_fasthtml_tailwind.core.base import (
    TailwindScale, combine_classes, StandardUtility, UtilityFactory,
    is_numeric_scale, is_fraction, is_custom_property, is_arbitrary_value,
    CONTAINER_SCALES
)
from cjm_fasthtml_tailwind.builders.scales import (
    ScaledFactory, DirectionalScaledFactory, ScaleConfig, 
    ScaledUtility, SimpleFactory, SPACING_CONFIG, NUMERIC_SCALE
)

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 5
FLEX_BASIS_CONFIG = ScaleConfig( # Create configuration for flex basis - similar to width/height but with container scales
    numeric=True,
    decimals=True,
    fractions=True,
    named=CONTAINER_SCALES,  # Use container scales (3xs through 7xl)
    special={
        "auto": "auto",
        "full": "full"
    },
    negative=False
)

# Create flex basis factory
basis = ScaledFactory("basis", FLEX_BASIS_CONFIG) # The flex basis factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 8
FLEX_DIRECTION_VALUES = { # Flex direction utilities
    "row": "flex-row",
    "row-reverse": "flex-row-reverse",
    "col": "flex-col",
    "col-reverse": "flex-col-reverse"
}

# Create flex direction factory
flex_direction = SimpleFactory(FLEX_DIRECTION_VALUES) # The flex direction factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 11
FLEX_WRAP_VALUES = { # Flex wrap utilities
    "nowrap": "flex-nowrap",
    "wrap": "flex-wrap",
    "wrap-reverse": "flex-wrap-reverse"
}

# Create flex wrap factory
flex_wrap = SimpleFactory(FLEX_WRAP_VALUES) # The flex wrap factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 14
FLEX_CONFIG = ScaleConfig( # Flex configuration - supports numeric values and special presets
    numeric=True,  # Support flex-1, flex-2, etc.
    decimals=False,
    fractions=True,  # Support flex-1/2, etc.
    named=None,
    special={
        "auto": "auto",      # flex: 1 1 auto
        "initial": "initial", # flex: 0 1 auto
        "none": "none"       # flex: none
    },
    negative=False
)

# Create flex factory
flex = ScaledFactory("flex", FLEX_CONFIG) # The flex factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 17
FLEX_GROW_CONFIG = ScaleConfig( # Flex grow configuration
    numeric=True,  # Support grow-0, grow-1, etc.
    decimals=False,
    fractions=False,
    named=None,
    special={},
    negative=False
)

# Create grow factory with special handling for grow (defaults to 1)
class GrowFactory(ScaledFactory):
    """Special factory for grow that defaults to grow-1 when called without args."""
    
    def __call__(
        self,
        value: Optional[TailwindScale] = None  # The grow value (defaults to 1 if None)
    ) -> ScaledUtility:  # A new grow utility instance
        "Create a grow utility, defaulting to grow-1 when called without arguments."
        if value is None:
            # Default grow means grow-1
            return super().__call__(1)
        return super().__call__(value)

# Create flex grow factory
grow = GrowFactory("grow", FLEX_GROW_CONFIG) # The flex grow factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 20
FLEX_SHRINK_CONFIG = ScaleConfig( # Flex shrink configuration (same as grow)
    numeric=True,  # Support shrink-0, shrink-1, etc.
    decimals=False,
    fractions=False,
    named=None,
    special={},
    negative=False
)

# Create shrink factory with special handling for shrink (defaults to 1)
class ShrinkFactory(ScaledFactory):
    """Special factory for shrink that defaults to shrink-1 when called without args."""
    
    def __call__(
        self,
        value: Optional[TailwindScale] = None  # The shrink value (defaults to 1 if None)
    ) -> ScaledUtility:  # A new shrink utility instance
        "Create a shrink utility, defaulting to shrink-1 when called without arguments."
        if value is None:
            # Default shrink means shrink-1
            return super().__call__(1)
        return super().__call__(value)

# Create flex shrink factory
shrink = ShrinkFactory("shrink", FLEX_SHRINK_CONFIG) # The flex shrink factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 23
ORDER_CONFIG = ScaleConfig( # Order configuration - supports numeric values including negative
    numeric=True,  # Support order-1, order-2, etc.
    decimals=False,
    fractions=False,
    named=None,
    special={
        "first": "first",  # order: calc(-infinity)
        "last": "last",    # order: calc(infinity)
        "none": "none"     # order: 0
    },
    negative=True  # Support negative order values
)

# Create order factory
order = ScaledFactory("order", ORDER_CONFIG) # The order factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 26
GRID_COLS_CONFIG = ScaleConfig( # Grid template columns configuration
    numeric=True,  # Support grid-cols-1 through grid-cols-12
    decimals=False,
    fractions=False,
    named=None,
    special={
        "none": "none",        # grid-template-columns: none
        "subgrid": "subgrid"   # grid-template-columns: subgrid
    },
    negative=False
)

# Create grid columns factory
grid_cols = ScaledFactory("grid-cols", GRID_COLS_CONFIG) # The grid columns factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 29
GRID_ROWS_CONFIG = ScaleConfig( # Grid template rows configuration (same as columns)
    numeric=True,  # Support grid-rows-1 through grid-rows-12
    decimals=False,
    fractions=False,
    named=None,
    special={
        "none": "none",        # grid-template-rows: none
        "subgrid": "subgrid"   # grid-template-rows: subgrid
    },
    negative=False
)

# Create grid rows factory
grid_rows = ScaledFactory("grid-rows", GRID_ROWS_CONFIG) # The grid rows factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 32
COL_SPAN_CONFIG = ScaleConfig( # Grid column span configuration
    numeric=True,  # Support col-span-1 through col-span-12
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto",  # grid-column: auto
        "full": "full"   # grid-column: 1 / -1
    },
    negative=False
)

COL_START_END_CONFIG = ScaleConfig( # Grid column start/end configuration
    numeric=True,  # Support col-start-1, col-end-13, etc.
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto"
    },
    negative=True  # Support negative values like -col-start-1
)

# Create grid column factories
col_span = ScaledFactory("col-span", COL_SPAN_CONFIG) # Column span factory
col_start = ScaledFactory("col-start", COL_START_END_CONFIG) # Column start factory
col_end = ScaledFactory("col-end", COL_START_END_CONFIG) # Column end factory

# Special factory for col-auto and arbitrary grid-column values
class ColFactory(ScaledFactory):
    """Special factory for grid-column shorthand."""
    
    def __init__(self):
        "Initialize with 'col' prefix and column configuration."
        super().__init__("col", COL_START_END_CONFIG)
    
    @property
    def auto(
        self
    ) -> str:  # The 'col-auto' CSS class
        "Return the col-auto utility class."
        return "col-auto"

col = ColFactory() # The grid column factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 35
ROW_SPAN_CONFIG = ScaleConfig( # Grid row span configuration (same as column)
    numeric=True,  # Support row-span-1 through row-span-12
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto",  # grid-row: auto
        "full": "full"   # grid-row: 1 / -1
    },
    negative=False
)

ROW_START_END_CONFIG = ScaleConfig( # Grid row start/end configuration (same as column)
    numeric=True,  # Support row-start-1, row-end-13, etc.
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto"
    },
    negative=True  # Support negative values
)

# Create grid row factories
row_span = ScaledFactory("row-span", ROW_SPAN_CONFIG) # Row span factory
row_start = ScaledFactory("row-start", ROW_START_END_CONFIG) # Row start factory
row_end = ScaledFactory("row-end", ROW_START_END_CONFIG) # Row end factory

# Special factory for row-auto and arbitrary grid-row values
class RowFactory(ScaledFactory):
    """Special factory for grid-row shorthand."""
    
    def __init__(self):
        "Initialize with 'row' prefix and row configuration."
        super().__init__("row", ROW_START_END_CONFIG)
    
    @property
    def auto(
        self
    ) -> str:  # The 'row-auto' CSS class
        "Return the row-auto utility class."
        return "row-auto"

row = RowFactory() # The grid row factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 38
GRID_FLOW_VALUES = { # Grid auto flow utilities
    "row": "grid-flow-row",
    "col": "grid-flow-col",
    "dense": "grid-flow-dense",
    "row-dense": "grid-flow-row-dense",
    "col-dense": "grid-flow-col-dense"
}

# Create grid flow factory
grid_flow = SimpleFactory(GRID_FLOW_VALUES) # The grid flow factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 41
AUTO_COLS_VALUES = { # Grid auto columns values
    "auto": "auto-cols-auto",
    "min": "auto-cols-min",
    "max": "auto-cols-max",
    "fr": "auto-cols-fr"
}

AUTO_ROWS_VALUES = { # Grid auto rows values
    "auto": "auto-rows-auto",
    "min": "auto-rows-min",
    "max": "auto-rows-max",
    "fr": "auto-rows-fr"
}

# Create auto columns/rows factories with custom value support
class AutoColsFactory(SimpleFactory):
    """Factory for auto-cols with custom value support."""
    
    def __call__(
        self,
        value: str  # Custom auto-cols value (e.g., '200px', 'minmax(0, 1fr)')
    ) -> str:  # The formatted auto-cols CSS class
        """Handle custom values."""
        if is_custom_property(value):
            return f"auto-cols-({value})"
        elif is_arbitrary_value(value) or value not in ["auto", "min", "max", "fr"]:
            return f"auto-cols-[{value}]"
        return f"auto-cols-{value}"

class AutoRowsFactory(SimpleFactory):
    """Factory for auto-rows with custom value support."""
    
    def __call__(
        self,
        value: str  # Custom auto-rows value (e.g., '200px', 'minmax(0, 1fr)')
    ) -> str:  # The formatted auto-rows CSS class
        """Handle custom values."""
        if is_custom_property(value):
            return f"auto-rows-({value})"
        elif is_arbitrary_value(value) or value not in ["auto", "min", "max", "fr"]:
            return f"auto-rows-[{value}]"
        return f"auto-rows-{value}"

# Create the factories
auto_cols = AutoColsFactory(AUTO_COLS_VALUES) # The auto columns factory
auto_rows = AutoRowsFactory(AUTO_ROWS_VALUES) # The auto rows factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 44
# Create gap factory similar to SpaceFactory in spacing.ipynb
# Note: gap utilities use a hyphenated prefix pattern
class GapFactory:
    """Special factory for gap utilities that use hyphenated directions."""
    
    def __init__(self):
        "Initialize with base gap and directional gap factories."
        # Base gap utility
        self._base = ScaledFactory("gap", SPACING_CONFIG)
        # Directional gap utilities with hyphens
        self.x = ScaledFactory("gap-x", SPACING_CONFIG)
        self.y = ScaledFactory("gap-y", SPACING_CONFIG)
    
    def __call__(
        self,
        value: Optional[TailwindScale] = None  # The gap value (numeric, px, or arbitrary)
    ) -> ScaledUtility:  # A new gap utility instance
        """Create a gap utility instance."""
        return self._base(value)
    
    def __getattr__(
        self,
        name: str  # The attribute name to convert to a gap value
    ) -> ScaledUtility:  # A new gap utility instance
        """Handle attribute access for named values."""
        return self._base.__getattr__(name)

gap = GapFactory() # The gap factory

# Note: gap.x creates gap-x-* classes (column-gap)
# Note: gap.y creates gap-y-* classes (row-gap)

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 47
JUSTIFY_CONTENT_VALUES = { # Justify content values
    "start": "justify-start",
    "end": "justify-end",
    "end-safe": "justify-end-safe",
    "center": "justify-center",
    "center-safe": "justify-center-safe",
    "between": "justify-between",
    "around": "justify-around",
    "evenly": "justify-evenly",
    "stretch": "justify-stretch",
    "baseline": "justify-baseline",
    "normal": "justify-normal"
}

# Create justify content factory
justify = SimpleFactory(JUSTIFY_CONTENT_VALUES) # The justify content factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 49
JUSTIFY_ITEMS_VALUES = { # Justify items values
    "start": "justify-items-start",
    "end": "justify-items-end",
    "end-safe": "justify-items-end-safe",
    "center": "justify-items-center",
    "center-safe": "justify-items-center-safe",
    "stretch": "justify-items-stretch",
    "normal": "justify-items-normal"
}

# Create justify items factory
justify_items = SimpleFactory(JUSTIFY_ITEMS_VALUES) # The justify items factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 51
JUSTIFY_SELF_VALUES = { # Justify self values
    "auto": "justify-self-auto",
    "start": "justify-self-start",
    "center": "justify-self-center",
    "center-safe": "justify-self-center-safe",
    "end": "justify-self-end",
    "end-safe": "justify-self-end-safe",
    "stretch": "justify-self-stretch"
}

# Create justify self factory
justify_self = SimpleFactory(JUSTIFY_SELF_VALUES) # The justify self factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 54
ALIGN_CONTENT_VALUES = { # Align content values
    "normal": "content-normal",
    "center": "content-center",
    "start": "content-start",
    "end": "content-end",
    "between": "content-between",
    "around": "content-around",
    "evenly": "content-evenly",
    "baseline": "content-baseline",
    "stretch": "content-stretch"
}

# Create align content factory
content = SimpleFactory(ALIGN_CONTENT_VALUES) # The align content factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 56
ALIGN_ITEMS_VALUES = { # Align items values
    "start": "items-start",
    "end": "items-end",
    "end-safe": "items-end-safe",
    "center": "items-center",
    "center-safe": "items-center-safe",
    "baseline": "items-baseline",
    "baseline-last": "items-baseline-last",
    "stretch": "items-stretch"
}

# Create align items factory
items = SimpleFactory(ALIGN_ITEMS_VALUES) # The align items factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 58
ALIGN_SELF_VALUES = { # Align self values
    "auto": "self-auto",
    "start": "self-start",
    "end": "self-end",
    "end-safe": "self-end-safe",
    "center": "self-center",
    "center-safe": "self-center-safe",
    "stretch": "self-stretch",
    "baseline": "self-baseline",
    "baseline-last": "self-baseline-last"
}

# Create align self factory
self_align = SimpleFactory(ALIGN_SELF_VALUES) # The align self factory (renamed to avoid conflict with Python's self)

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 61
PLACE_CONTENT_VALUES = { # Place content values
    "center": "place-content-center",
    "center-safe": "place-content-center-safe",
    "start": "place-content-start",
    "end": "place-content-end",
    "end-safe": "place-content-end-safe",
    "between": "place-content-between",
    "around": "place-content-around",
    "evenly": "place-content-evenly",
    "baseline": "place-content-baseline",
    "stretch": "place-content-stretch"
}

# Create place content factory
place_content = SimpleFactory(PLACE_CONTENT_VALUES) # The place content factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 63
PLACE_ITEMS_VALUES = { # Place items values
    "start": "place-items-start",
    "end": "place-items-end",
    "end-safe": "place-items-end-safe",
    "center": "place-items-center",
    "center-safe": "place-items-center-safe",
    "baseline": "place-items-baseline",
    "stretch": "place-items-stretch"
}

# Create place items factory
place_items = SimpleFactory(PLACE_ITEMS_VALUES) # The place items factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 65
PLACE_SELF_VALUES = { # Place self values
    "auto": "place-self-auto",
    "start": "place-self-start",
    "end": "place-self-end",
    "end-safe": "place-self-end-safe",
    "center": "place-self-center",
    "center-safe": "place-self-center-safe",
    "stretch": "place-self-stretch"
}

# Create place self factory
place_self = SimpleFactory(PLACE_SELF_VALUES) # The place self factory

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 75
def flex_center(
) -> str:  # Combined CSS classes for centered flex container
    """Create classes for a flex container that centers its content."""
    return combine_classes("flex", justify.center, items.center)

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 76
def flex_between(
) -> str:  # Combined CSS classes for flex container with space between
    """Create classes for a flex container with space between items."""
    return combine_classes("flex", justify.between, items.center)

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 77
def flex_col_center(
) -> str:  # Combined CSS classes for centered vertical flex container
    """Create classes for a vertical flex container that centers its content."""
    return combine_classes("flex", flex_direction.col, justify.center, items.center)

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 78
def grid_center(
) -> str:  # Combined CSS classes for centered grid container
    """Create classes for a grid container that centers its content."""
    return combine_classes("grid", place_items.center)

# %% ../../nbs/utilities/flexbox_and_grid.ipynb 79
def responsive_grid(
    mobile: int = 1,  # Number of columns on mobile devices
    tablet: int = 2,  # Number of columns on tablet devices
    desktop: int = 3,  # Number of columns on desktop devices
    gap_size: TailwindScale = 4  # Gap size between grid items
) -> str:  # Combined CSS classes for responsive grid
    """Create responsive grid classes with customizable breakpoints."""
    return combine_classes(
        "grid",
        grid_cols(mobile),
        f"md:grid-cols-{tablet}",
        f"lg:grid-cols-{desktop}",
        gap(gap_size)
    )
