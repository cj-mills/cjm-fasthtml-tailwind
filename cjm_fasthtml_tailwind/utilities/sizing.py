"""Width, height, and min/max sizing utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/sizing.ipynb.

# %% auto 0
__all__ = ['w', 'h', 'min_w', 'max_w', 'container', 'min_h', 'max_h', 'size_util', 'size', 'square', 'full_size', 'full_screen']

# %% ../../nbs/utilities/sizing.ipynb 3
from typing import Optional, Union
from ..core.base import TailwindScale, combine_classes
from cjm_fasthtml_tailwind.builders.scales import (
    ScaledFactory, SIZE_CONFIG, ScaleConfig
)

# %% ../../nbs/utilities/sizing.ipynb 5
w = ScaledFactory("w", SIZE_CONFIG) # The width factory

# %% ../../nbs/utilities/sizing.ipynb 15
h = ScaledFactory("h", SIZE_CONFIG) # The height factory

# %% ../../nbs/utilities/sizing.ipynb 21
min_w = ScaledFactory("min-w", SIZE_CONFIG) # The min-width factory

# %% ../../nbs/utilities/sizing.ipynb 24
max_w = ScaledFactory("max-w", SIZE_CONFIG) # The max-width factory

# %% ../../nbs/utilities/sizing.ipynb 26
# Container utility
container = "container"  # Responsive container with breakpoint-based max-widths

# %% ../../nbs/utilities/sizing.ipynb 28
min_h = ScaledFactory("min-h", SIZE_CONFIG) # The min-height factory

# %% ../../nbs/utilities/sizing.ipynb 31
max_h = ScaledFactory("max-h", SIZE_CONFIG) # The max-height factory

# %% ../../nbs/utilities/sizing.ipynb 33
size_util = ScaledFactory("size", SIZE_CONFIG) # The size factory (sets both width and height)

# %% ../../nbs/utilities/sizing.ipynb 45
def size(
    w: Optional[TailwindScale] = None,        # Width value
    h: Optional[TailwindScale] = None,        # Height value
    min_w: Optional[TailwindScale] = None,    # Minimum width
    max_w: Optional[TailwindScale] = None,    # Maximum width
    min_h: Optional[TailwindScale] = None,    # Minimum height
    max_h: Optional[TailwindScale] = None     # Maximum height
) -> str:  # Space-separated size classes
    """Generate size classes with a convenient API."""
    classes = []
    
    if w is not None:
        classes.append(str(globals()['w'](w)))
    if h is not None:
        classes.append(str(globals()['h'](h)))
    if min_w is not None:
        classes.append(str(globals()['min_w'](min_w)))
    if max_w is not None:
        classes.append(str(globals()['max_w'](max_w)))
    if min_h is not None:
        classes.append(str(globals()['min_h'](min_h)))
    if max_h is not None:
        classes.append(str(globals()['max_h'](max_h)))
    
    return combine_classes(*classes)

# %% ../../nbs/utilities/sizing.ipynb 46
def square(
    size: TailwindScale  # Size value for both width and height
) -> str:  # Space-separated width and height classes
    """Create a square element with equal width and height."""
    return combine_classes(w(size), h(size))

# %% ../../nbs/utilities/sizing.ipynb 47
def full_size(
) -> str:  # "w-full h-full"
    """Make element take full width and height of parent."""
    return combine_classes(w.full, h.full)

# %% ../../nbs/utilities/sizing.ipynb 48
def full_screen(
) -> str:  # "w-screen h-screen"
    """Make element take full viewport width and height."""
    return combine_classes(w.screen, h.screen)
