"""Padding and margin utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/spacing.ipynb.

# %% auto 0
__all__ = ['p', 'ps', 'pe', 'm', 'ms', 'me', 'space', 'space_x_reverse', 'space_y_reverse', 'SpaceFactory', 'pad', 'margin']

# %% ../../nbs/utilities/spacing.ipynb 3
from typing import Optional, Union
from ..core.base import TailwindScale, combine_classes
from cjm_fasthtml_tailwind.builders.scales import (
    DirectionalScaledFactory, ScaledFactory, SPACING_CONFIG
)

# %% ../../nbs/utilities/spacing.ipynb 5
p = DirectionalScaledFactory("p", SPACING_CONFIG) # The padding factory

# Additional directional padding utilities for logical properties
ps = ScaledFactory("ps", SPACING_CONFIG)  # padding-inline-start
pe = ScaledFactory("pe", SPACING_CONFIG)  # padding-inline-end

# %% ../../nbs/utilities/spacing.ipynb 14
m = DirectionalScaledFactory("m", SPACING_CONFIG) # The margin factory

# Additional directional margin utilities for logical properties
ms = ScaledFactory("ms", SPACING_CONFIG)  # margin-inline-start
me = ScaledFactory("me", SPACING_CONFIG)  # margin-inline-end

# %% ../../nbs/utilities/spacing.ipynb 23
# Create space between factories
# Note: space utilities use a hyphenated prefix pattern
class SpaceFactory:
    """Special factory for space utilities that use hyphenated directions."""
    
    def __init__(self):
        "Initialize with scaled factories."
        self.x = ScaledFactory("space-x", SPACING_CONFIG)
        self.y = ScaledFactory("space-y", SPACING_CONFIG)

space = SpaceFactory() # The space factory

# Space reverse utilities
space_x_reverse = "space-x-reverse"  # Reverse the order of horizontal spacing
space_y_reverse = "space-y-reverse"  # Reverse the order of vertical spacing

# %% ../../nbs/utilities/spacing.ipynb 31
def pad(
    all: Optional[TailwindScale] = None,  # Padding for all sides
    x: Optional[TailwindScale] = None,    # Horizontal padding
    y: Optional[TailwindScale] = None,    # Vertical padding
    t: Optional[TailwindScale] = None,    # Top padding
    r: Optional[TailwindScale] = None,    # Right padding
    b: Optional[TailwindScale] = None,    # Bottom padding
    l: Optional[TailwindScale] = None     # Left padding
) -> str:  # Space-separated padding classes
    """Generate padding classes with a convenient API."""
    classes = []
    
    if all is not None:
        classes.append(str(p(all)))
    if x is not None:
        classes.append(str(p.x(x)))
    if y is not None:
        classes.append(str(p.y(y)))
    if t is not None:
        classes.append(str(p.t(t)))
    if r is not None:
        classes.append(str(p.r(r)))
    if b is not None:
        classes.append(str(p.b(b)))
    if l is not None:
        classes.append(str(p.l(l)))
    
    return combine_classes(*classes)

# %% ../../nbs/utilities/spacing.ipynb 32
def margin(
    all: Optional[TailwindScale] = None,  # Margin for all sides
    x: Optional[TailwindScale] = None,    # Horizontal margin
    y: Optional[TailwindScale] = None,    # Vertical margin
    t: Optional[TailwindScale] = None,    # Top margin
    r: Optional[TailwindScale] = None,    # Right margin
    b: Optional[TailwindScale] = None,    # Bottom margin
    l: Optional[TailwindScale] = None,    # Left margin
    negative: bool = False                 # Apply negative margins
) -> str:  # Space-separated margin classes
    """Generate margin classes with a convenient API."""
    classes = []
    
    if all is not None:
        classes.append(str(m(all, negative=negative)))
    if x is not None:
        if x == "auto":
            classes.append(str(m.x.auto))
        else:
            classes.append(str(m.x(x, negative=negative)))
    if y is not None:
        if y == "auto":
            classes.append(str(m.y.auto))
        else:
            classes.append(str(m.y(y, negative=negative)))
    if t is not None:
        classes.append(str(m.t(t, negative=negative)))
    if r is not None:
        classes.append(str(m.r(r, negative=negative)))
    if b is not None:
        classes.append(str(m.b(b, negative=negative)))
    if l is not None:
        classes.append(str(m.l(l, negative=negative)))
    
    return combine_classes(*classes)
